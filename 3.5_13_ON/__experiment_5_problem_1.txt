[{"attempt": "0_1", "status": true, "solutions": "Solution(Baker=3, Cooper=2, Fletcher=4, Miller=5, Smith=1, _checker='')"}]

Solution(Baker=3, Cooper=2, Fletcher=4, Miller=5, Smith=1, _checker='')
___________
% Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house.
% Baker does not live on the fifth floor.
% Cooper does not live on the first floor.
% Fletcher does not live on either the fifth or the first floor.
% Miller lives on a higher floor than does Cooper.
% Smith does not live on a floor adjacent to Fletcher.
% Fletcher does not live on a floor adjacent to Cooper.
% They all live on different floors.

% Variables representing the floor each person lives on (1-5)
var 1..5: Baker;  
var 1..5: Cooper;
var 1..5: Fletcher;
var 1..5: Miller;
var 1..5: Smith;

% Constraints
constraint all_different([Baker, Cooper, Fletcher, Miller, Smith]);  % All live on different floors
constraint Baker != 5;  % Baker does not live on the fifth floor
constraint Cooper != 1;  % Cooper does not live on the first floor
constraint Fletcher != 1 /\ Fletcher != 5;  % Fletcher does not live on the first or fifth floor
constraint Miller > Cooper;  % Miller lives on a higher floor than Cooper

% Adjacency check
constraint abs(Fletcher - Smith) != 1;  % Smith does not live on a floor adjacent to Fletcher
constraint abs(Fletcher - Cooper) != 1;  % Fletcher does not live on a floor adjacent to Cooper


solve satisfy;

% Output the floor for each person
output ["Baker: " ++ show(Baker) ++ "\n"] ++
["Cooper: " ++ show(Cooper) ++ "\n"] ++
["Fletcher: " ++ show(Fletcher) ++ "\n"] ++
["Miller: " ++ show(Miller) ++ "\n"] ++
["Smith: " ++ show(Smith) ++ "\n"];
___________
% Unassigned input parameters from the Minizinc model
% These will be specified in the data file

% Example:
% Baker: 3
% Cooper: 1
% Fletcher: 5
% Miller: 4
% Smith: 2
==============================