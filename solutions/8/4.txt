% Define the number of bins and items\nint: n_bins; % Number of bins\nint: n_items; % Number of items\n\n% Define the dimensions of the bins\narray[1..n_bins] of int: bin_width; % Width of each bin\narray[1..n_bins] of int: bin_height; % Height of each bin\narray[1..n_bins] of int: bin_depth; % Depth of each bin\n\n% Define the dimensions of the items\narray[1..n_items] of int: item_width; % Width of each item\narray[1..n_items] of int: item_height; % Height of each item\narray[1..n_items] of int: item_depth; % Depth of each item\n\n% Define the decision variable: item_assignment[i, j] is 1 if item i is in bin j\narray[1..n_items, 1..n_bins] of var 0..1: item_assignment;\n\n% Placement constraints: each item must fit in a single bin\nconstraint\n    forall(i in 1..n_items) (\n        sum(j in 1..n_bins) (item_assignment[i, j]) = 1\n    );\n\n% Size constraints: each bin must not overflow\nconstraint\n    forall(j in 1..n_bins) (\n        sum(i in 1..n_items) (item_width[i] * item_assignment[i, j]) <= bin_width[j] /\\n        sum(i in 1..n_items) (item_height[i] * item_assignment[i, j]) <= bin_height[j] /\\n        sum(i in 1..n_items) (item_depth[i] * item_assignment[i, j]) <= bin_depth[j]\n    );\n\n% Objective: Minimize the number of bins used\nvar int: bins_used = sum(j in 1..n_bins) (max(i in 1..n_items) (item_assignment[i, j]));\nsolve minimize bins_used;\n\noutput ["Bins used: ", show(bins_used), "\n"];\noutput ["Item assignments:\n"];\noutput [\n    if item_assignment[i, j] = 1 then "Item ", show(i), " in Bin ", show(j), "\n" else "" endif\n    | i in 1..n_items, j in 1..n_bins\n];

n_bins = 3;\nn_items = 5;\n\nbin_width = [10, 10, 10];\nbin_height = [10, 10, 10];\nbin_depth = [10, 10, 10];\n\nitem_width = [3, 3, 4, 3, 2];\nitem_height = [3, 3, 2, 3, 3];\nitem_depth = [3, 2, 3, 3, 2];int: items = 5; % from dzn
int: spaces = 3; % from dzn
int: space_dim = 10; % from dzn

array[1..items, 1..3] of var 1..10: item_dimensions; % from dzn

constraint
  forall(item in 1..items)(
    item_dimensions[item, 1] <= space_dim /\
    item_dimensions[item, 2] <= space_dim /\
    item_dimensions[item, 3] <= space_dim
  );

array[1..items, 1..spaces, 1..3] of var 0..1: item_positions;

constraint
  forall(item in 1..items, space in 1..spaces)(
    sum(d in 1..3)(item_positions[item, space, d] * item_dimensions[item, d]) <= space_dim
  );

constraint
  forall(space in 1..spaces, d in 1..3)(
    sum(item in 1..items)(item_positions[item, space, d] * item_dimensions[item, d]) <= space_dim
  );

array[1..spaces, 1..3] of var 0..10: space_remain;

constraint
  forall(space in 1..spaces, d in 1..3)(
    space_remain[space, d] = space_dim - sum(item in 1..items)(item_positions[item, space, d] * item_dimensions[item, d])
  );

solve satisfy;

output["Space Remaining: " ++ show(space_remain) ++ "\n"];

item_dimensions = array2d(1..5, 1..3, [3, 3, 3, 3, 3, 2, 4, 2, 3, 3, 3, 3, 2, 3, 2]);