[{"attempt": "0_1", "status": true, "solutions": "None"}, {"attempt": "2_1", "status": true, "solutions": "Solution(Baker=3, Cooper=2, Fletcher=4, Miller=5, Smith=1, _checker='')"}]

None
___________
int: Baker; % from dzn\nint: Cooper; % from dzn\nint: Fletcher; % from dzn\nint: Miller; % from dzn\nint: Smith; % from dzn\n\nconstraint\n    Baker != 5 /\\n    Cooper != 1 /\\n    Fletcher != 1 /\\n    Fletcher != 5 /\\n    Miller > Cooper /\\n    abs(Smith - Fletcher) != 1 /\\n    abs(Fletcher - Cooper) != 1 /\\n    all_different([Baker, Cooper, Fletcher, Miller, Smith]);\n\nsolve satisfy;\n\noutput [\n    "Baker lives on floor: ", show(Baker), "\n",\n    "Cooper lives on floor: ", show(Cooper), "\n",\n    "Fletcher lives on floor: ", show(Fletcher), "\n",\n    "Miller lives on floor: ", show(Miller), "\n",\n    "Smith lives on floor: ", show(Smith), "\n"\n];
___________
Baker = 0;\nCooper = 0;\nFletcher = 0;\nMiller = 0;\nSmith = 0;
==============================Solution(Baker=3, Cooper=2, Fletcher=4, Miller=5, Smith=1, _checker='')
___________
% Parameters representing the individuals and floor numbers (1 to 5)
% Baker, Cooper, Fletcher, Miller, Smith: 1 to 5 (representing the floors where they live)
var 1..5: Baker;    % from dzn
var 1..5: Cooper;   % from dzn
var 1..5: Fletcher; % from dzn
var 1..5: Miller;   % from dzn
var 1..5: Smith;    % from dzn

% Constraints based on the rules given in the problem description
constraint Baker != 5; % Baker does not live on the fifth floor
constraint Cooper != 1; % Cooper does not live on the first floor
constraint Fletcher != 1 /\ Fletcher != 5; % Fletcher does not live on the first or fifth floor
constraint Miller > Cooper; % Miller lives on a higher floor than Cooper
constraint abs(Fletcher - Smith) != 1; % Smith does not live on a floor adjacent to Fletcher
constraint abs(Fletcher - Cooper) != 1; % Fletcher does not live on a floor adjacent to Cooper
constraint all_different([Baker, Cooper, Fletcher, Miller, Smith]); % All live on different floors

% Solve the problem
solve satisfy;

% Output the solution
output["Baker: ", show(Baker), "\n"];
output["Cooper: ", show(Cooper), "\n"];
output["Fletcher: ", show(Fletcher), "\n"];
output["Miller: ", show(Miller), "\n"];
output["Smith: ", show(Smith), "\n"];
___________
Baker = 2;
Cooper = 4;
Fletcher = 3;
Miller = 5;
Smith = 1;
==============================