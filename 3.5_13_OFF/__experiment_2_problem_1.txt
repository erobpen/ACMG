[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "0_2", "status": true, "solutions": "Solution(Baker=3, Cooper=2, Fletcher=4, Miller=5, Smith=1, _checker='')"}]

None
___________
int: Baker; % Floor where Baker lives (1-5)
int: Cooper; % Floor where Cooper lives (1-5)
int: Fletcher; % Floor where Fletcher lives (1-5)
int: Miller; % Floor where Miller lives (1-5)
int: Smith; % Floor where Smith lives (1-5)

constraint all_different([Baker, Cooper, Fletcher, Miller, Smith]);

% Constraints based on the given conditions
constraint Baker != 5; % Baker does not live on the fifth floor
constraint Cooper != 1; % Cooper does not live on the first floor
constraint Fletcher != 1 /\ Fletcher != 5; % Fletcher does not live on the first or fifth floor
constraint Miller > Cooper; % Miller lives on a higher floor than Cooper
constraint abs(Fletcher - Smith) != 1; % Smith does not live on a floor adjacent to Fletcher
constraint abs(Fletcher - Cooper) != 1; % Fletcher does not live on a floor adjacent to Cooper

solve satisfy;

output["Baker: ", show(Baker), "\n"];
output["Cooper: ", show(Cooper), "\n"];
output["Fletcher: ", show(Fletcher), "\n"];
output["Miller: ", show(Miller), "\n"];
output["Smith: ", show(Smith), "\n"];
___________
Baker = 0;
Cooper = 0;
Fletcher = 0;
Miller = 0;
Smith = 0;
==============================Solution(Baker=3, Cooper=2, Fletcher=4, Miller=5, Smith=1, _checker='')
___________
% Variables representing the floors where each person lives
var 1..5: Baker;    % from dzn
var 1..5: Cooper;   % from dzn
var 1..5: Fletcher; % from dzn
var 1..5: Miller;   % from dzn
var 1..5: Smith;    % from dzn

% Constraints based on textual description
constraint all_different([Baker, Cooper, Fletcher, Miller, Smith]);

constraint Baker != 5; % Baker does not live on the fifth floor
constraint Cooper != 1; % Cooper does not live on the first floor
constraint Fletcher != 1 /\ Fletcher != 5; % Fletcher does not live on the first or fifth floor
constraint Miller > Cooper; % Miller lives on a higher floor than Cooper
constraint abs(Fletcher - Smith) > 1; % Smith does not live on a floor adjacent to Fletcher
constraint abs(Fletcher - Cooper) > 1; % Fletcher does not live on a floor adjacent to Cooper

solve satisfy;

output ["Baker: ", show(Baker), "\n",
        "Cooper: ", show(Cooper), "\n",
        "Fletcher: ", show(Fletcher), "\n",
        "Miller: ", show(Miller), "\n",
        "Smith: ", show(Smith), "\n"];
___________
Baker = 0;
Cooper = 0;
Fletcher = 0;
Miller = 0;
Smith = 0;
==============================