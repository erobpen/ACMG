[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "0_2", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "Solution(A=[9, 8, 7, 6, 5, 25, 4, 3, 2, 1], _checker='')"}]

None
___________
int: n = 10;  % Number of elements in set A

array[1..n] of var 1..100: A;  % Given set of integers

% Decision variables for the subsets S and T
array[1..n] of var 0..1: inS;
array[1..n] of var 0..1: inT;

% Constraints for the subsets S and T
constraint sum(i in 1..n)(inS[i]) > 0 /\ sum(i in 1..n)(inT[i]) > 0;  % Non-empty subsets
constraint forall(i, j in 1..n where i < j)(
    (inS[i] == 1 /\ inS[j] == 1) \/ (inT[i] == 1 /\ inT[j] == 1)  % Disjoint subsets
);
constraint sum(i in 1..n)(A[i] * inS[i]) == sum(i in 1..n)(A[i] * inT[i]);  % Equal sum constraint

% Print the subsets S and T
output["Set S: {"] ++ [show(A[i]) ++ if inS[i] == 1 then ", " else "" endif | i in 1..n] ++ ["}\n"];
output["Set T: {"] ++ [show(A[i]) ++ if inT[i] == 1 then ", " else "" endif | i in 1..n] ++ ["}\n"];

solve satisfy;
___________
n = 10;
A = [81, 21, 79, 4, 29, 70, 28, 20, 14, 7];
==============================None
___________
% MiniZinc model to find two disjoint subsets S and T of a given set A, such that the sum of elements in S equals the sum of elements in T.

% Input: Set A of ten integers
set of int: A = 1..100; % from dzn

% Decision variables: Binary array to represent the subsets S and T
array[A] of var 0..1: in_S_T;

% Constraints:
constraint sum(i in A)(i * in_S_T[i]) = sum(i in A)(i * (1 - in_S_T[i])); % sums of S and T are equal
constraint sum(i in A)(in_S_T[i]) >= 1 /\ sum(i in A)(in_S_T[i]) <= 9; % S and T are non-empty and disjoint

solve satisfy;

% Output:
output["S:"] = [i | i in A where in_S_T[i] = 1] ++ ["\n"];
output["T:"] = [i | i in A where in_S_T[i] = 0] ++ ["\n"];
___________
% Data file for the MiniZinc model to find two disjoint subsets S and T of a given set A, such that the sum of elements in S equals the sum of elements in T.

% Given set A of ten integers
A = {81, 21, 79, 4, 29, 70, 28, 20, 14, 7};
==============================Solution(A=[9, 8, 7, 6, 5, 25, 4, 3, 2, 1], _checker='')
___________
% Set A of ten integers
array[1..10] of var 1..100: A;

% Constraints
constraint all_different(A);
constraint sum(i in 1..10)(A[i]) = 2 * sum(i in 1..5)(A[i]); % The sum of elements in S is half the sum of all elements in A

solve satisfy;

% Output
output["Set S: {"] ++ [show(A[i]) ++ (if i < 5 then ", " else "}\n")] ++
["Set T: {"] ++ [show(A[i]) ++ (if i < 5 then ", " else "}\n")];
___________
A = array1d(1..10, [81, 21, 79, 4, 29, 70, 28, 20, 14, 7]);
==============================