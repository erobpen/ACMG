[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "0_2", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "None"}, {"attempt": "1_1", "status": true, "solutions": "None"}, {"attempt": "1_2", "status": true, "solutions": "None"}, {"attempt": "2_2", "status": true, "solutions": "Solution(Baker=3, Cooper=2, Fletcher=4, Miller=5, Smith=1, _checker='')"}]

None
___________
int: Baker; % Floor where Baker lives (1-5)
int: Cooper; % Floor where Cooper lives (1-5)
int: Fletcher; % Floor where Fletcher lives (1-5)
int: Miller; % Floor where Miller lives (1-5)
int: Smith; % Floor where Smith lives (1-5)

% Constraints
constraint
    Baker != 5 /\
    Cooper != 1 /\
    Fletcher != 1 /\ Fletcher != 5 /\
    Miller > Cooper /\
    abs(Smith - (Fletcher + 1)) > 1 /\
    abs(Fletcher - (Cooper + 1)) > 1 /\
    all_different([Baker, Cooper, Fletcher, Miller, Smith]);

solve satisfy;

output["Baker lives on floor: " ++ show(Baker) ++ "\n"];
output["Cooper lives on floor: " ++ show(Cooper) ++ "\n"];
output["Fletcher lives on floor: " ++ show(Fletcher) ++ "\n"];
output["Miller lives on floor: " ++ show(Miller) ++ "\n"];
output["Smith lives on floor: " ++ show(Smith) ++ "\n"];
___________
Baker = 0;
Cooper = 0;
Fletcher = 0;
Miller = 0;
Smith = 0;
==============================None
___________
int: Baker; % from dzn\nint: Cooper; % from dzn\nint: Fletcher; % from dzn\nint: Miller; % from dzn\nint: Smith; % from dzn\n\nconstraint\n  alldifferent([Baker, Cooper, Fletcher, Miller, Smith]) /\\n  Baker != 5 /\\n  Cooper != 1 /\\n  Fletcher != 5 /\\n  Fletcher != 1 /\\n  Cooper < Miller /\\n  abs(Fletcher - Smith) != 1 /\\n  abs(Fletcher - Cooper) != 1;\n\nsolve satisfy;\n\noutput [\n  "Baker lives on floor: ", show(Baker), "\n",\n  "Cooper lives on floor: ", show(Cooper), "\n",\n  "Fletcher lives on floor: ", show(Fletcher), "\n",\n  "Miller lives on floor: ", show(Miller), "\n",\n  "Smith lives on floor: ", show(Smith), "\n"\n];
___________
Baker = 0;\nCooper = 0;\nFletcher = 0;\nMiller = 0;\nSmith = 0;\n
==============================None
___________
int: Baker; % Floor where Baker lives (1-5)
int: Cooper; % Floor where Cooper lives (1-5)
int: Fletcher; % Floor where Fletcher lives (1-5)
int: Miller; % Floor where Miller lives (1-5)
int: Smith; % Floor where Smith lives (1-5)

constraint
  Baker != 5 /\  % Baker does not live on the fifth floor
  Cooper != 1 /\  % Cooper does not live on the first floor
  Fletcher != 1 /\ Fletcher != 5 /\  % Fletcher does not live on the first or fifth floor
  Miller > Cooper /\  % Miller lives on a higher floor than Cooper
  abs(Fletcher - Smith) != 1 /\  % Smith is not on a floor adjacent to Fletcher
  abs(Fletcher - Cooper) != 1 /\  % Fletcher is not on a floor adjacent to Cooper
  all_different([Baker, Cooper, Fletcher, Miller, Smith]); % All live on different floors

solve satisfy;

output[
  "Baker lives on floor: " ++ show(Baker) ++ "\n" ++
  "Cooper lives on floor: " ++ show(Cooper) ++ "\n" ++
  "Fletcher lives on floor: " ++ show(Fletcher) ++ "\n" ++
  "Miller lives on floor: " ++ show(Miller) ++ "\n" ++
  "Smith lives on floor: " ++ show(Smith) ++ "\n"
];
___________
Baker = 0;
Cooper = 0;
Fletcher = 0;
Miller = 0;
Smith = 0;
==============================None
___________
% Define the floors
int: floor_min = 1;
int: floor_max = 5;
array[1..5] of var 1..5: Baker;
array[1..5] of var 1..5: Cooper;
array[1..5] of var 1..5: Fletcher;
array[1..5] of var 1..5: Miller;
array[1..5] of var 1..5: Smith;

% Constraints
constraint all_different(Baker) /\ all_different(Cooper) /\ all_different(Fletcher) /\
  all_different(Miller) /\ all_different(Smith);

constraint forall(i in 1..5) (
  Baker[i] != 5 /\ Cooper[i] != 1 /\ Fletcher[i] != 1 /\ Fletcher[i] != 5
);

constraint forall(i in 1..5, j in 1..5 where i < j) (
  (Miller[i] > Cooper[j]) \/ (Miller[j] > Cooper[i])
);

constraint abs(Fletcher[1] - Smith[1]) > 1 /\ abs(Fletcher[2] - Smith[2]) > 1 /\
  abs(Fletcher[3] - Smith[3]) > 1 /\ abs(Fletcher[4] - Smith[4]) > 1 /\
  abs(Fletcher[5] - Smith[5]) > 1;

solve satisfy;

output["Baker: " ++ show(Baker) ++ "\n"];
output["Cooper: " ++ show(Cooper) ++ "\n"];
output["Fletcher: " ++ show(Fletcher) ++ "\n"];
output["Miller: " ++ show(Miller) ++ "\n"];
output["Smith: " ++ show(Smith) ++ "\n"];
___________
Baker = [1, 2, 3, 4, 5];
Cooper = [1, 2, 3, 4, 5];
Fletcher = [1, 2, 3, 4, 5];
Miller = [1, 2, 3, 4, 5];
Smith = [1, 2, 3, 4, 5];
==============================None
___________
% Parameters
int: floors = 5;
array[1..5] of var 1..floors: Baker;
array[1..5] of var 1..floors: Cooper;
array[1..5] of var 1..floors: Fletcher;
array[1..5] of var 1..floors: Miller;
array[1..5] of var 1..floors: Smith;

% Constraints
constraint all_different(Baker) /\ all_different(Cooper) /\
    all_different(Fletcher) /\ all_different(Miller) /\
    all_different(Smith);

constraint forall(i in 1..5) (
    Baker[i] != 5 /\
    Cooper[i] != 1 /\
    Fletcher[i] != 1 /\ Fletcher[i] != 5
);

constraint forall(i in 1..5) (
    if Baker[i] != 0 /\ Cooper[i] != 0 then
        Miller[i] > Cooper[i]
    else
        true
    endif
);

constraint forall(i in 1..5) (
    if Smith[i] != 0 /\ Fletcher[i] != 0 then
        abs(Smith[i] - Fletcher[i]) > 1
    else
        true
    endif
);

constraint forall(i in 1..5) (
    if Fletcher[i] != 0 /\ Cooper[i] != 0 then
        abs(Fletcher[i] - Cooper[i]) > 1
    else
        true
    endif
);

solve satisfy;

% Output
output["Baker: \(Baker)\n"];
output["Cooper: \(Cooper)\n"];
output["Fletcher: \(Fletcher)\n"];
output["Miller: \(Miller)\n"];
output["Smith: \(Smith)\n"];
___________
Baker = [0, 0, 0, 0, 0];
Cooper = [0, 0, 0, 0, 0];
Fletcher = [0, 0, 0, 0, 0];
Miller = [0, 0, 0, 0, 0];
Smith = [0, 0, 0, 0, 0];
==============================Solution(Baker=3, Cooper=2, Fletcher=4, Miller=5, Smith=1, _checker='')
___________
set of int: FLOORS = 1..5;

% Variables representing the floor each person lives on
var FLOORS: Baker;   % from dzn
var FLOORS: Cooper;  % from dzn
var FLOORS: Fletcher;  % from dzn
var FLOORS: Miller;  % from dzn
var FLOORS: Smith;  % from dzn

% Constraints
constraint Baker != 5;
constraint Cooper != 1;
constraint Fletcher != 1 /\ Fletcher != 5;
constraint Miller > Cooper;
constraint abs(Fletcher - Smith) != 1;
constraint abs(Fletcher - Cooper) != 1;
constraint all_different([Baker, Cooper, Fletcher, Miller, Smith]);

solve satisfy;

% Output
output["Baker lives on floor "] = show(Baker) ++ "\n";
output["Cooper lives on floor "] = show(Cooper) ++ "\n";
output["Fletcher lives on floor "] = show(Fletcher) ++ "\n";
output["Miller lives on floor "] = show(Miller) ++ "\n";
output["Smith lives on floor "] = show(Smith) ++ "\n";
___________
Baker = 0;  % Unknown floor for Baker
Cooper = 0;  % Unknown floor for Cooper
Fletcher = 0;  % Unknown floor for Fletcher
Miller = 0;  % Unknown floor for Miller
Smith = 0;  % Unknown floor for Smith
==============================