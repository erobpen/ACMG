[{"attempt": "0_1", "status": true, "solutions": "None"}, {"attempt": "0_2", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "None"}, {"attempt": "1_1", "status": true, "solutions": "None"}, {"attempt": "1_2", "status": true, "solutions": "None"}, {"attempt": "2_0", "status": true, "solutions": "None"}, {"attempt": "2_1", "status": true, "solutions": "None"}, {"attempt": "2_2", "status": true, "solutions": "None"}]

None
___________
% Age of each child (1: Ruth, 2: Rachel, 3: Leah)
array[1..3] of var 1..12: ages; % from dzn
% Country of origin (1: Egypt, 2: Israel, 3: Babylon)
array[1..3] of var 1..3: countries; % from dzn
% Part of the Exodus story they related (1: Plague of Frogs, 2: Crossing the Red Sea, 3: 10 Commandments)
array[1..3] of var 1..3: stories; % from dzn

% Constraints based on the clues
constraint
  % 1. Leah is from Israel (Leah: 3)
  countries[3] = 2 /\
  % 2. Rachel is 3 years old (Rachel: 2)
  ages[2] = 3 /\
  % 3. The girl who related the 10 Commandments story is from Babylon (10 Commandments: 3)
  (stories[1] = 1 \/ stories[2] = 1) /\
  (stories[1] = 2 \/ stories[2] = 2) /\
  (stories[1] = 3 \/ stories[2] = 3) /\
  countries[1] = 3 /\
  % 4. Ruth is older than the girl from Egypt (Ruth: 1, Egypt: 3)
  ages[1] > ages[3] /\
  % 5. The oldest child is from Egypt
  (ages[1] = 12 -> countries[1] = 1) /\
  (ages[2] = 12 -> countries[2] = 1) /\
  (ages[3] = 12 -> countries[3] = 1) /\
  % 6. The baby is from Israel
  (ages[1] = 1 -> countries[1] = 2) /\
  (ages[2] = 1 -> countries[2] = 2) /\
  (ages[3] = 1 -> countries[3] = 2) /\
  % 7. The child who related the Plague of Frogs story is not from Israel
  (stories[1] = 1 -> countries[1] != 2) /\
  (stories[2] = 1 -> countries[2] != 2) /\
  (stories[3] = 1 -> countries[3] != 2)
;

solve satisfy;

output["Ruth: " ++ show(ages[1]) ++ " years, " ++ show(countries[1]) ++ ", " ++ show(stories[1]) ++ "\n"];
output["Rachel: " ++ show(ages[2]) ++ " years, " ++ show(countries[2]) ++ ", " ++ show(stories[2]) ++ "\n"];
output["Leah: " ++ show(ages[3]) ++ " years, " ++ show(countries[3]) ++ ", " ++ show(stories[3]) ++ "\n"];
___________
ages = [1, 1, 1];  % Ages of Ruth, Rachel, Leah
countries = [1, 1, 1];  % Countries of Ruth, Rachel, Leah
stories = [1, 1, 1];    % Stories related by Ruth, Rachel, Leah
==============================None
___________
% Age of each child: 5, 7, 9
% Family's country of origin: Egypt, Israel, Jordan
% Part of the Exodus story they related: Passover, Red Sea, Ten Plagues

int: Age1; % from dzn
int: Age2; % from dzn
int: Age3; % from dzn

array[1..3] of var int: Ages = [Age1, Age2, Age3];

array[1..3] of var 1..3: Country = [1, 2, 3]; % 1:Egypt, 2:Israel, 3:Jordan
array[1..3] of var 1..3: Story = [1, 2, 3]; % 1:Passover, 2:Red Sea, 3:Ten Plagues

constraint all_different(Ages);

% Clues:
constraint forall(i in 1..3)(
    (Ages[i] = 5)  <-> (Country[i] = 2) % The 5-year-old is from Israel.
    /\ (Ages[i] = 7)  <-> (Country[i] = 3) % The child from Jordan is 7 years old.
    /\ (Ages[i] = 9)  <-> (Country[i] = 1) % The 9-year-old is from Egypt.
    /\ (Ages[i] = 9)  <-> (Story[i] = 2)  % The child from Egypt related to the Red Sea.
    /\ (Story[i] = 1) \/ (Story[i] = 3) % The child who related the part about the Red Sea is either 9 or 5.
);

solve satisfy;

output ["Ages: ", show(Ages), "\n", 
        "Countries: ", show(Country), "\n",
        "Stories: ", show(Story), "\n"];
___________
Age1 = 5; Age2 = 7; Age3 = 9;
==============================None
___________
% The Children's Ages
int: age1; % Age of child 1
int: age2; % Age of child 2
int: age3; % Age of child 3

% The Countries of Origin
enum Country = {Egypt, Israel, Canaan};
var Country: country1; % Country of child 1
var Country: country2; % Country of child 2
var Country: country3; % Country of child 3

% The Parts of the Exodus Story
enum Story = {Plagues, RedSea, Commandments};
var Story: story1; % Story related by child 1
var Story: story2; % Story related by child 2
var Story: story3; % Story related by child 3

% Ages are 3, 4, and 5 (in some order)
constraint age1 != age2 /\ age1 != age3 /\ age2 != age3;
constraint age1 + age2 + age3 == 12; % Sum of ages = 3 + 4 + 5 = 12

% Each child is from a different country
constraint country1 != country2 /\ country1 != country3 /\ country2 != country3;

% Each child related a different part of the Exodus story
constraint story1 != story2 /\ story1 != story3 /\ story2 != story3;

% Clues
constraint (age3 == 5) /\ (country1 == Israel) /\ (story3 == Commandments);
constraint (country2 == Egypt) /\ (story2 == Plagues);
constraint (age1 == 4) /\ (country3 == Canaan) /\ (story1 == RedSea);

solve satisfy;

output ["Child 1: Age = ", show(age1), " Country of Origin = ", show(country1), " Exodus Story = ", show(story1), "\n"];
output ["Child 2: Age = ", show(age2), " Country of Origin = ", show(country2), " Exodus Story = ", show(story2), "\n"];
output ["Child 3: Age = ", show(age3), " Country of Origin = ", show(country3), " Exodus Story = ", show(story3), "\n"];
___________
age1 = 0; age2 = 0; age3 = 0;
==============================None
___________
% Given parameters
int: n = 3; % Number of children
array[1..n] of var 3..5: age; % Age of each child
array[1..n] of var 1..3: country; % 1: Egypt, 2: Israel, 3: Canaan
array[1..n] of var 1..3: story; % 1: Plagues, 2: Red Sea, 3: Ten Commandments

% Constraints
constraint all_different(age);
constraint all_different(country);
constraint all_different(story);

% Clues
constraint forall(i in 1..n) (
    if age[i] == 3 /\ country[i] == 1 then story[i] == 1 endif % The youngest child is from Egypt and related the plagues
    /\ if country[i] == 3 /\ story[i] == 2 then age[i] == 5 endif % The oldest child related crossing the Red Sea and is from Canaan
    /\ if story[i] == 3 then age[i] == 4 endif % The child who related the Ten Commandments is 4 years old
);

solve satisfy;

% Output
output ["Child 1 (Age, Country, Story): (", show(age[1]), ", ", show(country[1]), ", ", show(story[1]), ")\n"];
output ["Child 2 (Age, Country, Story): (", show(age[2]), ", ", show(country[2]), ", ", show(story[2]), ")\n"];
output ["Child 3 (Age, Country, Story): (", show(age[3]), ", ", show(country[3]), ", ", show(story[3]), ")\n"];
___________
age = [_, _, _];  % Age of each child
country = [_, _, _];  % Family's country of origin
story = [_, _, _];    % Exodus story each child related
==============================None
___________
% Age of each child: 3, 4, 5
% Family's country of origin: Egypt, Israel, Canaan
% Part of the Exodus story they related: Plagues, Crossing the Red Sea, Ten Commandments

int: n = 3; % Number of children

% Variables
array[1..n] of var 3..5: age; % Age of each child
array[1..n] of var 1..3: country; % 1: Egypt, 2: Israel, 3: Canaan
array[1..n] of var 1..3: story; % 1: Plagues, 2: Crossing the Red Sea, 3: Ten Commandments

% Constraints
constraint all_different(age); % Each child has a different age
constraint all_different(country); % Each child is from a different country
constraint all_different(story); % Each child related a different part of the Exodus story

% Clues
constraint age[1] = 4 \/ age[2] = 4; % 1. The child who is 4 years old is from Egypt
constraint age[3] = 3 \/ age[2] = 3; % 2. The child who is 3 years old related the Plagues
constraint age[1] = 5 \/ age[3] = 5; % 3. The child who is 5 years old didn't relate the Ten Commandments

% from dzn
% solve satisfy

output ["Child 1: Age = ", show(age[1]), ", Country = ", show(country[1]), ", Part of the Exodus story = ", show(story[1]), "\n",
        "Child 2: Age = ", show(age[2]), ", Country = ", show(country[2]), ", Part of the Exodus story = ", show(story[2]), "\n",
        "Child 3: Age = ", show(age[3]), ", Country = ", show(country[3]), ", Part of the Exodus story = ", show(story[3]), "\n"];
___________
age = [_, _, _];   % Age of each child: 3, 4, 5
country = [_, _, _];% Family's country of origin: Egypt, Israel, Canaan
story = [_, _, _];   % Part of the Exodus story they related: Plagues, Crossing the Red Sea, Ten Commandments
==============================None
___________
int: n = 3;  % Number of children

% Decision variables: age, country of origin, part of the Exodus story for each child
array[1..n] of var 1..n: age;  % Age of each child
array[1..n] of var 1..n: country;  % Country of origin for each child
array[1..n] of var 1..n: story;  % Part of the Exodus story related by each child

% Constraints: each child is a different age, from a different country, and related a different part of the story
constraint all_different(age) /\ all_different(country) /\ all_different(story);

% Clues
% 1. The oldest child is from Egypt.
constraint age[1] == n /\ country[1] == 1;

% 2. The youngest child related the part where Moses led the Jews across the Red Sea.
constraint age[n] == 1 /\ story[n] == 2;

% 3. The child from England did not relate the part where Moses led the Jews across the Red Sea.
constraint country[2] == 2 /\ story[2] != 2;

% 4. The child from France is not the oldest.
constraint country[3] == 3 /\ age[3] != n;

% Rules of the Exodus story parts:
% 1. Moses and the Israelites reached Mount Sinai.
% 2. Moses led the Jews across the Red Sea.
% 3. Moses received the Ten Commandments on Mount Sinai.

solve satisfy;

output["Age: " ++ show(age) ++ "\n" ++
       "Country of Origin: " ++ show(country) ++ "\n" ++
       "Part of the Exodus story: " ++ show(story) ++ "\n"];
___________
n = 3;  % Number of children, ages, countries, and stories

% Unassigned input parameters: country of each child
% 1 = Egypt, 2 = England, 3 = France
array[1..n] of 1..3: country;
==============================None
___________
% The ages of the children: 5, 6, 7, 8, 9
int: n = 5; % Number of children

% The children's ages, countries, and stories
array[1..n] of var 5..9: age; % from dzn
array[1..n] of var 1..4: country; % 1-USA, 2-France, 3-Brazil, 4-India; from dzn
array[1..n] of var 1..5: story; % 1-5 different parts of the Exodus story; from dzn

% Clues:
constraint all_different(age); % Each child is a different age
constraint all_different(country); % Each child is from a different country
constraint all_different(story); % Each child related a different part of the Exodus story

% Clue 1: The 7-year-old child is from India
constraint age[country[4]] == 7; % country[4] == 4 (India) and age[4] == 7

% Clue 2: The child from the USA is either 5 or 8 years old
constraint (age[country[1]] == 5 \/ age[country[1]] == 8); % country[1] == 1 (USA)

% Clue 3: The 8-year-old child did not recount the part about the burning bush
constraint forall(i, j in 1..n where i != j) (
    (age[i] == 8 /\ story[j] != 2) -> age[j] != 8
);

% Clue 4: The 6-year-old did not recount the part about the plagues
constraint forall(i in 1..n) (
    (age[i] == 6) -> story[i] != 3
);

% Clue 5: The 5-year-old is not from Brazil
constraint age[country[2]] != 5; % country[2] == 3 (Brazil)

solve satisfy;

% Output the ages, countries, and stories of each child
output["Age: " ++ show(age) ++ "\n"];
output["Country: " ++ show(country) ++ "\n"];
output["Story: " ++ show(story) ++ "\n"];
___________
age = [_, _, _, _, _]; % ages of the children
country = [_, _, _, _, _]; % countries of the children (1-USA, 2-France, 3-Brazil, 4-India)
story = [_, _, _, _, _]; % parts of the Exodus story each child related
==============================None
___________
int: n = 3; % Number of children

array[1..n] of var 1..3: age; % Age of each child (1 = 7 years old, 2 = 8 years old, 3 = 9 years old)
array[1..n] of var 1..3: country; % Country of origin for each child (1 = Egypt, 2 = Israel, 3 = Canaan)
array[1..n] of var 1..3: story; % Part of the Exodus story related by each child (1 = Plagues, 2 = Crossing of the Red Sea, 3 = Ten Commandments)

constraint all_different(age) /\ all_different(country) /\ all_different(story);

% Clue 1: The 7-year-old child is from Egypt.
constraint age[1] == 1; % Egypt is represented by 1

% Clue 2: The 8-year-old child is from Israel.
constraint age[2] == 2; % Israel is represented by 2

% Clue 3: The 9-year-old child is from Canaan.
constraint age[3] == 3; % Canaan is represented by 3

% Clue 4: The child from Egypt relates the Plagues.
constraint (age[1] == 1) /\ (story[1] == 1);

% Clue 5: The child from Israel relates the Crossing of the Red Sea.
constraint (age[2] == 2) /\ (story[2] == 2);

% Clue 6: The child from Canaan relates the Ten Commandments.
constraint (age[3] == 3) /\ (story[3] == 3);

solve satisfy;

output["Age: "] = [show(age)];
output["Country: "] = [show(country)];
output["Story: "] = [show(story)];
___________
n = 3; % Number of children
==============================