int: Budget;       % Available Budget\nint: Solar_Panel_Cost;  % Cost of a single solar panel\nint: Required_Solar_Panels; % Number of solar panels needed\nfloat: Electricity_Purchase_Cost;   % Cost of electricity per kWh\nint: Electricity_Demand;   % Electricity demand in kWh\n\n% Assign the given values to the parameters\nBudget = 5000; % from dzn\nSolar_Panel_Cost = 830; % from dzn\nElectricity_Purchase_Cost = 0.5;    % $0.5 per kWh\nRequired_Solar_Panels = 6;       % Given as 6 panels are required\n\n% Decision variables\nvar 0..Budget: Solar_Panel_Cost_Total;   % Total cost of solar panels\nvar 0..Budget: Electricity_Cost_Total;  % Total cost of electricity purchase\n\n% Objective: Minimize the difference between the budget and total costs\nsolve minimize abs(Budget - Solar_Panel_Cost_Total - Electricity_Cost_Total);\n\n% Constraints\nconstraint Solar_Panel_Cost_Total = Solar_Panel_Cost * Required_Solar_Panels;\nconstraint Electricity_Cost_Total = Electricity_Purchase_Cost * Electricity_Demand;\n\n% Total cost must be less than or equal to the available budget\nconstraint Solar_Panel_Cost_Total + Electricity_Cost_Total <= Budget;\n\n% Output the total costs for solar panels and electricity\noutput ["Total Cost for Solar Panels: " ++ show(Solar_Panel_Cost_Total) ++ " Total Cost for Electricity: " ++ show(Electricity_Cost_Total)];

Budget = 5000;\nSolar_Panel_Cost = 830;\nElectricity_Purchase_Cost = 0.5;\nElectricity_Demand = 4000;int: solarPanelCost;  % Cost of a solar panel in dollars\n









---------------------------------------------------------



int: solarPanelGeneration;  % kWh generated per solar panel per year\n
int: requiredPanels = 6;  % Number of required solar panels\n
float: purchaseCost;  % Cost per kWh of purchased electricity in dollars\n
int: yearlyDemand = 4000;  % Yearly electricity demand in kWh\n
int: budget;  % Available yearly budget in dollars\n

var 0..requiredPanels: solarPanels;  % Number of solar panels purchased\n
var 0..yearlyDemand: purchasedElectricity;  % Amount of electricity purchased in kWh\n

% Objective: Minimize the total cost while meeting the electricity demand\n
var int: totalCost = solarPanels * solarPanelCost + round(purchasedElectricity * purchaseCost);\n

constraint totalCost <= budget;  % Ensure the total cost does not exceed the budget\n
constraint solarPanels * solarPanelGeneration + purchasedElectricity >= yearlyDemand;  % Ensure the total electricity meets the demand\n

solve minimize totalCost;\n

output ["Solar Panels: " ++ show(solarPanels) ++ "\n"];\n
output ["Purchased Electricity (kWh): " ++ show(purchasedElectricity) ++ "\n"];\n
output ["Total Cost: $" ++ show(totalCost) ++ "\n"];\n
output ["Total Electricity Generated (kWh): " ++ show(solarPanels * solarPanelGeneration + purchasedElectricity) ++ "\n"];\n

solarPanelCost = 830;\n
solarPanelGeneration = 800;\n
purchaseCost = 0.5;\n
budget = 5000;