[{"attempt": "0_0", "status": true, "solutions": "Solution(square=[[4, 5, 11, 14], [9, 16, 2, 7], [6, 3, 13, 12], [15, 10, 8, 1]], _checker='')"}]

Solution(square=[[4, 5, 11, 14], [9, 16, 2, 7], [6, 3, 13, 12], [15, 10, 8, 1]], _checker='')
___________
int: n = 4;          % Size of the magic square (n x n)
int: sum_value = n * (n * n + 1) div 2;  % The sum of integers in each row, column, and diagonal

array[1..n, 1..n] of var 1..n*n: square;  % Values in the magic square

% Constraint: All values in the square must be distinct
constraint all_different(square);

% Constraints: Rows, columns, and diagonals sum up to the magic constant
constraint
    forall(i in 1..n) (
        sum([square[i, j] | j in 1..n]) = sum_value /\     % Rows
        sum([square[j, i] | j in 1..n]) = sum_value       % Columns
    );

constraint
    sum([square[i, i] | i in 1..n]) = sum_value /\         % Main diagonal
    sum([square[i, n - i + 1] | i in 1..n]) = sum_value;   % Secondary diagonal

solve satisfy;

output [
    "Magic Square (n = ", show(n), "):\n"
] ++
[ 
    if j == n then 
        show(square[i, j]) ++ "\n"
    else
        show(square[i, j]) ++ " "
    endif
    | i in 1..n, j in 1..n 
];
___________
n = 4;
==============================