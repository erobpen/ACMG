[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "0_1", "status": true, "solutions": "None"}, {"attempt": "0_2", "status": true, "solutions": "None"}, {"attempt": "1_1", "status": true, "solutions": "None"}, {"attempt": "2_2", "status": true, "solutions": "None"}]

None
___________
% Six suspects: ARTIE, BILL, CRACKITT, DODGY, EDGY, FINGERS
int: ARTIE; % 0 for innocent, 1 for guilty
int: BILL; % 0 for innocent, 1 for guilty
int: CRACKITT; % 0 for innocent, 1 for guilty
int: DODGY; % 0 for innocent, 1 for guilty
int: EDGY; % 0 for innocent, 1 for guilty
int: FINGERS; % 0 for innocent, 1 for guilty

% Constraints
constraint ARTIE + BILL + CRACKITT + DODGY + EDGY + FINGERS = 2; % Only two people could fit in the getaway car

% Suspects' statements
constraint ARTIE = 0; % ARTIE: "It wasn't me."
constraint BILL = 1 <-> CRACKITT = 1; % BILL: "Crackitt was in it up to his neck."
constraint CRACKITT = 0; % CRACKITT: "No I wasn't."
constraint DODGY = 1 <-> (CRACKITT = 1 /\ BILL = 1); % DODGY: "If Crackitt did it, Bill did it with him."
constraint EDGY = 1 <-> (ARTIE = 1 /\ BILL = 0); % EDGY: "Nobody did it alone."
constraint FINGERS = 0; % FINGERS: "Thatâ€™s right: it was Artie and Dodgy together."

solve satisfy;

output ["Guilty suspects: "];
if BILL = 1 then output["BILL, "] endif;
if DODGY = 1 then output["DODGY"] endif;
___________
ARTIE = -1;
BILL = -1;
CRACKITT = -1;
DODGY = -1;
EDGY = -1;
FINGERS = -1;
==============================None
___________
enum SUSPECTS = {ARTIE, BILL, CRACKITT, DODGY, EDGY, FINGERS};

% Parameters: 0 for innocent, 1 for guilty
array[SUSPECTS] of var 0..1: guilty;

% Constraints
constraint sum([guilty[s] | s in SUSPECTS]) == 2; % Only 2 are guilty
constraint (guilty[BILL] == 1) /\ (guilty[DODGY] == 1); % Bill and Dodgy are guilty

% Statements said
constraint (guilty[ARTIE] == 0); % Artie: "It wasn't me."
constraint (guilty[BILL] == 1) == (guilty[CRACKITT] == 0); % Bill: "Crackitt was in it up to his neck."
constraint (guilty[DODGY] == 1) == (guilty[BILL] == 1 \/ guilty[CRACKITT] == 1); % Dodgy: "If Crackitt did it, Bill did it with him."
constraint (guilty[EDGY] == 1) == (guilty[ARTIE] == 1 \/ guilty[BILL] == 1 \/ guilty[CRACKITT] == 1 \/ guilty[DODGY] == 1 \/ guilty[FINGERS] == 1); % Edgy: "Nobody did it alone."
constraint (guilty[FINGERS] == 0) == (guilty[ARTIE] == 0 /\ guilty[DODGY] == 0); % Fingers: "That’s right: it was Artie and Dodgy together."

solve satisfy;

output["Guilty: "];
output[s | s in SUSPECTS where guilty[s] == 1];
___________
% Number of guilty suspects
guilty = array1d(SUSPECTS, [0, 0, 0, 0, 0, 0]);
==============================None
___________
int: ARTIE;  % 0 if innocent, 1 if guilty
int: BILL;   % 0 if innocent, 1 if guilty
int: CRACKITT; % 0 if innocent, 1 if guilty
int: DODGY;  % 0 if innocent, 1 if guilty
int: EDGY;   % 0 if innocent, 1 if guilty
int: FINGERS;  % 0 if innocent, 1 if guilty

array[1..6] of var 0..1: guilty;

constraint sum(guilty) >= 2;  % At least two guilty people
constraint sum(guilty) <= 2;  % At most two guilty people

constraint ARTIE = 0;  % Innocent, tells the truth
constraint BILL = 1 -> CRACKITT = 1;   % BILL lies about CRACKITT
constraint CRACKITT = 0;  % Innocent, tells the truth
constraint DODGY = 1 -> BILL = 0 \/ CRACKITT = 0;  % DODGY lies about BILL or CRACKITT
constraint EDGY = 1 -> sum(guilty) > 1;  % EDGY lies about doing it alone
constraint FINGERS = 0;  % Innocent, tells the truth

solve satisfy;

output["Guilty suspects: "] = [if guilty[i] == 1 then "Guilty: " ++ ["ARTIE", "BILL", "CRACKITT", "DODGY", "EDGY", "FINGERS"][i] ++ "\n" else "" endif | i in 1..6];
___________
ARTIE = -1; % Unassigned
BILL = -1; % Unassigned
CRACKITT = -1; % Unassigned
DODGY = -1; % Unassigned
EDGY = -1; % Unassigned
FINGERS = -1; % Unassigned
==============================None
___________
int: ARTIE = 1;  % from dzn
int: BILL = 2;  % from dzn
int: CRACKITT = 3;  % from dzn
int: DODGY = 4;  % from dzn
int: EDGY = 5;  % from dzn
int: FINGERS = 6;  % from dzn

array[1..6] of var bool: guilty;  % true if guilty, false if innocent

constraint
    % At most two suspects are guilty
    sum(guilty) <= 2 /\
    % If someone accuses another, they are both innocent
    (guilty[ARTIE] <-> (guilty[BILL] \/ guilty[CRACKITT] \/ guilty[DODGY] \/ guilty[EDGY] \/ guilty[FINGERS])) /\
    (guilty[BILL] <-> (guilty[CRACKITT] \/ guilty[DODGY])) /\
    (guilty[CRACKITT] <-> not guilty[CRACKITT]) /\
    (guilty[DODGY] <-> (guilty[CRACKITT] /\ guilty[BILL])) /\
    (guilty[EDGY] <-> not guilty[EDGY]) /\
    (guilty[FINGERS] <-> (guilty[ARTIE] /\ guilty[DODGY]));

solve satisfy;

output["Guilty: "];
array[1..6] of var string: suspects = ["ARTIE", "BILL", "CRACKITT", "DODGY", "EDGY", "FINGERS"];
output[concat([if guilty[i] then suspects[i] ++ " " else "" endif | i in 1..6])];
___________
% Given data for the case of the robbery at Sparkles the Jeweller's
ARTIE = 1;  % Artie's index
BILL = 2;  % Bill's index
CRACKITT = 3;  % Crackitt's index
DODGY = 4;  % Dodgy's index
EDGY = 5;  % Edgy's index
FINGERS = 6;  % Fingers' index
==============================None
___________
% Declaration of suspects
enum SUSPECT = {Artie, Bill, Crackitt, Dodgy, Edgy, Fingers};

% Variables representing the innocence/guilt of each suspect (0 for innocent, 1 for guilty)
array[SUSPECT] of var 0..1: guilty;

% Constraints based on the statements
constraint
  % Artie: "It wasn't me."
  if Artie in {Artie} then
    guilty[Artie] = 0
  else
    guilty[Artie] = 1
  endif

  /\

  % Bill: "Crackitt was in it up to his neck."
  if Bill in {Bill} then
    if Crackitt in {Crackitt} then
      guilty[Bill] = 1
    else
      guilty[Bill] = 0
    endif
  else
    if Crackitt in {Crackitt} then
      guilty[Bill] = 0
    else
      guilty[Bill] = 1
    endif
  endif

  /\

  % Crackitt: "No I wasn't."
  if Crackitt in {Crackitt} then
    guilty[Crackitt] = 0
  else
    guilty[Crackitt] = 1
  endif

  /\

  % Dodgy: "If Crackitt did it, Bill did it with him."
  if Dodgy in {Dodgy} then
    if Crackitt in {Crackitt} then
      if Bill in {Bill} then
        guilty[Dodgy] = 0
      else
        guilty[Dodgy] = 1
      endif
    else
      if Bill in {Bill} then
        guilty[Dodgy] = 1
      else
        guilty[Dodgy] = 0
      endif
    endif
  else
    if Crackitt in {Crackitt} then
      if Bill in {Bill} then
        guilty[Dodgy] = 1
      else
        guilty[Dodgy] = 0
      endif
    else
      if Bill in {Bill} then
        guilty[Dodgy] = 0
      else
        guilty[Dodgy] = 1
      endif
    endif
  endif

  /\

  % Edgy: "Nobody did it alone."
  if Edgy in {Edgy} then
    if forall(suspect in SUSPECT where suspect != Edgy) (
      guilty[suspect] = 0 \/ guilty[Edgy] = 1
    ) then
      guilty[Edgy] = 0
    else
      guilty[Edgy] = 1
    endif
  else
    if forall(suspect in SUSPECT where suspect != Edgy) (
      guilty[suspect] = 0 \/ guilty[Edgy] = 1
    ) then
      guilty[Edgy] = 1
    else
      guilty[Edgy] = 0
    endif
  endif

  /\

  % Fingers: "Thatâ€™s right: it was Artie and Dodgy together."
  if Fingers in {Fingers} then
    if Artie in {Artie} /\ Dodgy in {Dodgy} then
      guilty[Fingers] = 0
    else
      guilty[Fingers] = 1
    endif
  else
    if Artie in {Artie} /\ Dodgy in {Dodgy} then
      guilty[Fingers] = 1
    else
      guilty[Fingers] = 0
    endif
  endif;

% Constraints based on the scenario
constraint
  % Getaway car could only hold 2 people
  sum(suspect in SUSPECT)(1 - guilty[suspect]) <= 2

  /\
  
  % At least 4 suspects are innocent
  sum(suspect in SUSPECT)(1 - guilty[suspect]) >= 4;

solve satisfy;

% Output the results
output ["Guilty: "] ++ [show(suspect) | suspect in SUSPECT where guilty[suspect] = 1] ++ ["\n"]
++ ["Innocent: "] ++ [show(suspect) | suspect in SUSPECT where guilty[suspect] = 0] ++ ["\n"];
___________
% Unassigned input parameters:
% Enumerate all possible assignments of innocence/guilt for each suspect (0 for innocent, 1 for guilty)
guilty = array1d(SUSPECT, -1..1);

% Constraints to ensure only valid assignments are considered
constraint
  % The getaway car could only hold 2 people
  sum(suspect in SUSPECT)(1 - guilty[suspect]) <= 2

  /\
  
  % At least 4 suspects are innocent
  sum(suspect in SUSPECT)(1 - guilty[suspect]) >= 4;

% Assign the statements of each suspect based on the guilty variable
constraint
  % Artie: "It wasn't me."
  if Artie in {Artie} then
    guilty[Artie] = 0
  else
    guilty[Artie] != 0
  endif

  /\

  % Bill: "Crackitt was in it up to his neck."
  if Bill in {Bill} then
    if Crackitt in {Crackitt} then
      guilty[Bill] != 0
    else
      guilty[Bill] = 0
    endif
  else
    if Crackitt in {Crackitt} then
      guilty[Bill] = 0
    else
      guilty[Bill] != 0
    endif
  endif

  /\

  % Crackitt: "No I wasn't."
  if Crackitt in {Crackitt} then
    guilty[Crackitt] = 0
  else
    guilty[Crackitt] != 0
  endif

  /\

  % Dodgy: "If Crackitt did it, Bill did it with him."
  if Dodgy in {Dodgy} then
    if Crackitt in {Crackitt} then
      if Bill in {Bill} then
        guilty[Dodgy] = 0
      else
        guilty[Dodgy] != 0
      endif
    else
      if Bill in {Bill} then
        guilty[Dodgy] != 0
      else
        guilty[Dodgy] = 0
      endif
    endif
  else
    if Crackitt in {Crackitt} then
      if Bill in {Bill} then
        guilty[Dodgy] != 0
      else
        guilty[Dodgy] = 0
      endif
    else
      if Bill in {Bill} then
        guilty[Dodgy] = 0
      else
        guilty[Dodgy] != 0
      endif
    endif
  endif

  /\

  % Edgy: "Nobody did it alone."
  if Edgy in {Edgy} then
    if forall(suspect in SUSPECT where suspect != Edgy) (
      guilty[suspect] = 0 \/ guilty[Edgy] != 0
    ) then
      guilty[Edgy] = 0
    else
      guilty[Edgy] != 0
    endif
  else
    if forall(suspect in SUSPECT where suspect != Edgy) (
      guilty[suspect] = 0 \/ guilty[Edgy] != 0
    ) then
      guilty[Edgy] != 0
    else
      guilty[Edgy] = 0
    endif
  endif

  /\

  % Fingers: "That's right: it was Artie and Dodgy together."
  if Fingers in {Fingers} then
    if Artie in {Artie} /\ Dodgy in {Dodgy} then
      guilty[Fingers] = 0
    else
      guilty[Fingers] != 0
    endif
  else
    if Artie in {Artie} /\ Dodgy in {Dodgy} then
      guilty[Fingers] != 0
    else
      guilty[Fingers] = 0
    endif
  endif;

% Assignments for the unspecified guilty variables (1 for guilty, 0 for innocent)
solve satisfy;

% Output the results
output ["guilty = " ++ show(guilty) ++ "\n"];
==============================