[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "Solution(x=[[1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], _checker='')"}]

None
___________
% Parameters
int: nCows = 25;  % Total number of cows
int: nSons = 5;   % Total number of sons

% Milk production per cow
array[1..nCows] of int: production = [i | i in 1..nCows];

% Distribution requirements
array[1..nSons] of int: distribution = [7, 6, 5, 4, 3];

% Decision variable: son[c] is the son that gets cow c
array[1..nCows] of var 1..nSons: son;

% Constraints
constraint
  % Total milk production from each son's cows must be the same
  forall(s in 1..nSons) (
    sum(c in 1..nCows where son[c] == s)(production[c]) == distribution[s] * sum(production) / nSons
  ) /\
  % Each son gets a different number of cows
  forall(c1, c2 in 1..nCows where c1 < c2) (
    son[c1] != son[c2]
  );

% Solve
solve satisfy;

% Output: Distribution of cows to sons
output["Cow\tSon\n"] ++ 
concat([show(c) ++ "\t" ++ show(son[c]) ++ "\n" | c in 1..nCows]);
___________
production = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
==============================Solution(x=[[1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], _checker='')
___________
int: total_cows;  % Total number of cows (25 in this case)\nint: total_sons;  % Total number of sons (5 in this case)\n\n% Milk production per cow (1 to 25 kg)\narray[1..total_cows] of int: cow_production = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];\n\n% Number of cows to be given to each son\narray[1..total_sons] of int: cows_per_son = [7, 6, 5, 4, 3];\n\n% Decision variable: cows for each son\narray[1..total_sons, 1..total_cows] of var 0..1: x;\n\n% Each son must get the correct number of cows\nconstraint\n    forall(s in 1..total_sons) (\n        sum(c in 1..total_cows)(x[s, c]) == cows_per_son[s]\n    );\n\n% The total milk production for each son should be the same\nconstraint\n    forall(s in 2..total_sons) (\n        sum(c in 1..total_cows)(cow_production[c] * x[s, c]) == sum(c in 1..total_cows)(cow_production[c] * x[1, c])\n    );\n\n% Solve for the distribution of cows\nsolve satisfy;\n\n% Output the cows allocated to each son\noutput [\n    "Son 1: " ++ show([c | c in 1..total_cows where x[1, c] == 1]) ++ "\n" ++\n    "Son 2: " ++ show([c | c in 1..total_cows where x[2, c] == 1]) ++ "\n" ++\n    "Son 3: " ++ show([c | c in 1..total_cows where x[3, c] == 1]) ++ "\n" ++\n    "Son 4: " ++ show([c | c in 1..total_cows where x[4, c] == 1]) ++ "\n" ++\n    "Son 5: " ++ show([c | c in 1..total_cows where x[5, c] == 1]) ++ "\n"\n];
___________
total_cows = 25;\ntotal_sons = 5;
==============================