[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "0_1", "status": true, "solutions": "Solution(cow=[1, 1, 1, 2, 1, 2, 2, 3, 4, 3, 4, 3, 2, 3, 2, 5, 1, 1, 1, 2, 3, 4, 4, 5, 5], _checker='')"}]

None
___________
int: total_cows = 25; % Total number of cows
int: total_sons = 5; % Total number of sons
array[1..5] of int: cows_per_son = [7, 6, 5, 4, 3]; % Number of cows each son should get

% Milk production per cow
array[1..25] of int: milk_production = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];

% Decision variable: which son gets which cow
array[1..25] of var 1..5: assigned_son;

% Constraint: each cow must be assigned to exactly one son
constraint forall(i in 1..25)(
    count(j in 1..25)(assigned_son[j] == assigned_son[i]) == 1
);

% Constraint: total quantity of milk for each son must be equal
constraint forall(s in 1..5)(
    sum([milk_production[c] | c in 1..25 where assigned_son[c] == s]) == sum(milk_production) / total_sons
);

solve satisfy;

output["Cows assigned to each son:"] = [assigned_son[c] | c in 1..25];
___________
total_cows = 25;
total_sons = 5;

% Cows per son
% cows_per_son[1] = 7;
% cows_per_son[2] = 6;
% cows_per_son[3] = 5;
% cows_per_son[4] = 4;
% cows_per_son[5] = 3;

% Milk production per cow
milk_production = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
==============================Solution(cow=[1, 1, 1, 2, 1, 2, 2, 3, 4, 3, 4, 3, 2, 3, 2, 5, 1, 1, 1, 2, 3, 4, 4, 5, 5], _checker='')
___________
int: n_cows = 25; % Total number of cows
int: n_sons = 5; % Total number of sons

% Quantity of cows to be given to each son
array[1..n_sons] of int: cows_per_son = [7, 6, 5, 4, 3];

% Milk production per cow
array[1..n_cows] of int: milk_production = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];

% Decision variables: cow[i] is the son who receives cow i
array[1..n_cows] of var 1..n_sons: cow;

% Constraints: each son receives the specified number of cows
constraint
  forall(j in 1..n_sons) (
    count(cow, j) == cows_per_son[j]
  );

% Constraint: total milk production given to each son must be equal
% This requires that the sum of the milk production of cows assigned to each son is equal
constraint
  forall(j in 1..n_sons) (
    sum(i in 1..n_cows where cow[i] == j) (milk_production[i]) == sum(milk_production) / n_sons
  );

solve satisfy;

% Output the distribution of cows to sons
output ["Cow " ++ show(i) ++ " goes to Son " ++ show(cow[i]) ++ "\n" | i in 1..n_cows];
___________
n_cows = 25;
n_sons = 5;
==============================