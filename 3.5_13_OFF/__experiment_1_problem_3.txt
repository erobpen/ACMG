[{"attempt": "0_1", "status": true, "solutions": "None"}, {"attempt": "0_2", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "Solution(apples=4, _checker='')"}]

None
___________
int: gates = 5; % Number of gates to pass through, fixed at 5
var 0..100: apples; % The number of apples the boy had to begin with
array[1..gates] of var 0..100: given; % The number of apples given at each gate

% Calculate the number of apples given at each gate
constraint given[1] == floor(apples / 2) + 1 /\
           given[2] == floor(given[1] / 2) + 1 /\
           given[3] == floor(given[2] / 2) + 1 /\
           given[4] == floor(given[3] / 2) + 1 /\
           given[5] == floor(given[4] / 2) + 1;

% The boy has no apples left after giving the last apple
constraint given[5] == 0;

% Objective: minimize the number of apples the boy started with
solve minimize apples;

output ["The boy started with " ++ show(apples) ++ " apples.\n"];
output ["He gave " ++ show(given[1]) ++ " at gate 1, " ++ show(given[2]) ++ " at gate 2, " ++ show(given[3]) ++ " at gate 3, " ++ show(given[4]) ++ " at gate 4, and " ++ show(given[5]) ++ " at gate 5.\n"];
___________
gates = 5;
==============================None
___________
int: gates = 5;
int: apples; % from dzn

array[1..gates] of var 0..apples: given;
array[1..gates] of var 0..apples: remaining;

constraint forall(i in 1..gates-1)(
    remaining[i+1] == (remaining[i] / 2) - 1
);

constraint remaining[1] == apples;

output["The boy started with " ++ show(apples) ++ " apples\n"];
output["He gave the guards: "];
output([show(given[i]) ++ " " | i in 1..gates]);
output["\n"];

constraint given[gates] == 1;
constraint remaining[gates] == 0;

solve satisfy;
___________
apples = 63;
==============================Solution(apples=4, _checker='')
___________
int: gates = 5;  % Number of gates to pass through

% Variables
var int: apples;  % Initial number of apples the boy has

% Constraints
constraint
    apples > 0 /\            % The boy has to start with at least 1 apple
    forall(g in 1..gates) (  % Loop through all gates
        apples mod 2 = 0 /\  % Ensure the number of apples is even to give half to the guard
        apples > 2            % The boy can give at least 1 apple (half of 2) to the guard
    )
;

% Solve
solve satisfy;  % Find any solution, if it exists

% Output
output["The boy started with " ++ show(apples) ++ " apples."];
___________
% Data for the apple problem
apples = 13;  % Initial number of apples the boy has
==============================