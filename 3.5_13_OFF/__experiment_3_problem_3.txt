[{"attempt": "1_0", "status": true, "solutions": "None"}, {"attempt": "1_1", "status": true, "solutions": "Solution(apples_start=62, apples=[62, 30, 14, 6, 2, 0], _checker='')"}]

None
___________
int: n_gates = 5;  % Number of gates
int: apples_left = 0;  % Apples left after giving one to the girl

array[1..n_gates] of var 0..100: apples_at_gate;  % Apples before each gate
array[1..n_gates] of var 0..100: apples_given;    % Apples given to each guard

% Constraints: Apples given to guards must be an integer
constraint forall(i in 1..n_gates)(
    apples_given[i] = (apples_at_gate[i] - apples_at_gate[i+1]) div 2
);

% Constraints: Total apples after passing a gate
constraint apples_at_gate[1] = (apples_at_gate[2] + 2*apples_given[1]);
constraint apples_at_gate[2] = (apples_at_gate[3] + 2*apples_given[2]);
constraint apples_at_gate[3] = (apples_at_gate[4] + 2*apples_given[3]);
constraint apples_at_gate[4] = (apples_at_gate[5] + 2*apples_given[4]);
constraint apples_at_gate[5] = apples_left;

solve satisfy;

% Output the solution
output["Initial apples: " ++ show(apples_at_gate[1]) ++ "\n"];
___________
n_gates = 5;
apples_left = 0;
apples_at_gate = [A1, A2, A3, A4, A5];
constraint A1 = A2 + 2 * ((A1 - A2) div 2);
constraint A2 = A3 + 2 * ((A2 - A3) div 2);
constraint A3 = A4 + 2 * ((A3 - A4) div 2);
constraint A4 = A5 + 2 * ((A4 - A5) div 2);
==============================Solution(apples_start=62, apples=[62, 30, 14, 6, 2, 0], _checker='')
___________
int: gates = 5; % from dzn\nint: apples_left = 0; % from dzn\n\n% Decision variable: number of apples the boy starts with\nvar 1..100: apples_start;\n\n% Calculate the apples at each step\narray[0..gates] of var -1000..1000: apples;\n\nconstraint\n  % Initial apples\n  apples[0] == apples_start /\\n\n  % Apples at each gate\n  forall(i in 1..gates) (\n    apples[i] == (apples[i-1] - (apples[i-1] / 2 + 1)) /\\n    (apples[i-1] - apples[i]) mod 2 == 0 /\\n    apples[i-1] - apples[i] >= 0\n  ) /\\n\n  % Final apples\n  apples[gates] == apples_left;\n\nsolve satisfy;\n\noutput [\n  "The boy started with ", show(apples_start), " apples.\n"\n];
___________
gates = 5;\napples_left = 0;\n
==============================