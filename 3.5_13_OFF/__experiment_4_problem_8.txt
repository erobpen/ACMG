[{"attempt": "0_2", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "None"}, {"attempt": "1_1", "status": true, "solutions": "None"}, {"attempt": "1_2", "status": true, "solutions": "None"}, {"attempt": "2_1", "status": true, "solutions": "Solution(Children=[-2147483643, -2147483644, 3, -2147483645, -2147483646], Ages=[5, 3, 4, 7, 6], Countries=[2, 4, 3, 1, 5], Stories=[5, 4, 2, 3, 1], _checker='')"}]

None
___________
int: n = 5;  % number of children\n\narray[1..n] of var int: age;  % age of each child\narray[1..n] of var int: country;  % 1: Ethiopia, 2: Kazakhstan, 3: Lithuania, 4: Morocco, 5: Yemen\narray[1..n] of var int: story;  % 1: burning bush, 2: captivity, 3: Moses’s youth, 4: Passover, 5: Ten Commandments\n\nconstraint alldifferent(age);\nconstraint alldifferent(country);\nconstraint alldifferent(story);\n\n% Define the specific relationships given in the problem\nconstraint age[3] == 7;  % 3: Debby\nconstraint country[3] == 3;  % 3: Debby's family is from Lithuania\n\nconstraint age[4] == age[1] + 2;  % 4: Passover is 2 years older than Bernice (1: Bernice)\n\nconstraint country[5] == 5;  % 5: Yemen is younger than Ethiopia\n\nconstraint age[2] == age[5] + 3;  % 2: Morocco - 3: Ted\n\nconstraint age[4] == age[3] + 3;  % 4: Passover\n\nconstraint story[4] != 3;  % 4: Passover\n\nconstraint age[1] == age[3] + 3;  % 5: Sammy is 3 years older than Moses’s youth\n\n% Symmetry breaking constraints\nconstraint age[1] < age[2];\nconstraint country[1] < country[2];\nconstraint story[1] < story[2];\n\nsolve satisfy;\n\n% Output results\noutput [\n  "Bernice (", show(age[1]), " years old, from ", show(country[1]), ", tells about ", show(story[1]), " (burning bush)\n",\n  "Carl (", show(age[2]), " years old, from ", show(country[2]), ", tells about ", show(story[2]), " (captivity)\n",\n  "Debby (", show(age[3]), " years old, from ", show(country[3]), ", tells about ", show(story[3]), " (Moses’s youth)\n",\n  "Sammy (", show(age[4]), " years old, from ", show(country[4]), ", tells about ", show(story[4]), " (Passover)\n",\n  "Ted (", show(age[5]), " years old, from ", show(country[5]), ", tells about ", show(story[5]), " (Ten Commandments)\n"\n];
___________
age = [3, 0, 0, 0, 0];% 3: Debby\nBernice = 1;\nPassover = 4;\nSammy = 5;\nMoses_youth = 3;\nTed = 2;\nYemen = 5;\nMorocco = 4;\nEthiopia = 1;\nLithuania = 3;
==============================None
___________
% Define the set of children, ages, countries of origin, and stories
set of int: AGES = 3..10;
set of int: CHILDREN = 1..5;
set of int: COUNTRIES = 1..5;
set of int: STORIES = 1..5;

% Define the parameters: age, country, and story for each child
array[CHILDREN] of var AGES: age;
array[CHILDREN] of var COUNTRIES: country;
array[CHILDREN] of var STORIES: story;

% Constraints
constraint all_different(age) /\ all_different(country) /\ all_different(story);

% Debby's family is from Lithuania
constraint country[3] == 3;

% The child who told the story of Passover is two years older than Bernice
constraint age[2] + 2 == age[4] /\ story[4] == 4;

% The child from Yemen is younger than the child from Ethiopia
constraint country[5] == 5 /\ country[3] == 1 /\ age[5] < age[3];

% The child from Morocco is three years older than Ted
constraint country[4] == 4 /\ age[4] == age[5] + 3;

% Sammy is three years older than the child who told the story of Moses's youth
constraint (age[1] + 3 == age[3]) \/ (age[2] + 3 == age[3]) \/ (age[4] + 3 == age[3]) \/ (age[5] + 3 == age[3]);

% Solve
solve satisfy;

% Output the results
output["Bernice: age = " ++ show(age[1]) ++ ", from " ++ show(country[1]) ++ ", told the story of " ++ show(story[1]) ++ "\n"];
output["Carl: age = " ++ show(age[2]) ++ ", from " ++ show(country[2]) ++ ", told the story of " ++ show(story[2]) ++ "\n"];
output["Debby: age = " ++ show(age[3]) ++ ", from " ++ show(country[3]) ++ ", told the story of " ++ show(story[3]) ++ "\n"];
output["Sammy: age = " ++ show(age[4]) ++ ", from " ++ show(country[4]) ++ ", told the story of " ++ show(story[4]) ++ "\n"];
output["Ted: age = " ++ show(age[5]) ++ ", from " ++ show(country[5]) ++ ", told the story of " ++ show(story[5]) ++ "\n"];
___________
AGES = 3..10;
CHILDREN = 1..5;
COUNTRIES = 1..5;
STORIES = 1..5;
==============================None
___________
% Parameters
int: nChildren = 5;
set of int: CHILDREN = 1..nChildren;
set of int: AGES = {3, 5, 7, 8, 10};
set of int: COUNTRIES = {1, 2, 3, 4, 5};  % 1 = Ethiopia, 2 = Kazakhstan, 3 = Lithuania, 4 = Morocco, 5 = Yemen
set of int: STORIES = {1, 2, 3, 4, 5};  % 1 = Burning Bush, 2 = Captivity, 3 = Moses's Youth, 4 = Passover, 5 = Ten Commandments

% Variables
array[CHILDREN] of var AGES: age;  % Age of each child
array[CHILDREN] of var COUNTRIES: country;  % Country of each child's family
array[CHILDREN] of var STORIES: story;  % Story told by each child

% Constraints
constraint all_different(age);
constraint all_different(country);
constraint all_different(story);

constraint age[3] = 3;  % 3. The child from Yemen is younger than the child from Ethiopia.
constraint age[4] = age[5] + 3;  % 4. The child from Morocco is three years older than Ted.
constraint age[3] = age[1] + 2;  % 2. The child who told the story of Passover is two years older than Bernice.
constraint age[4] = age[3] + 2;  % 5. Sammy is three years older than the child who told the story of Moses’s youth.

constraint country[3] = 3;  % 1. Debby is from Lithuania.

% Solve
solve satisfy;

% Output
output ["Child: " ++ show(C) ++ "\n" ++
        "Age: " ++ show(age[C]) ++ "\n" ++
        "Country: " ++ show(country[C]) ++ "\n" ++
        "Story: " ++ show(story[C]) ++ "\n\n"
        | C in CHILDREN];
___________
age = [_, _, _, _, _];  % Unassigned ages of the children
country = [_, _, _, _, _];  % Unassigned countries of the children
story = [_, _, _, _, _];  % Unassigned stories told by the children
==============================None
___________
set of int: Ages = 3..10;  % from dzn
set of int: Stories = 1..5;  % from dzn
set of int: Countries = 1..5;  % from dzn

% Age-Child, Child-Story, Child-Country, Story-Story mappings
array[Ages] of var 1..5: Child;
array[1..5] of var Ages: Age;
array[1..5] of var Countries: Country;
array[1..5] of var Stories: Story;

% Constraints
constraint all_different(Child) /\ all_different(Age) /\ all_different(Country) /\ all_different(Story);

constraint Child[1] == 1;  % Bernice
constraint Child[2] == 2;  % Carl
constraint Child[3] == 3;  % Debby
constraint Child[4] == 4;  % Sammy
constraint Child[5] == 5;  % Ted

constraint Age[Child[3]] == 7;  % Debby's family is from Lithuania

constraint Age[Story[4]] == Age[Child[1]] + 2;  % The child who told the story of Passover is two years older than Bernice
constraint Country[Child[5]] != Country[3];  % The child from Yemen is younger than the child from Ethiopia
constraint Age[Child[5]] - Age[Child[4]] == 3;  % The child from Morocco is three years older than Ted
constraint Age[Child[4]] - Age[Story[3]] == 3;  % Sammy is three years older than the child who told the story of Moses's youth

solve satisfy;

output ["Ages: "] ++ ["Bernice: " ++ show(Age[1]) ++ ", Carl: " ++ show(Age[2]) ++ ", Debby: " ++ show(Age[3]) ++ ", Sammy: " ++ show(Age[4]) ++ ", Ted: " ++ show(Age[5]) ++ "\n"] ++
["Countries: "] ++ ["Bernice: " ++ show(Country[1]) ++ ", Carl: " ++ show(Country[2]) ++ ", Debby: " ++ show(Country[3]) ++ ", Sammy: " ++ show(Country[4]) ++ ", Ted: " ++ show(Country[5]) ++ "\n"] ++
["Stories: "] ++ ["Bernice: " ++ show(Story[1]) ++ ", Carl: " ++ show(Story[2]) ++ ", Debby: " ++ show(Story[3]) ++ ", Sammy: " ++ show(Story[4]) ++ ", Ted: " ++ show(Story[5]) ++ "\n"];
___________
Ages = 3..10;  % from dzn
Stories = 1..5;  % from dzn
Countries = 1..5;  % from dzn
==============================Solution(Children=[-2147483643, -2147483644, 3, -2147483645, -2147483646], Ages=[5, 3, 4, 7, 6], Countries=[2, 4, 3, 1, 5], Stories=[5, 4, 2, 3, 1], _checker='')
___________
% from dzn

% Define the children
array[1..5] of var int: Children;

% Define the ages of the children
array[1..5] of var 3..10: Ages;

% Define the countries of origin
array[1..5] of var 1..5: Countries;

% Define the parts of the story of the Exodus
array[1..5] of var 1..5: Stories;

constraint alldifferent (Children) /\ alldifferent (Ages) /\ alldifferent (Countries) /\ alldifferent (Stories);

% Debby's family is from Lithuania
constraint (Children[3] = 3 /\ Countries[3] = 3);

% The child who told the story of the Passover is two years older than Bernice
constraint (Stories[1] = Ages[2] + 2);

% The child whose family is from Yemen is younger than the child from the Ethiopian family
constraint Countries[4] = 1 /\ Countries[5] = 5;

% The child from the Moroccan family is three years older than Ted
constraint (Countries[2] = 4 /\ Ages[2] + 3 = Ages[5]);

% Sammy is three years older than the child who told the story of Moses's youth
constraint (Stories[3] = 2 /\ Ages[3] + 3 = Ages[4]);

solve satisfy;

output ["Bernice: " ++ show(Ages[1]) ++ " from " ++ show(Stories[1]) ++ "\n",
        "Carl: " ++ show(Ages[2]) ++ " from " ++ show(Stories[3]) ++ "\n",
        "Debby: " ++ show(Ages[3]) ++ " from " ++ show(Stories[4]) ++ "\n",
        "Sammy: " ++ show(Ages[4]) ++ " from " ++ show(Stories[2]) ++ "\n",
        "Ted: " ++ show(Ages[5]) ++ " from " ++ show(Stories[5]) ++ "\n"];
___________
Children = [1, 2, 3, 4, 5];
Countries = [1, 2, 3, 4, 5];
Stories = [1, 2, 3, 4, 5];
Ages = [3, 5, 7, 8, 10];
==============================