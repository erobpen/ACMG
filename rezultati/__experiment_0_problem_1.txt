[{"attempt": "0_0", "status": true, "solutions": "Solution(floors=[3, 2, 4, 5, 1], _checker='')"}]

Solution(floors=[3, 2, 4, 5, 1], _checker='')
___________
```minizinc
int: Floors = 5; % Number of floors
int: Individuals = 5; % Number of individuals

% Variables representing the floors occupied by each individual
array[1..Individuals] of var 1..Floors: floors;

% Individuals
int: Baker = 1;
int: Cooper = 2;
int: Fletcher = 3;
int: Miller = 4;
int: Smith = 5;

% Constraints
constraint floors[Baker] != 5; % Baker cannot be on the fifth floor
constraint floors[Cooper] != 1; % Cooper cannot be on the first floor
constraint floors[Fletcher] != 1; % Fletcher cannot be on the first floor
constraint floors[Fletcher] != 5; % Fletcher cannot be on the fifth floor
constraint floors[Miller] > floors[Cooper]; % Miller must be above Cooper
constraint abs(floors[Smith] - floors[Fletcher]) > 1; % Smith cannot be adjacent to Fletcher
constraint abs(floors[Fletcher] - floors[Cooper]) > 1; % Fletcher cannot be adjacent to Cooper

% Ensure all individuals are assigned to different floors
constraint all_different(floors);

solve satisfy;

output ["Baker: ", show(floors[Baker]), "\n",
        "Cooper: ", show(floors[Cooper]), "\n",
        "Fletcher: ", show(floors[Fletcher]), "\n",
        "Miller: ", show(floors[Miller]), "\n",
        "Smith: ", show(floors[Smith]), "\n"];
```
___________
```dzn
Floors = 5;
Individuals = 5;
```
==============================