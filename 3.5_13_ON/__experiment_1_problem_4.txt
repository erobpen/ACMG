[{"attempt": "0_0", "status": true, "solutions": "Solution(grid=[[16, 1, 1, 16], [1, 16, 16, 1], [16, 1, 1, 16], [1, 16, 16, 1]], _checker='')"}]

Solution(grid=[[16, 1, 1, 16], [1, 16, 16, 1], [16, 1, 1, 16], [1, 16, 16, 1]], _checker='')
___________
int: n = 4;  % Grid size (n x n)
int: target_sum = 34;  % Target sum for each row, column, and diagonal
array[1..n, 1..n] of var 1..16: grid;  % Each cell in the grid can be 1 to 16

% Constraints: All numbers in the grid must be integers
constraint forall(i, j in 1..n)(
    grid[i, j] in 1..16
);

% Constraints: Rows, columns, and diagonals must sum to the target value
constraint forall(i in 1..n)(
    sum(j in 1..n)(grid[i, j]) = target_sum /\
    sum(j in 1..n)(grid[j, i]) = target_sum
);
constraint sum(i in 1..n)(grid[i, i]) = target_sum;  % Main diagonal
constraint sum(i in 1..n)(grid[i, n - i + 1]) = target_sum;  % Anti-diagonal

solve satisfy;

% Output the magic square
output [
    "\nMagic Square:\n",
    show(grid[1,1]) ++ " " ++ show(grid[1,2]) ++ " " ++ show(grid[1,3]) ++ " " ++ show(grid[1,4]) ++ "\n" ++
    show(grid[2,1]) ++ " " ++ show(grid[2,2]) ++ " " ++ show(grid[2,3]) ++ " " ++ show(grid[2,4]) ++ "\n" ++
    show(grid[3,1]) ++ " " ++ show(grid[3,2]) ++ " " ++ show(grid[3,3]) ++ " " ++ show(grid[3,4]) ++ "\n" ++
    show(grid[4,1]) ++ " " ++ show(grid[4,2]) ++ " " ++ show(grid[4,3]) ++ " " ++ show(grid[4,4]) ++ "\n"
];
___________
n = 4;   % Grid size (n x n)
==============================