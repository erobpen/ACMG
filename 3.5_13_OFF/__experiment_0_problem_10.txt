[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "0_1", "status": true, "solutions": "Solution(cows_given=[25, 0, 0, 0, 0], _checker='')"}]

None
___________
int: num_cows;
int: num_sons;

array[1..num_cows] of var 1..num_cows: cows;
array[1..num_sons] of var 1..num_cows: son_cows;

constraint forall(i in 1..num_cows)(cows[i] == i);

constraint sum(son_cows) == num_cows;

constraint son_cows[1] == 7;
constraint son_cows[2] == 6;
constraint son_cows[3] == 5;
constraint son_cows[4] == 4;
constraint son_cows[5] == 3;

constraint sum(i in 1..num_cows)(cows[i] * i) == sum(j in 1..num_sons)(sum(k in 1..num_cows)(son_cows[j] * k));

output["Distribution of cows to sons:"] = son_cows;

solve satisfy;
___________
num_cows = 25;
num_sons = 5;
==============================Solution(cows_given=[25, 0, 0, 0, 0], _checker='')
___________
```minizinc
int: num_cows;
int: num_sons;

array[1..num_cows] of int: milk_produced = [i | i in 1..num_cows];

array[1..num_sons] of var 0..num_cows: cows_given;

constraint sum(cows_given) == num_cows;

constraint forall(i in 1..num_sons-1)(
    sum(j in 1..i)(cows_given[j]) * sum(j in i+1..num_sons)(cows_given[j]) == sum(j in i+1..num_sons)(sum(k in 1..cows_given[j])(milk_produced[k]))
);

output[show(cows_given)];

solve satisfy;
```
___________
num_cows = 25;
num_sons = 5;
==============================