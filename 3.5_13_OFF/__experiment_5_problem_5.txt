[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "0_1", "status": true, "solutions": "None"}, {"attempt": "0_2", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "None"}, {"attempt": "1_1", "status": true, "solutions": "None"}, {"attempt": "1_2", "status": true, "solutions": "None"}, {"attempt": "2_0", "status": true, "solutions": "None"}, {"attempt": "2_1", "status": true, "solutions": "None"}, {"attempt": "2_2", "status": true, "solutions": "None"}]

None
___________
% Number of suspects
int: n = 6;

% Binary variables representing whether each suspect is guilty (1) or innocent (0)
array[1..n] of var 0..1: guilty;

% ARTIE: "It wasn't me."
constraint guilty[1] = 1 -> false;  % Artie is guilty if guilty[1] = 1

% BILL: "Crackitt was in it up to his neck."
constraint guilty[2] = 1 -> guilty[3] = 1;  % Bill is guilty if Crackitt is guilty

% CRACKITT: "No I wasn't."
constraint guilty[3] = 1 -> false;  % Crackitt is guilty if guilty[3] = 1

% DODGY: "If Crackitt did it, Bill did it with him."
constraint guilty[4] = 1 -> (guilty[3] = 1 /\ guilty[2] = 1);  % Dodgy is guilty if Crackitt is guilty and Bill is guilty

% EDGY: "Nobody did it alone."
constraint guilty[5] = 1 -> sum([guilty[i] | i in 1..n]) > 1;  % Edgy is guilty if at least 2 suspects are guilty

% FINGERS: "That’s right: it was Artie and Dodgy together."
constraint guilty[6] = 1 -> (guilty[1] = 1 /\ guilty[4] = 1);  % Fingers is guilty if Artie is guilty and Dodgy is guilty

% Only 2 suspects can be guilty (getaway car held only 2 people)
constraint sum([guilty[i] | i in 1..n]) = 2;

solve satisfy;

% Output the guilty suspects
output["Guilty suspects: "];
for i in 1..n do
    if guilty[i] = 1 then
        output["S" ++ show(i) ++ " "];
    endif;
end for;
___________
guilty = [0, 1, 0, 0, 0, 0];
==============================None
___________
int: ARTIE;  % 1 if guilty, 0 if innocent\nint: BILL;  % 1 if guilty, 0 if innocent\nint: CRACKITT;  % 1 if guilty, 0 if innocent\nint: DODGY;  % 1 if guilty, 0 if innocent\nint: EDGY;  % 1 if guilty, 0 if innocent\nint: FINGERS;  % 1 if guilty, 0 if innocent\n\nconstraint ARTIE != BILL;  % Innocent tell the truth, guilty lie\nconstraint BILL != CRACKITT;\nconstraint CRACKITT != DODGY;\nconstraint DODGY != EDGY;\nconstraint EDGY != FINGERS;\nconstraint FINGERS != ARTIE;\n\n% Getaway car could only hold two people\nconstraint sum([ARTIE, BILL, CRACKITT, DODGY, EDGY, FINGERS]) <= 2;\n\n% Relations based on suspects' statements and implications\nconstraint ARTIE + BILL + CRACKITT + DODGY + EDGY + FINGERS == 2;  % Only 2 guilty\nconstraint ARTIE == 1 \/ ARTIE == 0;  % Guilty or innocent\nconstraint BILL == 1 \/ BILL == 0;\nconstraint CRACKITT == 1 \/ CRACKITT == 0;\nconstraint DODGY == 1 \/ DODGY == 0;\nconstraint EDGY == 1 \/ EDGY == 0;\nconstraint FINGERS == 1 \/ FINGERS == 0;\n\nsolve satisfy;  % Find the solution\n\noutput["Guilty suspects: "];\nif ARTIE == 1 then output["ARTIE "]; endif;\nif BILL == 1 then output["BILL "]; endif;\nif CRACKITT == 1 then output["CRACKITT "]; endif;\nif DODGY == 1 then output["DODGY "]; endif;\nif EDGY == 1 then output["EDGY "]; endif;\nif FINGERS == 1 then output["FINGERS "]; endif;\n\noutput["\n"];
___________
ARTIE = -1;
BILL = -1;
CRACKITT = -1;
DODGY = -1;
EDGY = -1;
FINGERS = -1;
==============================None
___________
% Input parameters: Statements from suspects
array[1..6] of var bool: statements; % true if suspect is guilty, false if suspect is innocent

% Constraints:
% 1. Getaway car could only hold two people, so at least four must be innocent
constraint sum(statements) >= 2 /\ sum(statements) <= 5; % At least 2 guilty, at most 5 guilty

% 2. The innocent ones tell the truth, while the guilty one or ones lie
constraint statements[1] = false \/ statements[1] = true /\ statements[1] /\ statements[2] /\ statements[3] /\ statements[4] = false; % ARTIE
constraint statements[2] = false \/ statements[2] = true /\ statements[3] /\ statements[5] /\ statements[6] = false; % BILL
constraint statements[3] = false \/ statements[3] = true /\ statements[2] /\ statements[4] /\ statements[5] = false; % CRACKITT
constraint statements[4] = false \/ statements[4] = true /\ statements[3] /\ statements[5] = false; % DODGY
constraint statements[5] = false \/ statements[5] = true /\ statements[2] /\ statements[4] /\ statements[6] = false; % EDGY
constraint statements[6] = false \/ statements[6] = true /\ statements[1] /\ statements[4] = false; % FINGERS

% Solve the problem
solve satisfy;

% Output
output["The guilty suspect(s) is/are: "];
for i in 1..6 do
    if statements[i] then
        output["S" ++ show(i) ++ " "];
    endif;
end for;
___________
% Data for the Sparkles the Jeweller's robbery problem
% Statements from suspects: ARTIE, BILL, CRACKITT, DODGY, EDGY, FINGERS
% 1 if the suspect is guilty (lied), 0 if the suspect is innocent (told the truth)
statements = [0, 0, 0, 0, 0, 0];
==============================None
___________
include "globals.mzn";

% Variables to represent the suspects' guilt (1=guilty, 0=innocent)
var 0..1: Artie;
var 0..1: Bill;
var 0..1: Crackitt;
var 0..1: Dodgy;
var 0..1: Edgy;
var 0..1: Fingers;

% Guilty suspects lie, innocent suspects tell the truth
constraint Artie + Bill + Crackitt + Dodgy + Edgy + Fingers >= 4;

% Statements of the suspects (1=true, 0=false)
constraint Artie = 0; % Artie: "It wasn't me."
constraint (Bill = 1) = (Crackitt = 1); % Bill: "Crackitt was in it up to his neck."
constraint Crackitt = 0; % Crackitt: "No I wasn't."
constraint (Dodgy = 1) = (Crackitt = 0 /\ Bill = 1); % Dodgy: "If Crackitt did it, Bill did it with him."
constraint (Edgy = 1) = (Artie = 0 \/ Dodgy = 1 \/ Fingers = 1); % Edgy: "Nobody did it alone."
constraint (Fingers = 1) = (Artie = 1 /\ Dodgy = 1); % Fingers: "It was Artie and Dodgy together."

solve satisfy;

output["Guilty Suspects: "];
if Artie = 1 then output["Artie, "] endif;
if Bill = 1 then output["Bill, "] endif;
if Crackitt = 1 then output["Crackitt, "] endif;
if Dodgy = 1 then output["Dodgy, "] endif;
if Edgy = 1 then output["Edgy, "] endif;
if Fingers = 1 then output["Fingers"] endif;
___________
% Number of guilty suspects
int: guilty_count = 1;

% Assigning the guilty_count number of suspects as guilty (1) and the rest as innocent (0)
array[1..6] of var 0..1: guilty_suspects;

% Constraint to ensure the correct number of guilty suspects
constraint sum(guilty_suspects) = guilty_count;

% Comment: Assigning the innocent suspects based on the guilty_count
% Comment: This is to ensure that at least 4 suspects are innocent and 2 are guilty
% Comment: There are multiple valid combinations of guilty and innocent suspects, so we choose one here arbitrarily

% Assigning the 2 guilty suspects
constraint guilty_suspects[1] = 1; % Artie is guilty
constraint guilty_suspects[4] = 1; % Dodgy is guilty

% Assigning the 4 innocent suspects
constraint guilty_suspects[2] = 0; % Bill is innocent
constraint guilty_suspects[3] = 0; % Crackitt is innocent
constraint guilty_suspects[5] = 0; % Edgy is innocent
constraint guilty_suspects[6] = 0; % Fingers is innocent

% The statements of the suspects
% These constraints are not needed in the data file, as the model has them hardcoded

% Solve statement
solve satisfy;

% Output
output["Guilty Suspects: "];
for i in 1..6 do
    if guilty_suspects[i] = 1 then
        output["Suspect ", i, " is guilty.\n"];
    endif;
end for;
==============================None
___________
% Parameters
int: Artie = 0; % from dzn
int: Bill = 0; % from dzn
int: Crackitt = 0; % from dzn
int: Dodgy = 0; % from dzn
int: Edgy = 0; % from dzn
int: Fingers = 0; % from dzn

% Decision variables
var bool: ArtieGuilt;
var bool: BillGuilt;
var bool: CrackittGuilt;
var bool: DodgyGuilt;
var bool: EdgyGuilt;
var bool: FingersGuilt;

% Constraint 1: Guilty suspects will lie, innocent suspects will tell the truth
constraint (if ArtieGuilt then Artie == 0 else Artie == 1 endif) /\
           (if BillGuilt then Bill == 0 else Bill == 1 endif) /\
           (if CrackittGuilt then Crackitt == 0 else Crackitt == 1 endif) /\
           (if DodgyGuilt then Dodgy == 0 else Dodgy == 1 endif) /\
           (if EdgyGuilt then Edgy == 0 else Edgy == 1 endif) /\
           (if FingersGuilt then Fingers == 0 else Fingers == 1 endif);

% Constraint 2: Getaway car could only hold two people
constraint sum([ArtieGuilt, BillGuilt, CrackittGuilt, DodgyGuilt, EdgyGuilt, FingersGuilt]) <= 2;

% Constraint 3: At least four suspects are innocent
constraint sum([ArtieGuilt, BillGuilt, CrackittGuilt, DodgyGuilt, EdgyGuilt, FingersGuilt]) >= 4;

% Constraint 4: If Crackitt is guilty, then Bill is also guilty
constraint (CrackittGuilt -> BillGuilt);

% Constraint 5: If Artie and Dodgy are guilty, then Fingers' statement is true
constraint (ArtieGuilt /\ DodgyGuilt -> FingersGuilt);

% Constraint 6: Nobody acted alone
constraint ArtieGuilt + BillGuilt + CrackittGuilt + DodgyGuilt + EdgyGuilt + FingersGuilt >= 2;

solve satisfy;

% Output
output["Artie: " ++ show(ArtieGuilt) ++ "\n"];
output["Bill: " ++ show(BillGuilt) ++ "\n"];
output["Crackitt: " ++ show(CrackittGuilt) ++ "\n"];
output["Dodgy: " ++ show(DodgyGuilt) ++ "\n"];
output["Edgy: " ++ show(EdgyGuilt) ++ "\n"];
output["Fingers: " ++ show(FingersGuilt) ++ "\n"];
___________
Artie = 0;\nBill = 0;\nCrackitt = 0;\nDodgy = 0;\nEdgy = 0;\nFingers = 0;\n
==============================None
___________
% Variables representing whether each suspect is guilty (1) or innocent (0)
var 0..1: artie; % Guilty or innocent
var 0..1: bill; % Guilty or innocent
var 0..1: crackitt; % Guilty or innocent
var 0..1: dodgy; % Guilty or innocent
var 0..1: edgy; % Guilty or innocent
var 0..1: fingers; % Guilty or innocent

% Constraints based on the suspects' statements
constraint
    (artie = 0 \/ artie = 1) /\
    (bill = 0 \/ bill = 1) /\
    (crackitt = 0 \/ crackitt = 1) /\
    (dodgy = 0 \/ dodgy = 1) /\
    (edgy = 0 \/ edgy = 1) /\
    (fingers = 0 \/ fingers = 1) /\
    % ARTIE: "It wasn't me."
    (artie = 0) /\
    % BILL: "Crackitt was in it up to his neck."
    (bill = 1 <-> crackitt = 1) /\
    % CRACKITT: "No I wasn't."
    (crackitt = 0) /\
    % DODGY: "If Crackitt did it, Bill did it with him."
    (dodgy = 1 -> (crackitt = 0 \/ bill = 0)) /\
    % EDGY: "Nobody did it alone."
    (edgy = 1 <-> (artie + bill + crackitt + dodgy + edgy + fingers > 2)) /\
    % FINGERS: "That's right: it was Artie and Dodgy together."
    (fingers = 1 -> (artie = 1 /\ dodgy = 1))
;

% Additional constraints based on the scenario
constraint artie + bill + crackitt + dodgy + edgy + fingers = 2; % Only 2 guilty suspects
constraint artie + bill + crackitt + dodgy + edgy + fingers >= 4; % At least 4 innocent suspects

solve satisfy;

% Output
output [ "Artie: " ++ show(artie) ++ "\n" ++
         "Bill: " ++ show(bill) ++ "\n" ++
         "Crackitt: " ++ show(crackitt) ++ "\n" ++
         "Dodgy: " ++ show(dodgy) ++ "\n" ++
         "Edgy: " ++ show(edgy) ++ "\n" ++
         "Fingers: " ++ show(fingers) ];
___________
artie = 0;bill = 0;crackitt = 0;dodgy = 0;edgy = 0;fingers = 0;
==============================None
___________
enum Suspects = {ARTIE, BILL, CRACKITT, DODGY, EDGY, FINGERS};

array[Suspects] of var bool: isGuilty; % 1 for guilty, 0 for innocent

constraint sum(isGuilty) >= 1 /\ sum(isGuilty) <= 2; % Getaway car held 2 people

constraint sum([isGuilty[ARTIE], isGuilty[BILL], isGuilty[CRACKITT], isGuilty[DODGY], isGuilty[EDGY], isGuilty[FINGERS]]) >= 4; % At least 4 are innocent

% Statements
constraint isGuilty[ARTIE] = false;
constraint isGuilty[BILL] \/ isGuilty[CRACKITT];
constraint isGuilty[CRACKITT] = false;
constraint (isGuilty[CRACKITT] /\ isGuilty[BILL]) = isGuilty[DODGY];
constraint isGuilty[EDGY] = false;
constraint (isGuilty[ARTIE] /\ isGuilty[DODGY]) = isGuilty[FINGERS];

solve satisfy;

output [if isGuilty[s] then show(s) ++ " is guilty." else show(s) ++ " is innocent." endif ++ "\n" | s in Suspects];
___________
% Data for the guilty suspects problem
% Enumerate the suspects
n_suspects = 6;

% Enumerate the suspects
suspect_names = ["ARTIE", "BILL", "CRACKITT", "DODGY", "EDGY", "FINGERS"];

% Constraint the getaway car held 2 people
guilty_count = 1;

% Constraints based on the suspects' statements
% 1. ARTIE: "It wasn't me."
% 2. BILL: "Crackitt was in it up to his neck."
% 3. CRACKITT: "No I wasn't."
% 4. DODGY: "If Crackitt did it, Bill did it with him."
% 5. EDGY: "Nobody did it alone."
% 6. FINGERS: "Thatâ€™s right: it was Artie and Dodgy together."

% The guilty suspects
% Add any additional constraint based on the given problem statements

% Add your constraints here

% Declare the guilty suspects
guilty = array[1..n_suspects] of int: guilty;

% Output the guilty suspects
output["guilty: " ++  show([suspect_names[s] | s in 1..n_suspects where guilty[s] = 1]) ++ "\n"];

% Output the innocent suspects
output["innocent: " ++  show([suspect_names[s] | s in 1..n_suspects where guilty[s] = 0]) ++ "\n"];
==============================None
___________
% Define the suspects
enum Suspects = {ARTIE, BILL, CRACKITT, DODGY, EDGY, FINGERS};

% Define the variables to represent innocence or guilt
array[Suspects] of var bool: innocent;

% At least four suspects are innocent
constraint sum(innocent) >= 4;

% No more than two suspects can be guilty
constraint sum([not innocent[suspect] | suspect in Suspects]) <= 2;

% ARTIE: "It wasn't me."
constraint (ARTIE = BILL \/ ARTIE = CRACKITT \/ ARTIE = DODGY \/ ARTIE = EDGY \/ ARTIE = FINGERS) = false;

% BILL: "Crackitt was in it up to his neck."
constraint (BILL = CRACKITT) = true;

% CRACKITT: "No I wasn't."
constraint (CRACKITT = FINGERS) = false;

% DODGY: "If Crackitt did it, Bill did it with him."
constraint (DODGY = (CRACKITT = BILL) \/ (DODGY = (not innocent[DODGY] /\ not innocent[FINGERS])));

% EDGY: "Nobody did it alone."
constraint (EDGY = (sum([not innocent[suspect] /\ suspect != EDGY | suspect in Suspects]) > 0));

% FINGERS: "That's right: it was Artie and Dodgy together."
constraint (FINGERS = (ARTIE = DODGY) \/ (FINGERS = (not innocent[FINGERS] /\ not innocent[BILL])));

solve satisfy;

output ["Guilty suspect(s): "];
output [suspect ++ "\n" | suspect in Suspects where not innocent[suspect]];
___________
% Data file for the Sparkles the Jeweller's robbery case

% Assign innocence or guilt to each suspect
% 0 for guilty, 1 for innocent
% Initial assignment that at least 4 suspects are innocent
ARTIE = 1;
BILL = 0;
CRACKITT = 0;
DODGY = 1;
EDGY = 1;
FINGERS = 1;
==============================None
___________
enum Suspects = {ARTIE, BILL, CRACKITT, DODGY, EDGY, FINGERS};

array[Suspects] of var bool: isGuilty;  % Boolean variable: true if suspect is guilty, false if innocent

% Constraint: At least 4 are innocent (guilty suspects lie, innocent tell the truth)
constraint sum(isGuilty) >= 2 /\ sum(isGuilty) <= 5;

% Statements made by each suspect
constraint ((isGuilty[ARTIE] \/ not isGuilty[ARTIE]) /\
            (isGuilty[BILL] \/ not isGuilty[BILL]) /\
            (isGuilty[CRACKITT] \/ not isGuilty[CRACKITT]) /\
            (isGuilty[DODGY] \/ not isGuilty[DODGY]) /\
            (isGuilty[EDGY] \/ not isGuilty[EDGY]) /\
            (isGuilty[FINGERS] \/ not isGuilty[FINGERS]));

% Constraints based on the suspects' statements
constraint not isGuilty[ARTIE]; % ARTIE: "It wasn't me."
constraint isGuilty[BILL] <-> isGuilty[CRACKITT]; % BILL: "Crackitt was in it up to his neck."
constraint not isGuilty[CRACKITT]; % CRACKITT: "No I wasn't."
constraint isGuilty[CRACKITT] <-> isGuilty[BILL] \/ isGuilty[DODGY]; % DODGY: "If Crackitt did it, Bill did it with him."
constraint isGuilty[ARTIE] \/ isGuilty[DODGY]; % FINGERS: "That's right: it was Artie and Dodgy together."
constraint isGuilty[ARTIE] /\ isGuilty[DODGY]; % FINGERS: "That's right: it was Artie and Dodgy together."

solve satisfy;

% Output
output ["Guilty suspect(s): "]
  ++ [show(s) | s in Suspects where isGuilty[s] == true] ++ ["\n"];
  
% From dzn
%solve satisfy;
___________
% Data file for the Inspector Korner's case

% Initial assignment of all suspects as innocent
% 1 for innocent, 0 for guilty
ARTIE = 1;
BILL = 1;
CRACKITT = 1;
DODGY = 1;
EDGY = 1;
FINGERS = 1;
==============================