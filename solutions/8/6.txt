int: width;  % width of the space
int: height; % height of the space
int: depth;  % depth of the space

array[1..3] of int: item1 = [4, 4, 4];  % dimensions of item 1 [width, height, depth]
array[1..3] of int: item2 = [4, 2, 2];  % dimensions of item 2 [width, height, depth]
array[1..3] of int: item3 = [2, 5, 2];  % dimensions of item 3 [width, height, depth]

% Define the restricted planes
constraint width == 10;
constraint height == 10;
constraint depth == 10;

% Define the restricted planes
constraint forall(i in 1..3) (
    item1[1] + item2[1] <= 10 /\
    item2[2] + item3[2] <= 10
);

% Output
var bool: items_ok1;  % Item 1 can be placed
var bool: items_ok2;  % Item 2 can be placed
var bool: items_ok3;  % Item 3 can be placed

% At most one of each item can be placed
constraint items_ok1 xor items_ok2;
constraint items_ok1 xor items_ok3;
constraint items_ok2 xor items_ok3;

% At most one item on each plane
constraint (item1[1] <= 8 -> not items_ok1) /\
    (item1[2] <= 6 -> not items_ok1) /\
    (item2[1] <= 8 -> not items_ok2) /\
    (item2[2] <= 6 -> not items_ok2) /\
    (item3[1] <= 8 -> not items_ok3) /\
    (item3[2] <= 6 -> not items_ok3);

solve satisfy;

output [
  if items_ok1 then item1 else [0, 0, 0] endif,
  if items_ok2 then item2 else [0, 0, 0] endif,
  if items_ok3 then item3 else [0, 0, 0] endif
];

width = 10;
height = 10;
depth = 10;

item1 = [4, 4, 4];
item2 = [4, 2, 2];
item3 = [2, 5, 2];% Define the 3D space dimensions




int: spaceWidth;   % Width of the 3D space
int: spaceHeight;  % Height of the 3D space
int: spaceDepth;   % Depth of the 3D space

% Define the dimensions of the items
array[1..3] of int: item1Dims;  % Dimensions of item 1 (width, height, depth)
array[1..3] of int: item2Dims;  % Dimensions of item 2
array[1..3] of int: item3Dims;  % Dimensions of item 3

% Define the non-intersecting constraints
constraint item1Dims[1] + 2 <= spaceWidth;
  % Item 1 does not intersect x=2 plane
constraint item1Dims[2] <= spaceHeight;
  % Item 1 does not intersect y=4 plane
constraint item1Dims[3] <= spaceDepth;
  % Item 1 fits in depth

constraint item2Dims[1] + 2 <= spaceWidth;
  % Item 2 does not intersect x=2 plane
constraint item2Dims[2] <= spaceHeight;
  % Item 2 does not intersect y=4 plane
constraint item2Dims[3] <= spaceDepth;
  % Item 2 fits in depth

constraint item3Dims[1] + 2 <= spaceWidth;
  % Item 3 does not intersect x=2 plane
constraint item3Dims[2] <= spaceHeight;
  % Item 3 does not intersect y=4 plane
constraint item3Dims[3] <= spaceDepth;
  % Item 3 fits in depth

% Items must not intersect each other
constraint
  spaceWidth >= max([item1Dims[1], item2Dims[1], item3Dims[1]]) /\
  spaceHeight >= max([item1Dims[2], item2Dims[2], item3Dims[2]]) /\
  spaceDepth >= max([item1Dims[3], item2Dims[3], item3Dims[3]]);

% Find a solution if all constraints are satisfied
solve satisfy;

% Output the results
output ["Space Dimensions: " ++ show(spaceWidth) ++ "x" ++ show(spaceHeight) ++ "x" ++ show(spaceDepth) ++ "
" ++
        "Item 1 Dimensions: " ++ show(item1Dims) ++ "
" ++
        "Item 2 Dimensions: " ++ show(item2Dims) ++ "
" ++
        "Item 3 Dimensions: " ++ show(item3Dims) ++ "
"];

spaceWidth = 10;  % from dzn
spaceHeight = 10;  % from dzn
spaceDepth = 10;  % from dzn
item1Dims = [4, 4, 4];  % from dzn
item2Dims = [4, 2, 2];  % from dzn
item3Dims = [2, 5, 2];  % from dzn