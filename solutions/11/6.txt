int: width; % from dzn
int: height; % from dzn
int: depth; % from dzn

array[1..3, 1..3] of int: item_dims; % Dimensions of the 3 items

array[1..3] of var 0..1: item_in_space1; % 1 if item in space 1, 0 if in space 2
array[1..3, 1..3] of var 0..10: item_pos; % Position of each item

% Ensure items fit within the space and do not intersect with each other
constraint
  forall(i, j in 1..3 where i < j)(
    if item_in_space1[i] = item_in_space1[j] then
      (item_pos[i, 1] + item_dims[i, 1] <= item_pos[j, 1] \/
       item_pos[j, 1] + item_dims[j, 1] <= item_pos[i, 1]) /\
      (item_pos[i, 2] + item_dims[i, 2] <= item_pos[j, 2] \/
       item_pos[j, 2] + item_dims[j, 2] <= item_pos[i, 2]) /\
      (item_pos[i, 3] + item_dims[i, 3] <= item_pos[j, 3] \/
       item_pos[j, 3] + item_dims[j, 3] <= item_pos[i, 3])
    else
      true
    endif
  );

% Ensure items do not intersect with the specified planes
constraint
  forall(i in 1..3)(
    (item_pos[i, 1] + item_dims[i, 1] <= 2 \/ item_pos[i, 1] >= 2) /\
    (item_pos[i, 2] + item_dims[i, 2] <= 4 \/ item_pos[i, 2] >= 4) /\
    (item_pos[i, 3] + item_dims[i, 3] <= 2 \/ item_pos[i, 3] >= 2)
  );

% Ensure items are within the space dimensions
constraint
  forall(i in 1..3)(
    item_pos[i, 1] + item_dims[i, 1] <= width /\
    item_pos[i, 2] + item_dims[i, 2] <= height /\
    item_pos[i, 3] + item_dims[i, 3] <= depth
  );

% Objective: Find a valid placement
solve satisfy;

output[
  "Item ", show(item_dims[1, 1]), "x", show(item_dims[1, 2]), "x", show(item_dims[1, 3]),
  " in space ", show(item_in_space1[1]), " at position (", show(item_pos[1, 1]), ", ",
  show(item_pos[1, 2]), ", ", show(item_pos[1, 3]), ")", "\n",
  "Item ", show(item_dims[2, 1]), "x", show(item_dims[2, 2]), "x", show(item_dims[2, 3]),
  " in space ", show(item_in_space1[2]), " at position (", show(item_pos[2, 1]), ", ",
  show(item_pos[2, 2]), ", ", show(item_pos[2, 3]), ")", "\n",
  "Item ", show(item_dims[3, 1]), "x", show(item_dims[3, 2]), "x", show(item_dims[3, 3]),
  " in space ", show(item_in_space1[3]), " at position (", show(item_pos[3, 1]), ", ",
  show(item_pos[3, 2]), ", ", show(item_pos[3, 3]), ")"
];

width = 10; % from dzn
height = 10; % from dzn
depth = 10; % from dzn

item_dims = array2d(1..3, 1..3, [4, 4, 4, 4, 2, 2, 2, 5, 2]); % Dimensions of the 3 items, (width, height, depth)
% No need to specify item_in_space1 as item 1 is in space 1 and items 2 and 3 are in space 2
% Variables item_pos are unconstrained to be filled by the model.