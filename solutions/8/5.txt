int: width; % Width of the 3D space\nint: height; % Height of the 3D space\nint: depth; % Depth of the 3D space\n\narray[1..5, 1..3] of int: items; % Dimensions of each item\n\n% Decision variable: placement of each item in the 3D space\narray[1..5, 1..3] of var 0..width: placement;\n\n% Constraints to ensure that items do not intersect\nconstraint\n    forall(i, j in 1..5 where i < j) (\n        (placement[j, 1] > placement[i, 1] + items[i, 1]) \/\n        (placement[i, 1] > placement[j, 1] + items[j, 1]) \/\n        (placement[j, 2] > placement[i, 2] + items[i, 2]) \/\n        (placement[i, 2] > placement[j, 2] + items[j, 2]) \/\n        (placement[j, 3] > placement[i, 3] + items[i, 3]) \/\n        (placement[i, 3] > placement[j, 3] + items[j, 3])\n    );\n\n% Objective: Check if all items can be placed without intersection\nsolve satisfy;

width = 10;\nheight = 10;\ndepth = 10;\n\nitems = array2d(1..5, 1..3, [3, 3, 3, 3, 3, 2, 4, 4, 4, 3, 3, 3, 2, 3, 2]);% Parameters\nint: width_space; % Width of the 3D space\nint: height_space; % Height of the 3D space\nint: depth_space; % Depth of the 3D space\n\narray[1..5, 1..3] of int: item_dimensions; % Dimensions of each item (width, height, depth)\n\n% Touching restrictions: 0 means allowed to touch, 1 means not allowed to touch\narray[1..5, 1..5] of int: touching_restrictions = array2d(1..5, 1..5,\n    [0, 1, 1, 0, 1,\n     1, 0, 1, 1, 0,\n     1, 1, 0, 1, 1,\n     0, 1, 1, 0, 1,\n     1, 0, 1, 1, 0]);\n\n% Decision variables\narray[1..5] of var 1..3: placement_space; % Which space each item is placed in\narray[1..5] of var 0..10: placement_x; % Placement x-coordinate of each item\narray[1..5] of var 0..10: placement_y; % Placement y-coordinate of each item\narray[1..5] of var 0..10: placement_z; % Placement z-coordinate of each item\n\n% Constraints\nconstraint forall(i, j in 1..5 where i < j) (\n    (placement_space[i] != placement_space[j]) \/ % Items in different spaces\n    ((abs(placement_x[i] - placement_x[j]) >= item_dimensions[i, 1] + item_dimensions[j, 1]) \/\n     (abs(placement_y[i] - placement_y[j]) >= item_dimensions[i, 2] + item_dimensions[j, 2]) \/\n     (abs(placement_z[i] - placement_z[j]) >= item_dimensions[i, 3] + item_dimensions[j, 3])) % No intersection\n);\n\nconstraint forall(i, j in 1..5 where touching_restrictions[i, j] = 1) (\n    placement_space[i] != placement_space[j] \/ % Items in different spaces\n    ((abs(placement_x[i] - placement_x[j]) >= item_dimensions[i, 1] + item_dimensions[j, 1]) \/\n     (abs(placement_y[i] - placement_y[j]) >= item_dimensions[i, 2] + item_dimensions[j, 2]) \/\n     (abs(placement_z[i] - placement_z[j]) >= item_dimensions[i, 3] + item_dimensions[j, 3])) % No intersection\n);\n\n% Objective: No objective, just find a feasible solution\nsolve satisfy;\n\n% Output\noutput ["Item " ++ show(i) ++ " in Space " ++ show(placement_space[i]) ++ " at (" ++ show(placement_x[i]) ++ ", " ++ show(placement_y[i]) ++ ", " ++ show(placement_z[i]) ++ ")\n" | i in 1..5];

width_space = 10;\nheight_space = 10;\ndepth_space = 10; % from dzn\n\nitem_dimensions = array2d(1..5, 1..3, [\n  3, 3, 3,\n  3, 3, 2,\n  4, 4, 4,\n  3, 3, 3,\n  2, 3, 2\n]);