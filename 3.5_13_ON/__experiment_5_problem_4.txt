[{"attempt": "0_0", "status": true, "solutions": "Solution(grid=[[4, 5, 11, 14], [9, 16, 2, 7], [6, 3, 13, 12], [15, 10, 8, 1]], _checker='')"}]

Solution(grid=[[4, 5, 11, 14], [9, 16, 2, 7], [6, 3, 13, 12], [15, 10, 8, 1]], _checker='')
___________
int: n = 4;  % Size of the magic square
int: target_sum = n * (n * n + 1) div 2;  % Sum for rows, columns, and diagonals

% Define the grid as a 2D array
array[1..n, 1..n] of var 1..n * n: grid;

% Constraint: All values in the grid must be distinct
constraint all_different(array1d(grid));

% Constraints: Rows and columns sum up to the target sum
constraint
    forall(i in 1..n)(
        sum(j in 1..n)(grid[i, j]) == target_sum /\
        sum(j in 1..n)(grid[j, i]) == target_sum
    );

% Constraints: Diagonals sum up to the target sum
constraint
    sum(i in 1..n)(grid[i, i]) == target_sum /\
    sum(i in 1..n)(grid[i, n - i + 1]) == target_sum;

solve satisfy;

% Output the magic square
output[
    "\nThe magic square is:\n",
    concat([show(grid[i, j]) ++ (if j = n then "\n" else " " endif) | i in 1..n, j in 1..n])
];
___________
n = 4;
==============================