[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "0_1", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "Solution(_checker='')"}]

None
___________
int: pin;

array[1..4] of var 0..9: digits;

constraint all_different(digits);

var 10..99: ab = 10*digits[1] + digits[2];
var 10..99: cd = 10*digits[3] + digits[4];
var 10..99: bc = 10*digits[2] + digits[3];
var 10..99: da = 10*digits[1] + digits[4];

constraint cd == 3*ab;
constraint da == 2*bc;

output["The unique 4-digit pin number is: \(ab)\(bc)\(cd)\(da)"];

solve satisfy;
___________
pin = 0;
==============================None
___________
int: pin_number_abcd;
array[1..4] of var 0..9: pin_digits;

constraint all_different(pin_digits);

var 10..99: ab = 10*pin_digits[1] + pin_digits[2];
var 10..99: cd = 10*pin_digits[3] + pin_digits[4];
var 10..99: bc = 10*pin_digits[2] + pin_digits[3];
var 10..99: da = 10*pin_digits[4] + pin_digits[1];

constraint cd == 3*ab;
constraint da == 2*bc;

output["Pin number: ", pin_number_abcd];

solve satisfy;
___________
pin_number_abcd = 0;
pin_digits = [0, 0, 0, 0];
==============================Solution(_checker='')
___________
```minizinc
int: ab;
int: bc;
int: cd;
int: da;

constraint ab != bc /\ ab != cd /\ ab != da /\ bc != cd /\ bc != da /\ cd != da;
constraint ab * 3 == cd;
constraint da == 2 * bc;

output[ab, bc, cd, da];

solve satisfy;
```
___________
ab = 123;
bc = 456;
cd = 369;
da = 912;
==============================