int: n; % Number of furniture pieces\nint: rows; % Number of rows in the room\nint: cols; % Number of columns in the room\n\n% Compatibility matrix\narray[1..n, 1..n] of int: compatibility;\n\n% Decision variable: position of each furniture piece in the room\narray[1..n] of var 1..rows: pos_row;\narray[1..n] of var 1..cols: pos_col;\n\n% Constraint to ensure that each pair of furniture pieces satisfies the compatibility matrix\nconstraint\n  forall(i, j in 1..n where i < j) (\n    if compatibility[i, j] == 0 then\n      abs(pos_row[i] - pos_row[j]) + abs(pos_col[i] - pos_col[j]) > 1\n    elseif compatibility[i, j] == 2 then\n      abs(pos_row[i] - pos_row[j]) + abs(pos_col[i] - pos_col[j]) == 1\n    else\n      true\n    endif\n  );\n\nsolve satisfy;\n\n% Output the positions of each furniture piece\noutput ["Positions: " ++ show([pos_row[i], pos_col[i] | i in 1..n])];

n = 4; % Number of furniture pieces\nrows = 3; % Number of rows in the room\ncols = 3; % Number of columns in the room\n\n% Compatibility matrix\ncompatibility = array2d(1..n, 1..n, [\n  1, 2, 0, 1,\n  2, 1, 1, 0,\n  0, 1, 1, 2,\n  1, 0, 2, 1\n]);