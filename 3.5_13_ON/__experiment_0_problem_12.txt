[{"attempt": "0_0", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "None"}, {"attempt": "2_0", "status": true, "solutions": "None"}, {"attempt": "2_2", "status": true, "solutions": "None"}]

None
___________
int: n;
int: m1;
int: m2;

array[1..n] of var 0..1: steps;

constraint sum(i in 1..n) (steps[i]) = n;

constraint forall(i in 1..n-1) (
    (steps[i] = 1 /\ steps[i+1] = 0) \/ 
    (steps[i] = m1 /\ steps[i+1] = 0) \/ 
    (steps[i] = m2 /\ steps[i+1] = 0) \/ 
    (steps[i] = m1 /\ steps[i+1] = m2)
);

output["Number of ways to climb the stair: ", sum(i in 1..n) (steps[i])];

solve satisfy;
___________
n = 20;
m1 = 3;
m2 = 5;
==============================None
___________
int: n;
int: m1;
int: m2;

array[1..n] of var 0..1: steps;

constraint forall(i in 1..n-1)(
    steps[i]*m1 + steps[i+1]*m2 > 0
);

output["Number of ways to climb the stair: \(sum(steps)]";

solve satisfy;
___________
n = 20;
m1 = 3;
m2 = 5;
==============================None
___________
int: n;
int: m1;
int: m2;

array[1..n] of var 0..n: ways;

constraint forall(i in 1..n)(
    ways[i] = sum(j in 1..2 where j <= i)(ways[i-j])
);

constraint ways[1] = 1;
constraint ways[m1] = 1 + (m1 == m2);
constraint ways[m2] = 1 + (m1 == m2);

output["Number of ways to climb the stair: \(ways[n])"];

solve satisfy;
___________
n = 20;
m1 = 3;
m2 = 5;
==============================None
___________
int: n; % from dzn
int: m1; % from dzn
int: m2; % from dzn

array[1..n] of var 0..1: steps;

constraint forall(i in 1..n-1)(
    steps[i]*m1 + steps[i+1]*m2 > 0
);

var int: num_ways = sum(i in 1..n-1)(steps[i]*m1 + steps[i+1]*m2);

output [num_ways];

solve satisfy;
___________
n = 20;
m1 = 3;
m2 = 5;
==============================