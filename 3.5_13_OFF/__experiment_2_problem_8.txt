[{"attempt": "0_1", "status": true, "solutions": "None"}, {"attempt": "1_0", "status": true, "solutions": "None"}, {"attempt": "1_2", "status": true, "solutions": "Solution(ChildCountry=[2, 1, 3, 1, 1], ChildStory=[1, 1, 4, 3, 1], _checker='')"}]

None
___________
% Generate the association of each child with their age, country, and story
% Age: {Bernice, Carl, Debby, Sammy, Ted}
% Country: {Ethiopia, Kazakhstan, Lithuania, Morocco, Yemen}
% Story: {Burning Bush, Captivity, Moses's Youth, Passover, Ten Commandments}

int: n = 5; % Number of children
array[1..n] of var 1..n: age; % age[i] represents the child's age
array[1..n] of var 1..n: country; % country[i] represents the child's country
array[1..n] of var 1..n: story; % story[i] represents the child's story

% Constraints

% 1. Debby is from Lithuania.
constraint age[3] = 3 /\ country[3] = 3;

% 2. Passover child is 2 years older than Bernice.
constraint age[4] = age[1] + 2 /\ story[4] = 4;

% 3. Yemen child is younger than Ethiopia child.
constraint country[5] = 5 /\ country[1] = 1;

% 4. Morocco child is 3 years older than Ted.
constraint age[5] = age[2] + 3 /\ country[5] = 4;

% 5. Sammy is 3 years older than Moses's Youth child.
constraint age[2] = age[3] /\ story[2] = 3;

solve satisfy;

% Output the associations
output["Bernice: " ++ show(age[1]) ++ " years old, from " ++ show(country[1]) ++ ", in the story of " ++ show(story[1]) ++ "\n"];
output["Carl: " ++ show(age[2]) ++ " years old, from " ++ show(country[2]) ++ ", in the story of " ++ show(story[2]) ++ "\n"];
output["Debby: " ++ show(age[3]) ++ " years old, from " ++ show(country[3]) ++ ", in the story of " ++ show(story[3]) ++ "\n"];
output["Sammy: " ++ show(age[4]) ++ " years old, from " ++ show(country[4]) ++ ", in the story of " ++ show(story[4]) ++ "\n"];
output["Ted: " ++ show(age[5]) ++ " years old, from " ++ show(country[5]) ++ ", in the story of " ++ show(story[5]) ++ "\n"];
___________
% Bernice, Carl, Debby, Sammy, Ted
age = [0, 0, 0, 0, 0];

% Ethiopia, Kazakhstan, Lithuania, Morocco, Yemen
country = [0, 0, 0, 0, 0];

% Burning Bush, Captivity, Moses's Youth, Passover, Ten Commandments
story = [0, 0, 0, 0, 0];
==============================None
___________
% Define the ages, countries, and stories
set of int: Age = 1..5;  % {Bernice, Carl, Debby, Sammy, Ted}
set of int: Country = 1..5;  % {Ethiopia, Kazakhstan, Lithuania, Morocco, Yemen}
set of int: Story = 1..5;  % {Burning Bush, Captivity, Moses's Youth, Passover, Ten Commandments}

% Define the variables to represent the associations
array[Age] of var Story: association;

% Constraints
constraint association[3] == 3;  % Debby is from Lithuania (3)
constraint association[4] - association[1] == 1;  % Passover child is 2 years older than Bernice (2)
constraint association[5] < association[1];  % Yemen child is younger than Ethiopia child (1)
constraint association[4] - association[5] == 3;  % Morocco child is 3 years older than Ted (4)
constraint association[4] - association[3] == 3;  % Sammy is 3 years older than Moses's Youth child (5)

% Get the associations for each child
solve satisfy;

% Output
output["Bernice: " ++ show(association[1]) ++ "\n"];
output["Carl: " ++ show(association[2]) ++ "\n"];
output["Debby: " ++ show(association[3]) ++ "\n"];
output["Sammy: " ++ show(association[4]) ++ "\n"];
output["Ted: " ++ show(association[5]) ++ "\n"];
___________
Age = 1..5; % {Bernice, Carl, Debby, Sammy, Ted}

Country = 1..5; % {Ethiopia, Kazakhstan, Lithuania, Morocco, Yemen}

Story = 1..5; % {Burning Bush, Captivity, Moses's Youth, Passover, Ten Commandments}
==============================Solution(ChildCountry=[2, 1, 3, 1, 1], ChildStory=[1, 1, 4, 3, 1], _checker='')
___________
% Parameters
set of int: Age = 1..5; % from dzn
set of int: Country = 1..5; % from dzn
set of int: Story = 1..5; % from dzn

% Variables
array[Age] of var Country: ChildCountry; % mapping child to country
array[Age] of var Story: ChildStory; % mapping child to story

% Constraints
constraint ChildCountry[3] = 3; % Debby is from Lithuania
constraint ChildStory[4] = ChildStory[1] + 2; % Passover child is 2 years older than Bernice
constraint ChildCountry[5] < ChildCountry[1]; % Yemen child is younger than Ethiopia child
constraint ChildCountry[4] = ChildCountry[5]; % Morocco child is 3 years older than Ted
constraint ChildStory[2] = ChildStory[3] - 3; % Sammy is 3 years older than Moses's Youth child

% Output
solve satisfy;

% Print the results
output["Bernice is from " ++ show(ChildCountry[1]) ++ " and relates to " ++ show(ChildStory[1]) ++ "\n"];
output["Carl is from " ++ show(ChildCountry[2]) ++ " and relates to " ++ show(ChildStory[2]) ++ "\n"];
output["Debby is from " ++ show(ChildCountry[3]) ++ " and relates to " ++ show(ChildStory[3]) ++ "\n"];
output["Sammy is from " ++ show(ChildCountry[4]) ++ " and relates to " ++ show(ChildStory[4]) ++ "\n"];
output["Ted is from " ++ show(ChildCountry[5]) ++ " and relates to " ++ show(ChildStory[5]) ++ "\n"];
___________
Age = 1..5;  % Values assigned based on the given task
Country = 1..5; % Values assigned based on the given task
Story = 1..5;  % Values assigned based on the given task
==============================