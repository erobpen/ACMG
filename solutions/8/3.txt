int: n;  % Number of classrooms\nint: m;  % Maximum hours each classroom can be used per day\nint: k;  % Number of classes\nint: z;  % Maximum number of subjects a class can have per week\n\n% Define the subject matrix\narray[1..k, 1..4] of var 0..5: subjectMatrix;  % Given that the maximum sessions per week is 5\n\n% Constraints: One classroom per class per hour, and maximum hours per day\nconstraint\n    forall(d in 1..5) (  % 5 days in the week\n        sum(c in 1..n, p in 1..k)(if subjectMatrix[p, c] > 0 then 1 else 0 endif) <= m\n    );  % Maximum m hours per day\n\n% Objective: Balance the schedule across the week\nsolve satisfy;\n\n% Output the schedule\noutput [\n    "Classroom Schedule:\n" \n] ++\n[\n    "Day ", show(d), ":\n"\n    | d in 1..5\n] ++\n[\n    "Class ", show(p), " in Classroom ", show(c), ": ", show(subjectMatrix[p, c]), " sessions\n"\n    | c in 1..n, p in 1..k\n];

n = 3;\nm = 3;  % Maximum hours per classroom per day\nk = 4;  % Number of classes\nz = 4;  % Maximum subjects per class per week\n\n% Matrix of session quantities\n% Rows: Classes (1-4)\n% Columns: Subjects A, B, C, D\n\n% Each entry represents the number of sessions needed for that class in that subject\n\nsubjectMatrix = array2d(1..k, 1..4, [\n    2, 2, 1, 3,\n    1, 4, 3, 4,\n    1, 2, 4, 5,\n    4, 2, 3, 6\n]);