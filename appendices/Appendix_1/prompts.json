{"assess_user_input": "For the following text, state what does it contain (task, model, both or nothing). Model is a textual description of \nthe rules of a specific type of a problem, task is the input data for some problem type, and in the task, there is usually only input information without the description of the problem rules. If the text contains both the input data for some problem type and the description of it's rules, then it contains both a task, and the model. If none of the elements are present in the text, then nothing is contained in it, neither the model, nor the task. Generate one of the following words: Task, Model, Both, None, and do not generate anything else.\n\nText:\n{input}", "generate_again": "Correct the generated Mini-Zinc model, based on the textual model description, extracted semantic entities and the provided warnings from the minizinc compiler.\nUse the warnings from the minizinc compiler to correct the mistakes made in the previously generated minizinc model.\nReturn only the generated minizinc model without any additional text. And make the minizinc code print the results with the output[] statement. Very important: in the created model, leave all input parameters that are supposed to be given as inputs unassigned and write a comment next to them that says % from dzn (for example, if an input parameter would be: (int: a = 10;), leave it unassigned like this: (int: a; % from dzn) so that the values can be filled through a dzn file later).\n\nTextual model description:\n{model}\n\n\nSemantic entities extracted:\n{recognized}\n\nWarnings:\n{warnings}\n\n", "generate": "Generate a MiniZinc model, based on the textual model description and the extracted semantic entities.\nReturn only the generated MiniZinc model without any additional text. And make the MiniZinc code print the results with the output[] statement. Also in the created model, leave all input parameters that are supposed to be given as inputs unassigned (for example, if an input parameter would be: (int: a = 10;), leave it unassigned like this: (int: a;) so that the values can be filled through a dzn file later).\n\nTextual model description:\n{model}\n\nSemantic entities extracted:\n{recognized}", "recognize": "From the given text, extract the following semantic entities: Input parameters, Constraints, Relations between parameters.\n\nText:\n{input}", "RFS_new": "Based on the given minizinc model, reformat the task into input data to be witten\nin a data.dzn file which will be used by the given model when solving the modeled problem. Create the .dzn file based on the unassigned input parameters that are not assigned values in the minizinc model. Please return only the contents of the file, without any additional text.\n\nInput task:\n{input}\n\nMinizinc model:\n{model}\n\nContents of the data.dzn file:", "CFS": "Based on the given input, classify the task as one of the following tasks : \nText:\n{input}\n\n{stored_models}\n\nGenerate the output based on the given task. If the input cannot be classified as either of types of tasks, print only the word 'false'", "name_model": "Based on the problem description, assign a name to the problem type,\nwhich will be used to store a model for solving this type of problems.\n\nPrint only the assigned name, and nothing else. \nProblem description: {input}", "both": "Divide the given problem description into two parts. A part which contains the elements needed to solve the problem, or the input values to that problem type, and the other part should contain the description, rules and information on how to solve that specific type of problem. The two parts can have same elements of the input in them. Return your response in this format: Task: 'Your extracted task text' \n\nModel: 'Your extracted model text'.\n\nText:\n{input}"}