{"assess_user_input": "For the following text, state what does it contain (task, model, both or nothing). Model is a textual description of \nthe rules of a specific type of a problem, task is the input data for some problem type, and in the task, there is usually only input information without the description of the problem rules. If the text contains both the input data for some problem type and the description of it's rules, then it contains both a task, and the model. If none of the elements are present in the text, then nothing is contained in it, neither the model, nor the task. Generate one of the following words: Task, Model, Both, None, and do not generate anything else.\n\nText:\n{input}", "generate_again": "Correct the generated Mini-Zinc model, based on the textual model description, extracted semantic entities and the provided warnings from the minizinc compiler. If needed put the 'solve satisfy' statement in the code.\nUse the warnings from the minizinc compiler to correct the mistakes made in the previously generated minizinc model.\nReturn only the generated minizinc model without any additional text. And make the minizinc code print the results with the output[] statement. Very important: in the created model, leave all input parameters that are supposed to be given as inputs unassigned and write a comment next to them that says % from dzn (for example, if an input parameter would be: (int: a = 10;), leave it unassigned like this: (int: a; % from dzn) so that the values can be filled through a dzn file later).\n\nTextual model description:\n{model}\n\n\nSemantic entities extracted:\n{recognized}\n\nWarnings:\n{warnings}\n\n", "generate": "Generate a MiniZinc model, based on the textual model description and the extracted semantic entities.\nReturn only the generated MiniZinc model without any additional text. And make the MiniZinc code print the results with the output[] statement. If needed put the 'solve satisfy;' statement in the code. Also in the created model, leave all input parameters that are supposed to be given as inputs unassigned (for example, if an input parameter would be: (int: a = 10;), leave it unassigned like this: (int: a;) so that the values can be filled through a dzn file later).\n\nTextual model description:\n{model}\n\nSemantic entities extracted:\n{recognized}", "recognize": "From the given text, extract the following semantic entities: Input parameters, Constraints, Relations between parameters.\n\nText:\n{input}", "input_preparation": "Based on the given minizinc model, reformat the task into input data to be witten\nin a data.dzn file which will be used by the given model when solving the modeled problem. Create the .dzn file based on the unassigned input parameters that are not assigned values in the minizinc model. Please return only the contents of the file, without any additional text.\n\nInput task:\n{input}\n\nMinizinc model:\n{model}\n\nContents of the data.dzn file:", "classify_model": "Based on the given input, classify the task as one of the following tasks : \nText:\n{input}\n\n{stored_models}\n\nGenerate the output based on the given task. If the input cannot be classified as either of types of tasks, print only the word 'false'", "name_model": "Based on the problem description, assign a name to the problem type,\nwhich will be used to store a model for solving this type of problems.\n\nPrint only the assigned name, and nothing else. \nProblem description: {input}", "both": "Divide the given problem description into two parts. A part which contains the elements needed to solve the problem, or the input values to that problem type, and the other part should contain the description, rules and information on how to solve that specific type of problem. The two parts can have same elements of the input in them. Return your response in this format: Task: 'Your extracted task text' \n\nModel: 'Your extracted model text'.\n\nText:\n{input}", "G24_SCD": {"T": 3, "b": 1, "id": "g24_scd", "peers": {"A1": ["A2", "A3"], "A2": ["A1", "A3"], "A3": ["A1", "A2"]}, "variables": ["A1", "A2", "A3"]}, "sudoku_9_SCD": {"T": 81, "b": 5, "id": "sudoku_9_scd", "peers": {"A1": ["C2", "G1", "A6", "C1", "A5", "A7", "A9", "E1", "I1", "B3", "C3", "B1", "F1", "A2", "D1", "H1", "A4", "A3", "A8", "B2"], "A2": ["C2", "A6", "C1", "A5", "A7", "A9", "H2", "B3", "C3", "I2", "B1", "A1", "D2", "F2", "A4", "A3", "E2", "G2", "A8", "B2"], "A3": ["C2", "A6", "C1", "E3", "A5", "A7", "A9", "I3", "G3", "B3", "C3", "B1", "A1", "A2", "H3", "F3", "A4", "D3", "A8", "B2"], "A4": ["C5", "A6", "A5", "B5", "F4", "A7", "C4", "A9", "H4", "D4", "B6", "A1", "A2", "I4", "B4", "E4", "G4", "C6", "A3", "A8"], "A5": ["F5", "C5", "E5", "A6", "G5", "B5", "A7", "H5", "C4", "A9", "B6", "A1", "A4", "A2", "B4", "I5", "C6", "D5", "A3", "A8"], "A6": ["C5", "H6", "A5", "B5", "A7", "D6", "C4", "A9", "F6", "B6", "A1", "A2", "B4", "G6", "E6", "I6", "C6", "A4", "A3", "A8"], "A7": ["C7", "D7", "A6", "B9", "A5", "C8", "A9", "G7", "C9", "I7", "A1", "B7", "F7", "A2", "H7", "B8", "A4", "A3", "E7", "A8"], "A8": ["C7", "G8", "F8", "A6", "B9", "A5", "H8", "C8", "A7", "A9", "C9", "A1", "B7", "A4", "D8", "A2", "E8", "B8", "I8", "A3"], "A9": ["E9", "C7", "F9", "A6", "B9", "A5", "A7", "C8", "C9", "A1", "B7", "A2", "G9", "D9", "I9", "B8", "H9", "A4", "A3", "A8"], "B1": ["C2", "G1", "B9", "C1", "B5", "E1", "I1", "B3", "C3", "B6", "A1", "B7", "F1", "A2", "B4", "D1", "H1", "B8", "A3", "B2"], "B2": ["C2", "B9", "C1", "B5", "H2", "B3", "C3", "B6", "B1", "A1", "I2", "B7", "A2", "B4", "D2", "B8", "F2", "A3", "E2", "G2"], "B3": ["C2", "A3", "B9", "C1", "E3", "B5", "I3", "G3", "C3", "B6", "B1", "A1", "B7", "A2", "H3", "B4", "F3", "B8", "D3", "B2"], "B4": ["C5", "A6", "B9", "A5", "B5", "F4", "C4", "H4", "B3", "D4", "B1", "B6", "B7", "I4", "E4", "G4", "B8", "C6", "A4", "B2"], "B5": ["F5", "C5", "E5", "A6", "B9", "G5", "A5", "H5", "C4", "B3", "B6", "B1", "B7", "A4", "B4", "I5", "B8", "C6", "D5", "B2"], "B6": ["C5", "A6", "B9", "H6", "A5", "B5", "D6", "C4", "F6", "B3", "B1", "B7", "B4", "G6", "E6", "B8", "I6", "C6", "A4", "B2"], "B7": ["C7", "D7", "B9", "B5", "A7", "C8", "A9", "G7", "C9", "B3", "B6", "B1", "I7", "F7", "H7", "B4", "B8", "E7", "A8", "B2"], "B8": ["C7", "G8", "F8", "B9", "H8", "B5", "C8", "A7", "A9", "C9", "B3", "B6", "B1", "B7", "D8", "B4", "E8", "I8", "A8", "B2"], "B9": ["E9", "C7", "F9", "B5", "A7", "C8", "A9", "C9", "B3", "B6", "B1", "B7", "B4", "G9", "D9", "I9", "B8", "H9", "A8", "B2"], "C1": ["C5", "C7", "C2", "G1", "C8", "C4", "C9", "E1", "I1", "B3", "C3", "B1", "A1", "F1", "A2", "D1", "H1", "C6", "A3", "B2"], "C2": ["C5", "C7", "C1", "C8", "C4", "H2", "C9", "B3", "C3", "I2", "B1", "A1", "A2", "D2", "F2", "C6", "A3", "E2", "G2", "B2"], "C3": ["C5", "C7", "C2", "A3", "C1", "E3", "C8", "C4", "I3", "G3", "C9", "B3", "B1", "A1", "A2", "H3", "F3", "C6", "D3", "B2"], "C4": ["C5", "C7", "C2", "A6", "C1", "A5", "B5", "F4", "C8", "C9", "H4", "C3", "D4", "B6", "I4", "B4", "E4", "G4", "C6", "A4"], "C5": ["F5", "C7", "C2", "E5", "A6", "G5", "C1", "A5", "B5", "C8", "H5", "C4", "C9", "C3", "B6", "A4", "B4", "I5", "C6", "D5"], "C6": ["C5", "C7", "C2", "A6", "C1", "H6", "A5", "B5", "C8", "D6", "C4", "F6", "C9", "C3", "B6", "B4", "G6", "E6", "I6", "A4"], "C7": ["C5", "D7", "C2", "B9", "C1", "A7", "C8", "C4", "A9", "G7", "C9", "C3", "I7", "B7", "F7", "H7", "B8", "C6", "E7", "A8"], "C8": ["C5", "C7", "C2", "G8", "F8", "B9", "C1", "H8", "A7", "C4", "A9", "C9", "C3", "B7", "D8", "E8", "B8", "C6", "I8", "A8"], "C9": ["E9", "C5", "C7", "C2", "F9", "B9", "C1", "C8", "A7", "C4", "A9", "C3", "B7", "G9", "D9", "I9", "B8", "H9", "C6", "A8"], "D1": ["D7", "G1", "C1", "E3", "D6", "E1", "I1", "D4", "B1", "A1", "F1", "D8", "D2", "D9", "F3", "H1", "F2", "D5", "D3", "E2"], "D2": ["D7", "C2", "E3", "D6", "H2", "E1", "D4", "I2", "F1", "A2", "D8", "D9", "D1", "F3", "F2", "D5", "D3", "E2", "G2", "B2"], "D3": ["D7", "A3", "E3", "D6", "I3", "G3", "E1", "B3", "D4", "C3", "F1", "D8", "H3", "D2", "D9", "D1", "F3", "F2", "D5", "E2"], "D4": ["F5", "D7", "E5", "F4", "D6", "C4", "F6", "H4", "A4", "D8", "I4", "B4", "D2", "G4", "D1", "E4", "D9", "E6", "D5", "D3"], "D5": ["F5", "C5", "D7", "E5", "G5", "A5", "B5", "F4", "H5", "D6", "F6", "D4", "D8", "D2", "D9", "D1", "E4", "I5", "E6", "D3"], "D6": ["F5", "D7", "E5", "A6", "H6", "F4", "F6", "D4", "B6", "D8", "D2", "G6", "D1", "D9", "E4", "E6", "I6", "C6", "D5", "D3"], "D7": ["E9", "C7", "F9", "F8", "A7", "D6", "G7", "D4", "I7", "B7", "F7", "D8", "H7", "D2", "D9", "D1", "E8", "D5", "D3", "E7"], "D8": ["E9", "D7", "F9", "G8", "F8", "H8", "C8", "D6", "D4", "F7", "D2", "E8", "D1", "D9", "B8", "I8", "D5", "D3", "E7", "A8"], "D9": ["E9", "D7", "F9", "F8", "B9", "D6", "A9", "C9", "D4", "F7", "D8", "G9", "D2", "D1", "I9", "E8", "H9", "D5", "D3", "E7"], "E1": ["E9", "E5", "G1", "C1", "E3", "I1", "B1", "A1", "F1", "D2", "E4", "D1", "E8", "H1", "E6", "F3", "F2", "D3", "E2", "E7"], "E2": ["E9", "C2", "E5", "E3", "H2", "E1", "I2", "F1", "A2", "G2", "D2", "E4", "D1", "E8", "E6", "F3", "F2", "D3", "E7", "B2"], "E3": ["E9", "E5", "A3", "I3", "G3", "E1", "B3", "C3", "F1", "H3", "D2", "E4", "D1", "E8", "F3", "E6", "F2", "D3", "E2", "E7"], "E4": ["F5", "E9", "E5", "E3", "F4", "D6", "C4", "F6", "E1", "H4", "D4", "A4", "I4", "B4", "G4", "E8", "E6", "D5", "E2", "E7"], "E5": ["F5", "E9", "C5", "G5", "A5", "E3", "B5", "F4", "H5", "D6", "F6", "E1", "D4", "E4", "E8", "I5", "E6", "D5", "E2", "E7"], "E6": ["F5", "E9", "E5", "A6", "H6", "E3", "F4", "D6", "F6", "E1", "D4", "B6", "E4", "G6", "E8", "I6", "C6", "D5", "E2", "E7"], "E7": ["E9", "C7", "D7", "E5", "F9", "F8", "E3", "A7", "G7", "E1", "I7", "B7", "F7", "D8", "H7", "E4", "E8", "E6", "D9", "E2"], "E8": ["E9", "D7", "E5", "F9", "G8", "F8", "E3", "H8", "C8", "E1", "F7", "D8", "E4", "E6", "D9", "B8", "I8", "E2", "E7", "A8"], "E9": ["D7", "E5", "F9", "F8", "B9", "E3", "A9", "C9", "E1", "F7", "D8", "G9", "D9", "I9", "E4", "E6", "E8", "H9", "E2", "E7"], "F1": ["F5", "F9", "F8", "G1", "C1", "E3", "F4", "F6", "E1", "I1", "B1", "A1", "F7", "D2", "D1", "F3", "H1", "F2", "D3", "E2"], "F2": ["F5", "C2", "F9", "F8", "E3", "F4", "F6", "H2", "E1", "I2", "F7", "A2", "F1", "D2", "D1", "F3", "D3", "E2", "G2", "B2"], "F3": ["F5", "F9", "F8", "A3", "E3", "F4", "I3", "G3", "F6", "E1", "B3", "C3", "F7", "F1", "H3", "D2", "D1", "F2", "D3", "E2"], "F4": ["F5", "E5", "F9", "F8", "D6", "C4", "F6", "H4", "D4", "A4", "F7", "F1", "I4", "B4", "E4", "G4", "F3", "E6", "F2", "D5"], "F5": ["C5", "E5", "F9", "F8", "G5", "A5", "B5", "F4", "H5", "D6", "F6", "D4", "F7", "F1", "E4", "I5", "F3", "E6", "F2", "D5"], "F6": ["F5", "E5", "F9", "F8", "A6", "H6", "F4", "D6", "D4", "B6", "F7", "F1", "E4", "G6", "E6", "F3", "I6", "F2", "C6", "D5"], "F7": ["F5", "E9", "C7", "D7", "F9", "F8", "F4", "A7", "G7", "F6", "I7", "B7", "D8", "F1", "H7", "D9", "E8", "F3", "F2", "E7"], "F8": ["F5", "E9", "D7", "F9", "G8", "H8", "F4", "C8", "F6", "F7", "D8", "F1", "E8", "D9", "F3", "B8", "F2", "I8", "E7", "A8"], "F9": ["F5", "E9", "D7", "F8", "B9", "F4", "A9", "F6", "C9", "F7", "D8", "F1", "G9", "D9", "I9", "F3", "E8", "F2", "H9", "E7"], "G1": ["G8", "C1", "G5", "G7", "G3", "H2", "E1", "I1", "I3", "I2", "B1", "A1", "F1", "H3", "G9", "G4", "D1", "G6", "H1", "G2"], "G2": ["C2", "G8", "G1", "G5", "G7", "G3", "H2", "I3", "I1", "I2", "A2", "H3", "D2", "G4", "G6", "G9", "H1", "F2", "E2", "B2"], "G3": ["G8", "G1", "A3", "G5", "E3", "I3", "G7", "H2", "I1", "B3", "C3", "I2", "H3", "G9", "G4", "G6", "F3", "H1", "D3", "G2"], "G4": ["G8", "G1", "G5", "H6", "F4", "H5", "C4", "G7", "G3", "H4", "D4", "I4", "B4", "G9", "G6", "E4", "I5", "I6", "A4", "G2"], "G5": ["F5", "C5", "E5", "G8", "G1", "A5", "H6", "B5", "H5", "G7", "G3", "H4", "I4", "G9", "G4", "G6", "I5", "I6", "D5", "G2"], "G6": ["G8", "G1", "A6", "G5", "H6", "H5", "D6", "G7", "G3", "F6", "H4", "B6", "I4", "G9", "G4", "E6", "I5", "I6", "C6", "G2"], "G7": ["C7", "D7", "G8", "E7", "G1", "G5", "H8", "A7", "G3", "I7", "B7", "F7", "H7", "G9", "G4", "G6", "I9", "H9", "I8", "G2"], "G8": ["F8", "G1", "G5", "H8", "C8", "G7", "G3", "I7", "D8", "H7", "G9", "G4", "G6", "E8", "B8", "I9", "H9", "I8", "G2", "A8"], "G9": ["E9", "F9", "G8", "G1", "B9", "G5", "H8", "G3", "G7", "A9", "C9", "I7", "H7", "G4", "G6", "D9", "I9", "H9", "I8", "G2"], "H1": ["G1", "C1", "H6", "H8", "H5", "G3", "I3", "H2", "E1", "I1", "H4", "I2", "B1", "A1", "F1", "H7", "H3", "D1", "H9", "G2"], "H2": ["C2", "G1", "H6", "H8", "H5", "G3", "I3", "I1", "H4", "I2", "A2", "H7", "H3", "D2", "H1", "F2", "H9", "E2", "G2", "B2"], "H3": ["G1", "A3", "E3", "H6", "H8", "H5", "I3", "G3", "H2", "I1", "H4", "B3", "C3", "I2", "H7", "F3", "H1", "H9", "D3", "G2"], "H4": ["G5", "H6", "H8", "F4", "H5", "C4", "H2", "D4", "H7", "I4", "B4", "E4", "G4", "G6", "H3", "H1", "I5", "I6", "H9", "A4"], "H5": ["F5", "C5", "E5", "G5", "A5", "H6", "H8", "B5", "H2", "H4", "H7", "I4", "H3", "G4", "G6", "I5", "H1", "I6", "H9", "D5"], "H6": ["A6", "G5", "H8", "H5", "D6", "F6", "H2", "H4", "B6", "H7", "I4", "H3", "G4", "G6", "E6", "H1", "I5", "I6", "H9", "C6"], "H7": ["C7", "D7", "G8", "H6", "H8", "A7", "H5", "G7", "H2", "H4", "I7", "B7", "F7", "H3", "G9", "I9", "H1", "H9", "I8", "E7"], "H8": ["G8", "F8", "H6", "C8", "H5", "G7", "H2", "H4", "I7", "D8", "H7", "H3", "G9", "E8", "I9", "B8", "H1", "H9", "I8", "A8"], "H9": ["E9", "F9", "G8", "B9", "H6", "H8", "H5", "G7", "A9", "H2", "C9", "H4", "I7", "H7", "H3", "G9", "D9", "I9", "H1", "I8"], "I1": ["G1", "C1", "G3", "I3", "H2", "E1", "I2", "B1", "A1", "I7", "F1", "I4", "H3", "I9", "D1", "I5", "H1", "I6", "I8", "G2"], "I2": ["C2", "G1", "G3", "I3", "H2", "I1", "I7", "A2", "I4", "H3", "D2", "I9", "I5", "H1", "I6", "F2", "I8", "E2", "G2", "B2"], "I3": ["G1", "A3", "E3", "G3", "H2", "I1", "B3", "C3", "I2", "I7", "I4", "H3", "I9", "F3", "I5", "H1", "I6", "I8", "D3", "G2"], "I4": ["G5", "H6", "F4", "H5", "C4", "I3", "I1", "H4", "D4", "I2", "I7", "A4", "B4", "E4", "G4", "G6", "I9", "I5", "I6", "I8"], "I5": ["F5", "C5", "E5", "D5", "G5", "A5", "H6", "B5", "H5", "I3", "I1", "H4", "I2", "I7", "I4", "G4", "G6", "I9", "I6", "I8"], "I6": ["A6", "G5", "H6", "H5", "D6", "I3", "F6", "I1", "H4", "B6", "I2", "I7", "I4", "G4", "G6", "I9", "E6", "I5", "C6", "I8"], "I7": ["C7", "D7", "G8", "H8", "A7", "G7", "I3", "I1", "I2", "B7", "F7", "H7", "I4", "G9", "I9", "I5", "I6", "H9", "I8", "E7"], "I8": ["G8", "F8", "H8", "C8", "G7", "I3", "I1", "I2", "I7", "D8", "H7", "I4", "G9", "E8", "I9", "I5", "B8", "I6", "H9", "A8"], "I9": ["E9", "F9", "G8", "B9", "H8", "G7", "A9", "C9", "I3", "I1", "I2", "I7", "H7", "I4", "G9", "D9", "I5", "I6", "H9", "I8"]}, "variables": ["A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "I1", "I2", "I3", "I4", "I5", "I6", "I7", "I8", "I9"], "domains": {"A1": "123456789", "A2": "123456789", "A3": "123456789", "A4": "123456789", "A5": "123456789", "A6": "123456789", "A7": "123456789", "A8": "123456789", "A9": "123456789", "B1": "123456789", "B2": "123456789", "B3": "123456789", "B4": "123456789", "B5": "123456789", "B6": "123456789", "B7": "123456789", "B8": "123456789", "B9": "123456789", "C1": "123456789", "C2": "123456789", "C3": "123456789", "C4": "123456789", "C5": "123456789", "C6": "123456789", "C7": "123456789", "C8": "123456789", "C9": "123456789", "D1": "123456789", "D2": "123456789", "D3": "123456789", "D4": "123456789", "D5": "123456789", "D6": "123456789", "D7": "123456789", "D8": "123456789", "D9": "123456789", "E1": "123456789", "E2": "123456789", "E3": "123456789", "E4": "123456789", "E5": "123456789", "E6": "123456789", "E7": "123456789", "E8": "123456789", "E9": "123456789", "F1": "123456789", "F2": "123456789", "F3": "123456789", "F4": "123456789", "F5": "123456789", "F6": "123456789", "F7": "123456789", "F8": "123456789", "F9": "123456789", "G1": "123456789", "G2": "123456789", "G3": "123456789", "G4": "123456789", "G5": "123456789", "G6": "123456789", "G7": "123456789", "G8": "123456789", "G9": "123456789", "H1": "123456789", "H2": "123456789", "H3": "123456789", "H4": "123456789", "H5": "123456789", "H6": "123456789", "H7": "123456789", "H8": "123456789", "H9": "123456789", "I1": "123456789", "I2": "123456789", "I3": "123456789", "I4": "123456789", "I5": "123456789", "I6": "123456789", "I7": "123456789", "I8": "123456789", "I9": "123456789"}}, "sudoku_6_SCD": {"peers": {"A1": ["A5", "A4", "A6", "E1", "B1", "B3", "B2", "A2", "C1", "A3", "D1", "F1"], "A2": ["F2", "A5", "A4", "A6", "D2", "B1", "B3", "B2", "C2", "E2", "A3", "A1"], "A3": ["A5", "A4", "E3", "A6", "B1", "D3", "B3", "C3", "B2", "F3", "A2", "A1"], "A4": ["A5", "A6", "F4", "D4", "B4", "A2", "A3", "B6", "C4", "A1", "E4", "B5"], "A5": ["A4", "A6", "E5", "B4", "F5", "A2", "C5", "D5", "A3", "B6", "A1", "B5"], "A6": ["A5", "A4", "C6", "B4", "D6", "E6", "A2", "B6", "A3", "F6", "A1", "B5"], "B1": ["E1", "B3", "B4", "B2", "A2", "C1", "A3", "D1", "B6", "A1", "B5", "F1"], "B2": ["F2", "D2", "B1", "B3", "B4", "C2", "A2", "B6", "E2", "A3", "A1", "B5"], "B3": ["E3", "C3", "D3", "B1", "B4", "B2", "F3", "A2", "B6", "A3", "A1", "B5"], "B4": ["A5", "A4", "A6", "B1", "F4", "B3", "D4", "B2", "B6", "C4", "E4", "B5"], "B5": ["A5", "A4", "A6", "E5", "B1", "B3", "B4", "F5", "B2", "C5", "D5", "B6"], "B6": ["A5", "A4", "C6", "A6", "B1", "B3", "B4", "D6", "E6", "B2", "F6", "B5"], "C1": ["C6", "E1", "D2", "B1", "D3", "C3", "C2", "C5", "D1", "C4", "A1", "F1"], "C2": ["F2", "C6", "D2", "C3", "D3", "B2", "A2", "C1", "C5", "E2", "C4", "D1"], "C3": ["E3", "C6", "D2", "D3", "B3", "C2", "F3", "C1", "C5", "A3", "C4", "D1"], "C4": ["A4", "C6", "C3", "F4", "D4", "B4", "D6", "C2", "C1", "C5", "D5", "E4"], "C5": ["A5", "C6", "E5", "C3", "D4", "D6", "F5", "C2", "C1", "D5", "C4", "B5"], "C6": ["A6", "C3", "D4", "D6", "E6", "C2", "B6", "C1", "C5", "D5", "F6", "C4"], "D1": ["E1", "D2", "B1", "D3", "C3", "D4", "D6", "C2", "C1", "D5", "A1", "F1"], "D2": ["F2", "C3", "D3", "D4", "D6", "B2", "C2", "A2", "C1", "D5", "E2", "D1"], "D3": ["E3", "D2", "C3", "B3", "D4", "D6", "C2", "F3", "C1", "D5", "A3", "D1"], "D4": ["A4", "C6", "D2", "F4", "D3", "B4", "D6", "C5", "D5", "C4", "D1", "E4"], "D5": ["A5", "C6", "D2", "E5", "D3", "D4", "D6", "F5", "C5", "C4", "D1", "B5"], "D6": ["C6", "A6", "D2", "D3", "D4", "E6", "B6", "C5", "D5", "F6", "C4", "D1"], "E1": ["F2", "E3", "E5", "B1", "E6", "F3", "C1", "D1", "E2", "A1", "E4", "F1"], "E2": ["F2", "E3", "E1", "D2", "E5", "E6", "B2", "C2", "F3", "A2", "E4", "F1"], "E3": ["F2", "E1", "E5", "C3", "D3", "B3", "E6", "F3", "A3", "E2", "E4", "F1"], "E4": ["E3", "A4", "E1", "E5", "F4", "D4", "B4", "F5", "E6", "F6", "C4", "E2"], "E5": ["A5", "E3", "E1", "F4", "F5", "E6", "C5", "D5", "F6", "E2", "E4", "B5"], "E6": ["E3", "C6", "A6", "E1", "E5", "F4", "D6", "F5", "B6", "F6", "E2", "E4"], "F1": ["F2", "E3", "E1", "B1", "F4", "F5", "F3", "C1", "D1", "F6", "E2", "A1"], "F2": ["E3", "E1", "D2", "F4", "F5", "B2", "C2", "F3", "A2", "F6", "E2", "F1"], "F3": ["F2", "E3", "E1", "C3", "F4", "D3", "B3", "F5", "E2", "F6", "A3", "F1"], "F4": ["F2", "A4", "E5", "D4", "B4", "F5", "E6", "F3", "F6", "C4", "E4", "F1"], "F5": ["F2", "A5", "E5", "F4", "E6", "F3", "C5", "D5", "F6", "E4", "B5", "F1"], "F6": ["F2", "C6", "A6", "E5", "F4", "D6", "E6", "F5", "F3", "B6", "E4", "F1"]}, "T": 36, "b": 5, "id": "sudoku_6_scd", "variables": ["A1", "A2", "A3", "A4", "A5", "A6", "B1", "B2", "B3", "B4", "B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1", "D2", "D3", "D4", "D5", "D6", "E1", "E2", "E3", "E4", "E5", "E6", "F1", "F2", "F3", "F4", "F5", "F6"], "domains": {"A1": "123456", "A2": "123456", "A3": "123456", "A4": "123456", "A5": "123456", "A6": "123456", "B1": "123456", "B2": "123456", "B3": "123456", "B4": "123456", "B5": "123456", "B6": "123456", "C1": "123456", "C2": "123456", "C3": "123456", "C4": "123456", "C5": "123456", "C6": "123456", "D1": "123456", "D2": "123456", "D3": "123456", "D4": "123456", "D5": "123456", "D6": "123456", "E1": "123456", "E2": "123456", "E3": "123456", "E4": "123456", "E5": "123456", "E6": "123456", "F1": "123456", "F2": "123456", "F3": "123456", "F4": "123456", "F5": "123456", "F6": "123456"}}, "sudoku_4_SCD": {"T": 16, "b": 1, "id": "sudoku_4_scd", "peers": {"A1": ["C1", "A3", "A2", "B1", "A4", "B2", "D1"], "A2": ["D2", "A3", "C2", "A1", "A4", "B2", "B1"], "A3": ["C3", "D3", "B3", "A2", "B4", "A1", "A4"], "A4": ["D4", "A3", "B3", "A2", "A1", "B4", "C4"], "B1": ["C1", "B3", "A2", "A1", "B4", "B2", "D1"], "B2": ["D2", "B3", "C2", "A2", "A1", "B4", "B1"], "B3": ["C3", "A3", "D3", "B4", "A4", "B2", "B1"], "B4": ["D4", "A3", "B3", "A4", "C4", "B2", "B1"], "C1": ["C3", "D2", "C2", "A1", "D1", "C4", "B1"], "C2": ["C3", "C1", "D2", "A2", "D1", "C4", "B2"], "C3": ["D4", "C1", "A3", "B3", "C2", "D3", "C4"], "C4": ["C3", "D4", "C1", "C2", "D3", "B4", "A4"], "D1": ["D4", "C1", "D2", "C2", "D3", "A1", "B1"], "D2": ["D4", "C1", "C2", "A2", "D3", "D1", "B2"], "D3": ["C3", "D4", "D2", "A3", "B3", "D1", "C4"], "D4": ["C3", "D2", "A4", "D3", "B4", "D1", "C4"]}, "variables": ["A1", "A2", "A3", "A4", "B1", "B2", "B3", "B4", "C1", "C2", "C3", "C4", "D1", "D2", "D3", "D4"], "domains": {"A1": "1234", "A2": "1234", "A3": "1234", "A4": "1234", "B1": "1234", "B2": "1234", "B3": "1234", "B4": "1234", "C1": "1234", "C2": "1234", "C3": "1234", "C4": "1234", "D1": "1234", "D2": "1234", "D3": "1234", "D4": "1234"}}, "progress_tree": "", "stored_models": {"sudoku_9x9": "", "sudoku_6x6": "", "sudoku_4x4": "", "MiniZinc Code Generation Problem": "```minizinc\n% MiniZinc model to resolve a problem\n\n% Input parameters\nint: a; % Parameter a\nint: b; % Parameter b\n\n% Decision variables\nvar int: x; % Decision variable x\n\n% Constraints\nconstraint x = a + b; % x is the sum of a and b\n\n% Objective function\nsolve satisfy; % We are looking for a solution that satisfies the constraints\n\n% Output\noutput ['x = ', show(x)]; % Print the value of x\n```", "DiscreteVariableModel": "int: v1; % 0..10XXxnint: v2; % 0..10XXxnint: v3; % 0..10XXxnint: v4; % 0..10XXxnint: v5; % 0..10XXxnint: v6; % 0..10XXxnint: v7; % 0..10XXxnint: v8; % 0..10XXxnint: v9; % 0..10XXxnint: v10; % 0..10XXxnXXxnconstraint v1 + v2 + v3 + v4 + v5 <= 20;XXxnconstraint v6 == 5 XXx/ v6 == 8;XXxnconstraint v7 == v8;XXxnconstraint v9 + v10 == 6;XXxnXXxnsolve satisfy;XXxnXXxnoutput ['v1 = ', show(v1), 'XXxn',XXxn        'v2 = ', show(v2), 'XXxn',XXxn        'v3 = ', show(v3), 'XXxn',XXxn        'v4 = ', show(v4), 'XXxn',XXxn        'v5 = ', show(v5), 'XXxn',XXxn        'v6 = ', show(v6), 'XXxn',XXxn        'v7 = ', show(v7), 'XXxn',XXxn        'v8 = ', show(v8), 'XXxn',XXxn        'v9 = ', show(v9), 'XXxn',XXxn        'v10 = ', show(v10), 'XXxn'];XXxn", "VariableAssignmentProblem": "% Declare variables v1 to v10 without specific domains or constraintsXXxnvar int: v1;XXxnvar int: v2;XXxnvar int: v3;XXxnvar int: v4;XXxnvar int: v5;XXxnvar int: v6;XXxnvar int: v7;XXxnvar int: v8;XXxnvar int: v9;XXxnvar int: v10;XXxnXXxn% Objective: Just to output the values of the variablesXXxnsolve satisfy;XXxnXXxn% Output the values of v1 to v10XXxnoutput [XXxn  'v1 = XXx(v1)XXxXXxn',XXxn  'v2 = XXx(v2)XXxXXxn',XXxn  'v3 = XXx(v3)XXxXXxn',XXxn  'v4 = XXx(v4)XXxXXxn',XXxn  'v5 = XXx(v5)XXxXXxn',XXxn  'v6 = XXx(v6)XXxXXxn',XXxn  'v7 = XXx(v7)XXxXXxn',XXxn  'v8 = XXx(v8)XXxXXxn',XXxn  'v9 = XXx(v9)XXxXXxn',XXxn  'v10 = XXx(v10)XXxXXxn'XXxn];", "DiscreteVariableConstraintSatisfaction": "% MiniZinc model based on the given problem description with 10 discrete variables and constraints\n% Variables\narray[1..10] of var 1..10: x;\n\n% Constraints\n% No specific constraints are provided in the problem description\n\nsolve satisfy;\n\n% Output\noutput ['x: ' ++ show(x) ++ 'XXxn'];", "VariableAssignmentWithoutConstraints": "% Declare the variablesXXxnint: n = 10; % Number of variablesXXxnarray[1..n] of var 1..100: x; % Array of 10 discrete variables with domain 1 to 100XXxnXXxn% Objective function (not needed since there are no constraints, but included for completeness)XXxn% We can just print the variables since there are no constraints to satisfyXXxnXXxnsolve satisfy;XXxnXXxn% Output the variablesXXxnoutput [XXx'x = XXx' ++ show(x)];", "DiscreteConstraintSatisfaction": "```minizinc\n% MiniZinc model with 10 discrete variables and constraints\n\n% Declare 10 discrete variables\narray[1..10] of var int: x;\n\n% Example constraints (these can be modified as needed)\nconstraint x[1] + x[2] <= 10;  % Example constraint 1\nconstraint x[3] * x[4] >= 5;   % Example constraint 2\nconstraint x[5] != x[6];       % Example constraint 3\nconstraint x[7] + x[8] + x[9] + x[10] = 20; % Example constraint 4\n\n% Solve the model\nsolve satisfy;\n\n% Output the results\noutput [ show(x[i]) ++ 'XXxn' | i in 1..10 ];\n```", "DiscreteVariableOptimization": "% ParametersXXxnint: num_variables = 10; % Number of discrete variablesXXxnint: domain_size = 10; % Size of the domain for each variable (1 to 10)XXxnXXxn% Decision variable: an array of integers with num_variables elements, each ranging from 1 to domain_sizeXXxnarray[1..num_variables] of var 1..domain_size: x;XXxnXXxn% No constraints, just an array of random variables within the specified rangeXXxnXXxn% OutputXXxnoutput [XXxn  'Variables: ',XXxn  show(x)XXxn];", "Discrete Variable Constraint Satisfaction Problem": "int: n; % Number of variablesXXxnint: m; % Number of distinct valuesXXxnXXxn% Array of decision variablesXXxnarray[1..n] of var 1..m: x;XXxnXXxn% Ensure all variables have the same valueXXxnconstraint forall(i, j in 1..n where i < j) (XXxn    x[i] = x[j]XXxn);XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn  'Variables: ', show(x), 'XXxn'XXxn];", "Discrete Variable Assignment Problem": "% Variables\nvar 1..10: A; % Variable A\nvar 1..10: B; % Variable B\nvar 1..10: C; % Variable C\nvar 1..10: D; % Variable D\nvar 1..10: E; % Variable E\nvar 1..10: F; % Variable F\nvar 1..10: G; % Variable G\nvar 1..10: H; % Variable H\nvar 1..10: I; % Variable I\nvar 1..10: J; % Variable J\n% Constraints\nsolve satisfy; % Ensure all constraints are satisfied", "MinizincDiscreteConstraintProblem": "```minizinc\n% MiniZinc model with 10 discrete variables and constraints\n\nint: n = 10; % Number of discrete variables\n\n% Declare variables\nvar int: x1; % from dzn\nvar int: x2; % from dzn\nvar int: x3; % from dzn\nvar int: x4; % from dzn\nvar int: x5; % from dzn\nvar int: x6; % from dzn\nvar int: x7; % from dzn\nvar int: x8; % from dzn\nvar int: x9; % from dzn\nvar int: x10; % from dzn\n\n% Constraints example (you can replace these with actual constraints)\nconstraint x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 <= 100; % Example constraint\nconstraint x1 >= 0; % Example constraint\nconstraint x2 >= 0; % Example constraint\nconstraint x3 >= 0; % Example constraint\nconstraint x4 >= 0; % Example constraint\nconstraint x5 >= 0; % Example constraint\nconstraint x6 >= 0; % Example constraint\nconstraint x7 >= 0; % Example constraint\nconstraint x8 >= 0; % Example constraint\nconstraint x9 >= 0; % Example constraint\nconstraint x10 >= 0; % Example constraint\n\n% Output statement\noutput [show(x1), show(x2), show(x3), show(x4), show(x5), show(x6), show(x7), show(x8), show(x9), show(x10)];\n```", "DiscreteVariablesWithConstraints": "% 10 discrete variables with domain 0..9\nvar 0..9: var1;\nvar 0..9: var2;\nvar 0..9: var3;\nvar 0..9: var4;\nvar 0..9: var5;\nvar 0..9: var6;\nvar 0..9: var7;\nvar 0..9: var8;\nvar 0..9: var9;\nvar 0..9: var10;\n\n% Constraint: The sum of var1, var2, var3, var4, var5 <= the sum of var6, var7, var8, var9, var10\nconstraint sum([var1, var2, var3, var4, var5]) <= sum([var6, var7, var8, var9, var10]);\n\n% Output the result\noutput['Sum of var1, var2, var3, var4, var5: ' ++ show(sum([var1, var2, var3, var4, var5])) ++ 'XXxn'];\noutput['Sum of var6, var7, var8, var9, var10: ' ++ show(sum([var6, var7, var8, var9, var10])) ++ 'XXxn'];\n\nsolve satisfy;", "MinizincDiscreteVariableConstraintProblem": "% Define the size of the arrayXXxnint: n = 9;XXxnXXxn% Define the discrete variables (array of integers)XXxnarray[1..n] of var 1..9: x;XXxnXXxn% Define the constraintsXXxnconstraint x[1] + x[2] = 10;  % First two numbers sum to 10XXxnconstraint x[3] - x[4] = 2;   % Third number is 2 more than the fourthXXxnconstraint x[5] * x[6] = 24;  % Fifth number multiplied by sixth equals 24XXxnconstraint x[7] / x[8] = 3;   % Seventh number is three times the eighthXXxnconstraint x[9] mod 2 = 0;    % Ninth number is evenXXxnXXxn% Additional constraints to ensure all numbers are distinctXXxnconstraint forall(i, j in 1..n where i < j) (XXxn    x[i] != x[j]XXxn);XXxnXXxn% Solve the problemXXxnsolve satisfy;XXxnXXxn% Output the resultsXXxnoutput [XXxn  'Solution:XXxn',XXxn  'x = ', show(x), 'XXxn'XXxn];", "DiscreteVariableArrayWithoutConstraints": "% MiniZinc model for an array of discrete variables with domain and without constraints\n% We will define an array of 5 discrete variables with domain 1 to 10\n\n% Parameters\n% No specific input parameters are mentioned in the description\n\n% Decision variables\narray[1..5] of var 1..10: D; % An array of 5 discrete variables with domain 1 to 10\n\n% Output - Print the array of discrete variables\noutput['Array of discrete variables: XXx(D)'];\n\n% Solve statement for satisfaction\nsolve satisfy;", "Discrete Variable Constraint Satisfaction": "include 'globals.mzn'; % Include global MiniZinc constraints\n\n% Parameters\nint: n_vars; % Number of variables (10 in this case) % from dzn\nint: domain_size; % Size of the domain for each variable (3 in this case) % from dzn\n\n% Variables\narray[1..n_vars] of var 0..domain_size: x; % Declare an array of decision variables\n\n% Constraints\nconstraint sum(x[1..5]) == 15; % The sum of the first five variables must be equal to 15\nconstraint product(x[6..10]) == 120; % The product of the last five variables must be equal to 120\n\n% Objective (optional, can be any since we are only looking for feasibility)\nsolve satisfy;\n\n% Output\noutput ['x: ' ++ show(x)];", "Discrete Constraint Satisfaction Problem": "```minizinc\n% Define the number of variables\nint: n;\n\n% Declare an array of discrete variables\narray[1..n] of var int: x;\n\n% Define constraints\n% Example constraint: sum of all variables should be equal to a certain value\nint: target_sum;\nconstraint sum(x) = target_sum;\n\n% Additional constraints can be added as needed\n% constraint x[1] + x[2] >= 5;\n\n% Solve the model\nsolve satisfy;\n\n% Output the results\noutput [ show(x[i]) ++ ' ' | i in 1..n ];\n```", "Unconstrained Discrete Variable Problem": "int: n = 10; % Number of variablesXXxnXXxn% Define the variablesXXxnvar 0..100: x1;XXxnvar 0..100: x2;XXxnvar 0..100: x3;XXxnvar 0..100: x4;XXxnvar 0..100: x5;XXxnvar 0..100: x6;XXxnvar 0..100: x7;XXxnvar 0..100: x8;XXxnvar 0..100: x9;XXxnvar 0..100: x10;XXxnXXxn% Create an array of all variables for convenienceXXxnarray[1..n] of var 0..100: x = [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10];XXxnXXxn% Objective function: just return the values as there are no constraintsXXxnsolve satisfy;XXxnXXxn% Output the values of the variablesXXxnoutput [XXxn  'x1 = ', show(x1), 'XXxn',XXxn  'x2 = ', show(x2), 'XXxn',XXxn  'x3 = ', show(x3), 'XXxn',XXxn  'x4 = ', show(x4), 'XXxn',XXxn  'x5 = ', show(x5), 'XXxn',XXxn  'x6 = ', show(x6), 'XXxn',XXxn  'x7 = ', show(x7), 'XXxn',XXxn  'x8 = ', show(x8), 'XXxn',XXxn  'x9 = ', show(x9), 'XXxn',XXxn  'x10 = ', show(x10), 'XXxn'XXxn];", "Constraint Satisfaction Problem (CSP)": "int: num_cows = 25; % Number of cowsXXxnint: num_sons = 5; % Number of sonsXXxnXXxn% Milk production by each cow (1 to 25)XXxnarray[1..num_cows] of int: milk_production = [i | i in 1..num_cows];XXxnXXxn% Total milk productionXXxnint: total_milk = sum(milk_production);XXxnXXxn% Milk production required for each sonXXxnint: milk_per_son = total_milk div num_sons;XXxnXXxn% Distribution criteriaXXxnarray[1..num_sons] of int: cows_per_son = [7, 6, 5, 4, 3];XXxnXXxn% Array to keep track of which cows are assigned to which sonXXxnarray[1..num_cows] of var 1..num_sons: assigned_son;XXxnXXxn% Ensure that each son gets the correct number of cowsXXxnconstraint forall(s in 1..num_sons) (XXxn    sum([bool2int(assigned_son[c] == s) | c in 1..num_cows]) == cows_per_son[s]XXxn);XXxnXXxn% Ensure that the milk production for each son is equalXXxnconstraint forall(s in 1..num_sons) (XXxn    sum([milk_production[c] | c in 1..num_cows where assigned_son[c] == s]) == milk_per_sonXXxn);XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn    'Son 1 cows: ', show([c | c in 1..num_cows where assigned_son[c] == 1]), 'XXxn',XXxn    'Son 2 cows: ', show([c | c in 1..num_cows where assigned_son[c] == 2]), 'XXxn',XXxn    'Son 3 cows: ', show([c | c in 1..num_cows where assigned_son[c] == 3]), 'XXxn',XXxn    'Son 4 cows: ', show([c | c in 1..num_cows where assigned_son[c] == 4]), 'XXxn',XXxn    'Son 5 cows: ', show([c | c in 1..num_cows where assigned_son[c] == 5]), 'XXxn'XXxn];", "MinizincCodeGenerationProblem": "```minizinc\n% MiniZinc model to demonstrate a simple problem-solving structure with comments\n\n% Input parameters\nint: n; % The size of the problem (e.g., number of variables or items)\n\n% Decision variables\narray[1..n] of var 0..1: x; % Binary decision variables\n\n% Objective function\nvar int: objective = sum(i in 1..n)(x[i]); % Example objective to maximize the sum of x\n\n% Constraints\nconstraint sum(i in 1..n)(x[i]) <= n; % Example constraint to limit the number of selected items\n\n% Solve the model with a maximization strategy\nsolve maximize objective;\n\n% Output the results\noutput ['Objective value: ' ++ show(objective) ++ 'XXxn'] ++ [ 'x[' ++ show(i) ++ '] = ' ++ show(x[i]) ++ 'XXxn' | i in 1..n ];\n```", "MinizincDiscreteVariableModel": "% ParametersXXxnint: num_vars = 10; % Number of discrete variablesXXxnint: domain_size; % Size of the domain for each variableXXxnXXxn% Decision variablesXXxnarray[1..num_vars] of var 1..domain_size: x; % Array of decision variables representing the 10 discrete variablesXXxnXXxn% Objective: No specific objective, just need to satisfy the constraintsXXxnsolve satisfy;XXxnXXxn% OutputXXxnoutput [XXx'x = XXx' ++ show(x)];", "MinizincDiscreteConstraintSatisfaction": "```minizinc\n% MiniZinc model for 10 discrete variables with constraints\n\n% Define the number of variables\nint: n = 10;\n\n% Define the domain for the variables\nset of int: D = 1..n;\n\n% Declare the variables\narray[1..n] of var D: x;\n\n% Define constraints\nconstraint \n    % Example constraints\n    forall(i in 1..n) (\n        x[i] <= n - i + 1  % Example constraint: each variable should be less than or equal to its position from the end\n    ) /XXx\n    sum(i in 1..n) (x[i]) == n * (n + 1) div 2; % Example constraint: sum of all variables should equal to the sum of the first n natural numbers\n\n% Solve the model\nsolve satisfy;\n\n% Output the results\noutput [ show(x[i]) ++ ' ' | i in 1..n ];\n```", "DiscreteVariableArrayProblem": "```minizinc\n% MiniZinc model with an array of discrete variables\n\nint: n; % Size of the array\narray[1..n] of var 0..10: discrete_vars; % Array of discrete variables with a domain from 0 to 10\n\n% Output the values of the discrete variables\noutput [ show(discrete_vars[i]) | i in 1..n ];\n```", "DiscreteVariableConstraints": "```minizinc\n% MiniZinc model for 10 discrete variables with constraints\n\n% Declare 10 discrete variables\nint: var1;\nint: var2;\nint: var3;\nint: var4;\nint: var5;\nint: var6;\nint: var7;\nint: var8;\nint: var9;\nint: var10;\n\n% Example constraints (these can be modified as needed)\n% Constraint: All variables must be different\nconstraint var1 != var2;\nconstraint var1 != var3;\nconstraint var1 != var4;\nconstraint var1 != var5;\nconstraint var1 != var6;\nconstraint var1 != var7;\nconstraint var1 != var8;\nconstraint var1 != var9;\nconstraint var1 != var10;\nconstraint var2 != var3;\nconstraint var2 != var4;\nconstraint var2 != var5;\nconstraint var2 != var6;\nconstraint var2 != var7;\nconstraint var2 != var8;\nconstraint var2 != var9;\nconstraint var2 != var10;\nconstraint var3 != var4;\nconstraint var3 != var5;\nconstraint var3 != var6;\nconstraint var3 != var7;\nconstraint var3 != var8;\nconstraint var3 != var9;\nconstraint var3 != var10;\nconstraint var4 != var5;\nconstraint var4 != var6;\nconstraint var4 != var7;\nconstraint var4 != var8;\nconstraint var4 != var9;\nconstraint var4 != var10;\nconstraint var5 != var6;\nconstraint var5 != var7;\nconstraint var5 != var8;\nconstraint var5 != var9;\nconstraint var5 != var10;\nconstraint var6 != var7;\nconstraint var6 != var8;\nconstraint var6 != var9;\nconstraint var6 != var10;\nconstraint var7 != var8;\nconstraint var7 != var9;\nconstraint var7 != var10;\nconstraint var8 != var9;\nconstraint var8 != var10;\nconstraint var9 != var10;\n\n% Solve the model\nsolve satisfy;\n\n% Output the results\noutput [ show(var1), 'XXxn', show(var2), 'XXxn', show(var3), 'XXxn', show(var4), 'XXxn', show(var5), 'XXxn', show(var6), 'XXxn', show(var7), 'XXxn', show(var8), 'XXxn', show(var9), 'XXxn', show(var10) ];\n```", "DistinctVariableAssignment": "int: a;  % First digit of the PINXXxnint: b;  % Second digit of the PINXXxnint: c;  % Third digit of the PINXXxnint: d;  % Fourth digit of the PINXXxnXXxnconstraint 1 <= a /XXx a <= 9;  % Digits are between 1 and 9XXxnconstraint 1 <= b /XXx b <= 9;XXxnconstraint 1 <= c /XXx c <= 9;XXxnconstraint 1 <= d /XXx d <= 9;XXxnXXxnconstraint all_different([a, b, c, d]);  % All digits are differentXXxnXXxn% Form the 2-digit numbersXXxnvar int: ab = a * 10 + b;XXxnvar int: cd = c * 10 + d;XXxnvar int: da = d * 10 + a;XXxnvar int: bc = b * 10 + c;XXxnXXxn% Check the constraintsXXxnconstraint cd == 3 * ab;XXxnconstraint da == 2 * bc;XXxnXXxnsolve satisfy;XXxnXXxnoutput ['PIN: ' ++ show(a) ++ show(b) ++ show(c) ++ show(d)];", "MiniZinc Constraint Satisfaction Problem": "```minizinc\n% Define the number of variables\nint: n; % The size of the array of discrete variables\n\n% Define the array of discrete variables\narray[1..n] of var int: x; % Discrete variables\n\n% Define the domains of the variables\n% Assume the domain for each variable is from 1 to m\nint: m; % Upper limit of the domain\nconstraint forall(i in 1..n) (x[i] in 1..m); % Each variable must be within the specified domain\n\n% Apply necessary constraints to solve the problem\n% Example constraint: the sum of all variables should be equal to a specified total\nint: total; % Total that the sum of variables must equal\nconstraint sum(x) = total; % Constraint for the sum of variables\n\n% Solve the model\nsolve satisfy; % Solve the model to satisfy the constraints\n\n% Output the results\noutput [ show(x[i]) | i in 1..n ]; % Print the values of the discrete variables\n```", "Distinct Variable Assignment Problem": "```minizinc\n% MiniZinc model to ensure 10 distinct discrete variables\n\n% Define the number of discrete variables\nint: n = 10; % Total number of variables\n\n% Declare an array of integer variables\narray[1..n] of var int: x; % Variables that need to take distinct values\n\n% Define the domain for the variables\n% Here we assume the values can range from 1 to n\n% This ensures that all values are within the range\nconstraint forall(i, j in 1..n where i < j) (\n    x[i] != x[j] % Ensure all variables take distinct values\n);\n\n% Output the results of the variable assignments\noutput [ show(x[i]) ++ ' ' | i in 1..n ];\n```", "Unconstrained Discrete Variable Optimization": "% Declare the MiniZinc modelXXxnXXxn% Declare 10 discrete variablesXXxnvar int: x1;XXxnvar int: x2;XXxnvar int: x3;XXxnvar int: x4;XXxnvar int: x5;XXxnvar int: x6;XXxnvar int: x7;XXxnvar int: x8;XXxnvar int: x9;XXxnvar int: x10;XXxnXXxn% Define the output arrayXXxnarray[1..10] of var int: output = [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10];XXxnXXxn% Output the values of the variablesXXxnoutput[];", "Variable Array Initialization Problem": "int: N = 5; % Size of the array % from dznXXxnXXxn% Declaration of the array of discrete variablesXXxnarray[1..N] of var 0..10: x; % Variables with values between 0 and 10XXxnXXxn% Objective: Print the values of the arrayXXxnoutput [XXx'x = XXx' ++ show(x)];", "Constraint Satisfaction Problem": "```minizinc\n% input parameters\nvar int: Baker; % from dzn\nvar int: Cooper; % from dzn\nvar int: Fletcher; % from dzn\nvar int: Miller; % from dzn\nvar int: Smith; % from dzn\n\n% constraints\nconstraint Baker != 5;\nconstraint Cooper != 1;\nconstraint Fletcher != 5 /XXx Fletcher != 1;\nconstraint Miller > Cooper;\nconstraint abs(Smith - Fletcher) != 1 /XXx abs(Fletcher - Cooper) != 1;\n\nsolve satisfy;\n\noutput['Baker'] = Baker;\noutput['Cooper'] = Cooper;\noutput['Fletcher'] = Fletcher;\noutput['Miller'] = Miller;\noutput['Smith'] = Smith;\n```", "Constraint Satisfaction Problem (CSP) with All-Different Constraint": "include 'globals.mzn'; % Include the global constraints library\r\n\r\n% Define the size of the array\r\nint: n = 10; % Array size (from dzn)\r\n\r\n% Declare the array of discrete variables\r\narray[1..n] of var 1..n: x; % Variables with domain 1..n\r\n\r\n% Constraint to ensure all variables are different\r\nconstraint all_different(x); % Ensure all elements in the array are different\r\n\r\n% Output the array\r\nsolve satisfy; % Solve the problem and find a satisfying assignment\r\n\r\noutput [ 'x = ' ++ show(x) ]; % Display the result in the output", "Discrete Optimization with Constraints": "% ParametersXXxnint: n_vars = 10; % Number of discrete variablesXXxnint: n_vals = 5; % Number of values each variable can take (1 to 5)XXxnXXxn% Decision variablesXXxnarray[1..n_vars] of var 1..n_vals: x;XXxnXXxn% ConstraintsXXxnXXxn% Each variable must be assigned a value within its domainXXxn% This is implicit in the variable declarationXXxnXXxn% Example constraints (can be customized)XXxnXXxn% Constraints to ensure no two adjacent variables have the same valueXXxnconstraint forall(i in 1..n_vars-1) (XXxn    x[i] != x[i+1]XXxn);XXxnXXxn% Constraints to ensure the sum of the first five variables is evenXXxnconstraint sum(i in 1..5) (x[i]) mod 2 = 0;XXxnXXxn% Constraints to ensure the last variable is greater than the average of the othersXXxnconstraint x[n_vars] > sum(i in 1..n_vars-1) (x[i]) / (n_vars - 1);XXxnXXxn% SolveXXxnsolve satisfy;XXxnXXxn% OutputXXxnoutput [ 'Variables: ' ++ show(x) ];", "ArrayOfDiscreteVariables": "% ParametersXXxnint: n_variables; % Number of discrete variablesXXxnint: n_values;    % Number of possible values for each variableXXxnXXxn% Decision variablesXXxnarray[1..n_variables] of var 1..n_values: vars;XXxnXXxn% Objective: No specific objective, just generate valuesXXxnXXxn% Solve the modelXXxnsolve satisfy;XXxnXXxn% OutputXXxnoutput [XXxn  'Variables: ',XXxn  show(vars)XXxn];", "UnconstrainedDiscreteVariables": "% Define a model with 10 discrete variablesXXxnXXxn% We assume a simple domain for the variables, e.g., integers from 1 to 10XXxnint: n = 10; % Domain sizeXXxnarray[1..10] of var 1..n: x; % 10 discrete variablesXXxnXXxn% Since there are no constraints, we can simply solve to find any solutionXXxnsolve satisfy;XXxnXXxn% Output the variablesXXxnoutput [XXx'x = XXx' ++ show(x)];", "ModelingDiscreteVariables": "int: n_variables; % Number of discrete variablesXXxnint: n_values; % Number of possible values for each variableXXxnXXxn% Decision variables: an array of discrete variables without domainXXxnarray[1..n_variables] of var int: variables;XXxnXXxn% Constraint: Each variable must take a value between 1 and n_valuesXXxnconstraintXXxn  forall(i in 1..n_variables) (XXxn    variables[i] >= 1 /XXx variables[i] <= n_valuesXXxn  );XXxnXXxn% Output the values of the decision variablesXXxnsolve satisfy;XXxnXXxnoutput [XXxn  'Variables: ' ++ show(variables) ++ 'XXxn'XXxn];", "VariableDomainAssignment": "% ParametersXXxnint: num_vars;            % Number of discrete variablesXXxnint: num_values;          % Number of possible values for each variable (1 to num_values)XXxnXXxn% Decision variablesXXxnarray[1..num_vars] of var 1..num_values: variables;XXxnXXxn% Since there are no constraints, we just need to declare the variablesXXxnXXxn% OutputXXxnconstraint forall(i in 1..num_vars)(XXxn    variables[i] in 1..num_valuesXXxn);XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn    'Variables: ' ++ show(variables) ++ 'XXxn'XXxn];", "VariableConstraints": "int: n_vars; % Number of variablesXXxnint: n_domains; % Number of discrete domainsXXxnint: n_constraints; % Number of constraintsXXxnXXxn% Decision variablesXXxnarray[1..n_vars] of var 1..n_domains: X;XXxnXXxn% ConstraintsXXxnconstraint X[1] != X[2];XXxnconstraint X[2] != X[3];XXxnconstraint X[3] != X[4];XXxnconstraint X[4] != X[5];XXxnconstraint X[1] != X[3];XXxnconstraint X[2] != X[4];XXxnconstraint X[3] != X[5];XXxnconstraint X[1] != X[4];XXxnconstraint X[2] != X[5];XXxnXXxn% Objective function (optional)XXxn% Here we could define an objective if needed, for example to minimize the sum of the variablesXXxn% But for this problem, we are only interested in the constraintsXXxnXXxnsolve satisfy;XXxnXXxn% OutputXXxnoutput [XXxn    'X = ', show(X), 'XXxn'XXxn];", "All-Different Constraint Satisfaction": "include 'globals.mzn'; % Include the global constraints module\n\n% Parameters\nint: n; % Number of variables % from dzn\nint: domain_min; % Minimum value of the domain % from dzn\nint: domain_max; % Maximum value of the domain % from dzn\n\n% Decision variables\narray[1..n] of var domain_min..domain_max: x; % Array of discrete variables\n\n% Constraints\nconstraint all_different(x); % Variables must be all different\n\n% Solve\nsolve satisfy;\n\n% Output\noutput ['x = ' ++ show(x)];", "Variable_Constraint_Problem": "% Decision variablesXXxnvar int: x1; % Variable 1XXxnvar int: x2; % Variable 2XXxnvar int: x3; % Variable 3XXxnvar int: x4; % Variable 4XXxnvar int: x5; % Variable 5XXxnvar int: x6; % Variable 6XXxnvar int: x7; % Variable 7XXxnvar int: x8; % Variable 8XXxnvar int: x9; % Variable 9XXxnvar int: x10; % Variable 10XXxnXXxn% Objective functionXXxnsolve satisfy; % Indicate that we want to satisfy the constraints (none in this case)XXxnXXxn% OutputXXxnoutput [ show(x1), show(x2), show(x3), show(x4), show(x5), show(x6), show(x7), show(x8), show(x9), show(x10) ]; % Display the values of all variables", "Unconstrained Discrete Variable Array Problem": "% MiniZinc model for an array of discrete variables with domain and without constraintsXXxnXXxn% ParametersXXxnint: n; % Number of discrete variablesXXxnint: domain_size; % Size of the domain for each variableXXxnXXxn% Decision variablesXXxnarray[1..n] of var 1..domain_size: x; % Array of decision variables with domain from 1 to domain_sizeXXxnXXxn% There are no specific constraints applied to the variablesXXxnXXxn% The objective is not explicitly stated, as there are no constraints or optimization criteriaXXxnXXxn% OutputXXxnoutput [XXxn  'Decision variables: ',XXxn  show(x),XXxn  'XXxn'];XXxn", "DiscreteVariableNoConstraints": "% MiniZinc model based on the given descriptionXXxnXXxn% ParametersXXxnvar 0..10: x1;XXxnvar 0..10: x2;XXxnvar 0..10: x3;XXxnvar 0..10: x4;XXxnvar 0..10: x5;XXxnvar 0..10: x6;XXxnvar 0..10: x7;XXxnvar 0..10: x8;XXxnvar 0..10: x9;XXxnvar 0..10: x10;XXxnXXxnoutput [XXxn    'x1 = ', show(x1), 'XXxn',XXxn    'x2 = ', show(x2), 'XXxn',XXxn    'x3 = ', show(x3), 'XXxn',XXxn    'x4 = ', show(x4), 'XXxn',XXxn    'x5 = ', show(x5), 'XXxn',XXxn    'x6 = ', show(x6), 'XXxn',XXxn    'x7 = ', show(x7), 'XXxn',XXxn    'x8 = ', show(x8), 'XXxn',XXxn    'x9 = ', show(x9), 'XXxn',XXxn    'x10 = ', show(x10), 'XXxn'XXxn];XXxnXXxnsolve satisfy;", "Minizinc_AllDifferent_Array_Constraint": "include 'globals.mzn'; % Including MiniZinc global constraints module\n\n% Parameters\nint: n; % Number of variables % from dzn\nint: domain_min; % Minimum value of the domain % from dzn\nint: domain_max; % Maximum value of the domain % from dzn\n\n% Decision variables\narray[1..n] of var domain_min..domain_max: X; % Array of decision variables % from dzn\n\n% Constraints\nconstraint all_different(X); % Ensure all variables in X are different % from dzn\n\n% Objective (no specific objective, just finding a feasible solution)\nsolve satisfy;\n\n% Output\noutput ['X = ' ++ show(X)]; % Display the values of X", "ConcertTicketSellingProblem": "int: total_seats;  % Total number of seatsXXxnint: vip_seats;    % Number of VIP seatsXXxnint: free_seats;   % Number of free seats for special guestsXXxnint: vip_price;    % Price of a VIP ticketXXxnint: regular_price; % Price of a regular ticketXXxnint: total_price_goal; % Total price goalXXxnint: staff_salary;  % Total staff salaryXXxnint: concert_fund;  % Total concert fundXXxnXXxn% Decision variablesXXxnvar 0..vip_seats: vip_tickets_sold;      % Number of VIP tickets soldXXxnvar 0..(total_seats - vip_seats): regular_tickets_sold;    % Number of regular tickets soldXXxnXXxn% ConstraintsXXxnconstraint vip_tickets_sold <= vip_seats; % VIP tickets sold cannot exceed available VIP seatsXXxnconstraint regular_tickets_sold + vip_tickets_sold <= total_seats; % Total tickets sold cannot exceed total seatsXXxnXXxn% Calculate the total revenue and profitXXxnvar int: total_revenue = vip_tickets_sold * vip_price + regular_tickets_sold * regular_price;XXxnvar int: total_expenses = staff_salary + concert_fund;XXxnvar int: profit = total_revenue - total_expenses;XXxnXXxn% Objective: Meet the total price goal and maximize profitXXxnconstraint total_revenue >= total_price_goal;XXxnXXxnsolve maximize profit;XXxnXXxn% OutputXXxnoutput [XXxn  'VIP tickets sold: ', show(vip_tickets_sold), 'XXxn',XXxn  'Regular tickets sold: ', show(regular_tickets_sold), 'XXxn',XXxn  'Total revenue: $', show(total_revenue), 'XXxn',XXxn  'Total expenses: $', show(total_expenses), 'XXxn',XXxn  'Profit: $', show(profit), 'XXxn'XXxn];", "UnconstrainedDiscreteVariableModel": "```minizinc\n% MiniZinc model for 10 discrete variables without constraints\n\nint: n; % Number of variables\narray[1..n] of var int: x; % Declare 10 discrete variables\n\n% Output the results\noutput [show(x[i]) | i in 1..n];\n```", "DiscreteVariableArrayWithConstraints": "```minizinc\n% MiniZinc model for an array of discrete variables with constraints\n\n% Input parameter\narray[int] of var int: discrete_variables;\n\n% Example constraint (to be defined as needed)\nconstraint forall(i in index_set(discrete_variables)) (\n    discrete_variables[i] >= 0 % Example constraint: each variable should be non-negative\n);\n\n% Output the results\noutput [ show(discrete_variables) ];\n```", "UnconstrainedDiscreteVariableProblem": "int: n = 4; % Dimension of the square matrix (4x4 for this example)XXxnarray[1..n, 1..n] of var 1..n: matrix; % Array of discrete variablesXXxnXXxn% Constraint: All rows must contain distinct elementsXXxnconstraintXXxn  forall(i in 1..n) (XXxn    forall(j1 in 1..n, j2 in j1+1..n) (XXxn      matrix[i,j1] != matrix[i,j2]XXxn    )XXxn  );XXxnXXxn% Constraint: All columns must contain distinct elementsXXxnconstraintXXxn  forall(j in 1..n) (XXxn    forall(i1 in 1..n, i2 in i1+1..n) (XXxn      matrix[i1,j] != matrix[i2,j]XXxn    )XXxn  );XXxnXXxnsolve satisfy;XXxnXXxnoutput ['Matrix: XXxn'] ++XXxn       [show(matrix[i,j]) ++ ' ' | i in 1..n, j in 1..n] ++XXxn       ['XXxn'];", "All-Different Constraint Satisfaction Problem": "int: n = 10;  % Number of variablesXXxnXXxn% Declare the variablesXXxnarray[1..n] of var 1..n: x;  % Array of variables with domain 1 to nXXxnXXxn% Define the constraintsXXxnconstraint forall(i in 1..n, j in 1..n) (i < j -> x[i] != x[j]);  % All variables must be differentXXxnXXxn% Solve the problemXXxnsolve satisfy;XXxnXXxn% Output the resultsXXxnoutput [XXxn  'Solution:XXxn',XXxn  'x = ', show(x), 'XXxn'XXxn];", "MinizincCommentCodeGeneration": "int: N = 10; % Number of variables  \narray[1..N] of var 1..N: x; % 10 discrete variables with domain 1 to N  \n\n% Example constraints  \nconstraint forall(i, j in 1..N where i < j) (x[i] != x[j]); % All variables must be different (example constraint)  \nconstraint forall(i in 1..N) (x[i] <= N); % Example constraint: each variable must be less than or equal to N  \n\nsolve satisfy;  \n\noutput [ 'Variables: ' ++ show(x) ++ 'XXxn' ];", "MiniZincCommentCodeGeneration": "% This MiniZinc model is generated based on the instruction to put comments with % symbol.\r\n\r\n% We will create a simple problem to demonstrate the structure.\r\n\r\n% First, we declare the parameters\r\nint: n = 10; % Number of discrete variables\r\n\r\n% Then, we declare the variables\r\narray[1..n] of var 0..100: x; % Discrete variables with a range from 0 to 100\r\n\r\n% Next, we set some constraints\r\nconstraint forall(i in 1..n) (\r\n    x[i] mod 2 = 0 % All variables should be even numbers\r\n);\r\n\r\n% Finally, we define the output\r\nsolve satisfy; % We are only interested in a solution that satisfies the constraints\r\noutput [ 'Variables: ' ++ show(x) ]; % Display the values of the variables", "DiscreteVariableModelWithComments": "int: n = 10; % Number of variablesXXxnXXxnarray[1..n] of var 1..100: x; % Declare 10 discrete variables with domain 1 to 100XXxnXXxn% Example constraintsXXxnconstraintXXxn    x[1] + x[2] < x[3] /XXxXXxn    x[3] * x[4] = x[5] /XXxXXxn    x[6] - x[7] > x[8] /XXxXXxn    x[9] + x[10] <= 50; % Add your specific constraints hereXXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn    'Variables: ', show(x), 'XXxn'XXxn];", "MinizincDiscreteVariableModelWithComments": "% Problem: An array of discrete variables with domain and constraintsXXxnXXxn% Define the size of the arrayXXxnint: n = 10; % Size of the arrayXXxnXXxn% Define the discrete variable arrayXXxnarray[1..n] of var 1..100: x; % Array of discrete variables with domain 1 to 100XXxnXXxn% Define some constraintsXXxnconstraint x[1] + x[2] > x[3]; % Example constraint 1XXxnconstraint x[2] * x[3] < x[4]; % Example constraint 2XXxnconstraint x[5] - x[6] = x[7]; % Example constraint 3XXxnXXxn% You can add more constraints as neededXXxnXXxn% Solve the problemXXxnsolve satisfy; % We are just checking if a solution existsXXxnXXxn% Output the resultsXXxnoutput [XXxn  'Array x: ',XXxn  show(x),XXxn  'XXxn'XXxn];", "UnconstrainedDiscreteVariableModelWithComments": "% Declare the size of the arrayXXxnint: n = 10; % You can change this to any sizeXXxnXXxn% Declare the array of discrete variablesXXxnarray[1..n] of var 0..100: x;XXxnXXxn% Constraints: In this case, there are no constraintsXXxnXXxnsolve satisfy;XXxnXXxnoutput [XXx'x = XXx' ++ show(x)];", "MinizincCommentCodeGenerationProblem": "% Model for a simple problem with an array of discrete variables without domain and without constraints\r\n\r\n% Define the size of the array\r\nint: n = 10; % Size of the array\r\n\r\n% Declare an array of discrete variables\r\narray[1..n] of var int: x; % Array of variables\r\n\r\n% Objective: Just for demonstration, we will compute the sum of the array elements\r\n% In a real scenario, we would have some meaningful constraints and objective\r\nvar int: sum_x = sum(x); % Variable to store the sum of the array elements\r\n\r\n% Constraint: No specific constraints in this problem\r\n% In a real scenario, we would have constraints to restrict the values of x\r\n\r\n% Solve the problem (satisfy is enough since we have no constraints)\r\nsolve satisfy;\r\n\r\n% Output the array and the computed sum\r\noutput ['x: XXx(x)XXxnSum: XXx(sum_x)'];", "MinizincModelWithComments": "% Define the size of the array  \nint: n = 5; % Size of the array  \n  \n% Define the array of discrete variables  \narray[1..n] of var 0..100: x;  \n  \n% Define the constraints  \nconstraint forall(i in 1..n) ( x[i] >= 0 );  % All variables should be non-negative  \n  \n% Objective function (you can modify this as needed)  \n% Here we just want to print the values of x  \nsolve satisfy;  \n  \n% Output the values of x  \noutput['x = ' ++ show(x) ++ 'XXxn'];", "UnconstrainedDiscreteVariableArrayProblem": "% This MiniZinc model defines an array of discrete variables without any constraints.  \n% The variables are of integer type and have a domain from 1 to 10.  \n% The model will output the values of the variables after they are assigned.  \n  \n% Define the size of the array  \nint: n = 10;  \n  \n% Define an array of discrete variables with a domain from 1 to 10  \narray[1..n] of var 1..10: x;  \n  \n% Solve the model without any constraints  \nsolve satisfy;  \n  \n% Output the values of the variables  \noutput [show(x)];", "DiscreteVariableModelWithConstraints": "int: n = 10; % Number of variablesXXxnarray[1..n] of var 0..50: x; % Array of 10 discrete variablesXXxnXXxn% Define the constraintsXXxnconstraint x[1] + x[2] == x[3]; % x1 + x2 = x3XXxnconstraint x[4] - x[5] >= 10; % x4 - x5 >= 10XXxnconstraint x[1] * x[6] <= 100; % x1 * x6 <= 100XXxnconstraint x[7] mod 3 == 0; % x7 is a multiple of 3XXxnconstraint x[8] + x[9] + x[10] <= 100; % x8 + x9 + x10 <= 100XXxnXXxn% Define the objective (optional, as we are just satisfying constraints)XXxnsolve satisfy;XXxnXXxn% Output the resultsXXxnoutput ['x1 = ' ++ show(x[1]) ++ 'XXxn' ++XXxn        'x2 = ' ++ show(x[2]) ++ 'XXxn' ++XXxn        'x3 = ' ++ show(x[3]) ++ 'XXxn' ++XXxn        'x4 = ' ++ show(x[4]) ++ 'XXxn' ++XXxn        'x5 = ' ++ show(x[5]) ++ 'XXxn' ++XXxn        'x6 = ' ++ show(x[6]) ++ 'XXxn' ++XXxn        'x7 = ' ++ show(x[7]) ++ 'XXxn' ++XXxn        'x8 = ' ++ show(x[8]) ++ 'XXxn' ++XXxn        'x9 = ' ++ show(x[9]) ++ 'XXxn' ++XXxn        'x10 = ' ++ show(x[10])];", "Unconstrained Discrete Optimization": "% Number of variables\nint: n = 10;\n\n% Variable domains\narray[1..n] of var 0..10: x;\n\n% Constraints (None for this model)\n\n% Objective function (Minimize the sum of variables)\nvar int: obj = sum(i in 1..n)(x[i]);\n\n% Decision variables (None for this model)\n\n% Objective: Minimize the sum of variables\nsolve minimize obj;\n\n% Output results\noutput ['Minimum sum of variables: ' ++ show(obj)];", "Minizinc_Discrete_Variables_Constraints": "% Decision Variables\nvar 1..10: x1; % Variable x1 can take values 1 to 10\nvar 1..10: x2; % Variable x2 can take values 1 to 10\nvar 1..10: x3; % Variable x3 can take values 1 to 10\nvar 1..10: x4; % Variable x4 can take values 1 to 10\nvar 1..10: x5; % Variable x5 can take values 1 to 10\nvar 1..10: x6; % Variable x6 can take values 1 to 10\nvar 1..10: x7; % Variable x7 can take values 1 to 10\nvar 1..10: x8; % Variable x8 can take values 1 to 10\nvar 1..10: x9; % Variable x9 can take values 1 to 10\nvar 1..10: x10; % Variable x10 can take values 1 to 10\n\n% Constraints\nconstraint x1 != x2; % x1 and x2 should not be equal\nconstraint x2 != x3; % x2 and x3 should not be equal\nconstraint x3 != x4; % x3 and x4 should not be equal\nconstraint x4 != x5; % x4 and x5 should not be equal\nconstraint x5 != x6; % x5 and x6 should not be equal\nconstraint x6 != x7; % x6 and x7 should not be equal\nconstraint x7 != x8; % x7 and x8 should not be equal\nconstraint x8 != x9; % x8 and x9 should not be equal\nconstraint x9 != x10; % x9 and x10 should not be equal\n\n% Find a solution\nsolve satisfy;\n\n% Output\noutput['x1: ', show(x1), 'XXxn'];\noutput['x2: ', show(x2), 'XXxn'];\noutput['x3: ', show(x3), 'XXxn'];\noutput['x4: ', show(x4), 'XXxn'];\noutput['x5: ', show(x5), 'XXxn'];\noutput['x6: ', show(x6), 'XXxn'];\noutput['x7: ', show(x7), 'XXxn'];\noutput['x8: ', show(x8), 'XXxn'];\noutput['x9: ', show(x9), 'XXxn'];\noutput['x10: ', show(x10), 'XXxn'];", "Minizinc Domain Assignment": "% Variable domains\nvar 1..5: A; % Number of apples\nvar 1..5: B; % Number of bananas\nvar 1..5: C; % Number of cherries\nvar 1..5: D; % Number of dates\nvar 1..5: E; % Number of elderberries\nvar 1..5: F; % Number of figs\nvar 1..5: G; % Number of grapes\nvar 1..5: H; % Number of honeydew melons\nvar 1..5: I; % Number of kiwis\nvar 1..5: J; % Number of jackfruits\n\n% Bot comments\n% This model does not have any constraints.\n\n% Output the values of the variables\noutput['A = XXx(A)XXxn'];\noutput['B = XXx(B)XXxn'];\noutput['C = XXx(C)XXxn'];\noutput['D = XXx(D)XXxn'];\noutput['E = XXx(E)XXxn'];\noutput['F = XXx(F)XXxn'];\noutput['G = XXx(G)XXxn'];\noutput['H = XXx(H)XXxn'];\noutput['I = XXx(I)XXxn'];\noutput['J = XXx(J)XXxn'];", "Discrete Constraint Satisfaction Problem (CSP)": "% Source code in MiniZinc\n% Array of discrete variables without domain\narray[1..5] of var 1..10: x;\n\n% Constraints\nconstraint x[1] + x[2] = x[3];\nconstraint x[4] * x[5] = x[3];\n\nsolve satisfy;\n\n% Output the solution\noutput['x = '];\noutput[show(x)];\noutput['XXxn'];", "Minizinc_Unconstrained_Array": "% Number of items in the array\nint: n;\n\n% The array of items\narray[1..n] of var int: items;\n\n% Decision variable: index of the selected item\nvar 1..n: selected;\n\n% Decision variable: value of the selected item\nvar int: value;\n\n% Constraints: value is the sum of selected item and its index\nconstraint\n    value == items[selected] + selected;\n\nsolve satisfy;\n\n% Output the results\noutput ['Selected item index: ', show(selected), 'XXxn'];\noutput ['Selected item value: ', show(value), 'XXxn'];", "Minizinc_Constraints_Discrete_Variables": "int: num_variables;  % Number of variables\nint: domain_min;        % Minimum value for each variable\nint: domain_max;        % Maximum value for each variable\n\n% Decision variables\narray[1..num_variables] of var domain_min..domain_max: variables;\n\n% Constraints\nconstraint\n  sum(variables) <= 100 /XXx   % Sum of all variables must be less than or equal to 100\n  sum(i in 1..num_variables)(variables[i] mod 2) >= num_variables div 2;  % At least half of the variables must be odd\n\n% Objective function (not needed for this model)\n\n% Output the solution\noutput ['Variables: XXx(variables)XXxn'];\n\nsolve satisfy;", "Minizinc: ArrayDomain": "% Number of elements in the array\nint: N;\n\n% Array of discrete variables with domain [0, 1, 2]\narray[1..N] of var 0..2: x;\n\n% No constraints needed as per the model description\n\n% Output the values of the variables in the array\noutput['Values of x: '];\noutput[show(x) ++ 'XXxn'];\n\n% Ensure that the model is a satisfiability problem\nsolve satisfy;", "discrete_variables %": "% Variable declaration\nvar 0..9: A; % possible values for A are 0 to 9\nvar 0..9: B; % possible values for B are 0 to 9\nvar 0..9: C; % possible values for C are 0 to 9\nvar 0..9: D; % possible values for D are 0 to 9\nvar 0..9: E; % possible values for E are 0 to 9\nvar 0..9: F; % possible values for F are 0 to 9\nvar 0..9: G; % possible values for G are 0 to 9\nvar 0..9: H; % possible values for H are 0 to 9\nvar 0..9: I; % possible values for I are 0 to 9\nvar 0..9: J; % possible values for J are 0 to 9\n\n% Output the values of the variables\noutput ['A: ', show(A), '  B: ', show(B), '  C: ', show(C), '  D: ', show(D), '  E: ', show(E), '  F: ', show(F), '  G: ', show(G), '  H: ', show(H), '  I: ', show(I), '  J: ', show(J), 'XXxn'];", "discrete_variables_constraints %": "% Objective\nsolve satisfy;\n\noutput ['A: ' ++ show(A) ++ 'XXxn'];\noutput ['B: ' ++ show(B) ++ 'XXxn'];\noutput ['C: ' ++ show(C) ++ 'XXxn'];\noutput ['D: ' ++ show(D) ++ 'XXxn'];\noutput ['E: ' ++ show(E) ++ 'XXxn'];\noutput ['F: ' ++ show(F) ++ 'XXxn'];\noutput ['G: ' ++ show(G) ++ 'XXxn'];\noutput ['H: ' ++ show(H) ++ 'XXxn'];\noutput ['I: ' ++ show(I) ++ 'XXxn'];\noutput ['J: ' ++ show(J) ++ 'XXxn'];", "minizinc_10vars_noconstraints": "% 10 discrete variables without domain and with constraintsXXxnXXxn% VariablesXXxnint: var1;XXxnint: var2;XXxnint: var3;XXxnint: var4;XXxnint: var5;XXxnint: var6;XXxnint: var7;XXxnint: var8;XXxnint: var9;XXxnint: var10;XXxnXXxn% ConstraintsXXxnconstraint var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9 + var10 = 100;XXxnXXxn% SolveXXxnsolve satisfy;XXxnXXxn% OutputXXxnoutput[XXx'Solution: XXx' ++ show(var1) ++ XXx', XXx' ++ show(var2) ++ XXx', XXx' ++ show(var3) ++ XXx', XXx' ++ show(var4) ++ XXx', XXx' ++ show(var5) ++ XXx', XXx' ++ show(var6) ++ XXx', XXx' ++ show(var7) ++ XXx', XXx' ++ show(var8) ++ XXx', XXx' ++ show(var9) ++ XXx', XXx' ++ show(var10)];", "discrete_variables_without_domain_constraints": "% Number of variables: 10;XXxnvar 0..9: X_1;XXxnvar 0..9: X_2;XXxnvar 0..9: X_3;XXxnvar 0..9: X_4;XXxnvar 0..9: X_5;XXxnvar 0..9: X_6;XXxnvar 0..9: X_7;XXxnvar 0..9: X_8;XXxnvar 0..9: X_9;XXxnvar 0..9: X_10;XXxnXXxn% Print the resultsXXxnoutput['X_1 = XXx(X_1), X_2 = XXx(X_2), X_3 = XXx(X_3), X_4 = XXx(X_4), X_5 = XXx(X_5), X_6 = XXx(X_6), X_7 = XXx(X_7), X_8 = XXx(X_8), X_9 = XXx(X_9), X_10 = XXx(X_10)XXxn'];XXxnsolve satisfy;", "discrete_array_constraints %": "% Define input parameters (array of discrete variables)\narray[1..5] of var 1..10: array_var;\n\n% Constraints\nconstraint array_var[1] != array_var[2]; % Constraint 1: Elements at position 1 and 2 must be different\nconstraint array_var[2] != array_var[3]; % Constraint 2: Elements at position 2 and 3 must be different\nconstraint array_var[1] != array_var[3]; % Constraint 3: Elements at position 1 and 3 must be different\nconstraint array_var[2] != array_var[4]; % Constraint 4: Elements at position 2 and 4 must be different\nconstraint array_var[3] != array_var[5]; % Constraint 5: Elements at position 3 and 5 must be different\n\n% Print the solution\noutput['Array: XXx(array_var)']; % Print the array values\n\nsolve satisfy; % Find a solution that satisfies all constraints.", "discrete_array_constraints%": "% Array of discrete variables\narray[1..3] of var 1..5: x; % x[1], x[2], x[3]\narray[1..3] of var 1..5: y; % y[1], y[2], y[3]\narray[1..3] of var 1..5: z; % z[1], z[2], z[3]\n\n% No constraints specified\n\n% Output the values of the variables\noutput['x: '];\noutput([show(x[i]) ++ ' ' | i in 1..3]);\noutput['XXxn'];\n\noutput['y: '];\noutput([show(y[i]) ++ ' ' | i in 1..3]);\noutput['XXxn'];\n\noutput['z: '];\noutput([show(z[i]) ++ ' ' | i in 1..3]);\noutput['XXxn'];\n\n% Solve to satisfy the model\nsolve satisfy;", "discrete_variable_constraints %": "% Input parameters\nint: num_variables; % Number of variables\nint: domain_min; % Minimum domain value\nint: domain_max; % Maximum domain value\n\n% Array of variables with domain\narray[1..num_variables] of var domain_min..domain_max: variables;\n\n% Constraints\nconstraint\n  % Ensure all variables have values within the specified domain\n  forall(i in 1..num_variables) (\n    domain_min <= variables[i] /XXx variables[i] <= domain_max\n  ) /XXx\n  % Ensure no two variables have the same value\n  forall(i, j in 1..num_variables where i != j) (\n    variables[i] != variables[j]\n  ) /XXx\n  % Ensure the sum of the first half of variables equals the sum of the second half\n  sum(i in 1..num_variables div 2)(variables[i]) = sum(i in num_variables div 2 + 1..num_variables)(variables[i]);\n\n% Output statement\noutput['Variables: XXx(variables)'];\n\n% Solve the problem\nsolve satisfy;", "Minizinc Empty Domain Problem": "% Define the 10 discrete variables without domain and constraints\nvar int: num1; % Variable 1\nvar int: num2; % Variable 2\nvar int: num3; % Variable 3\nvar int: num4; % Variable 4\nvar int: num5; % Variable 5\nvar int: num6; % Variable 6\nvar int: num7; % Variable 7\nvar int: num8; % Variable 8\nvar int: num9; % Variable 9\nvar int: num10; % Variable 10\n\n% Print the values of the variables\noutput['num1: ' ++ show(num1) ++ 'XXxn'];\noutput['num2: ' ++ show(num2) ++ 'XXxn'];\noutput['num3: ' ++ show(num3) ++ 'XXxn'];\noutput['num4: ' ++ show(num4) ++ 'XXxn'];\noutput['num5: ' ++ show(num5) ++ 'XXxn'];\noutput['num6: ' ++ show(num6) ++ 'XXxn'];\noutput['num7: ' ++ show(num7) ++ 'XXxn'];\noutput['num8: ' ++ show(num8) ++ 'XXxn'];\noutput['num9: ' ++ show(num9) ++ 'XXxn'];\noutput['num10: ' ++ show(num10) ++ 'XXxn'];\n\n% Add 'solve satisfy;' if needed\nsolve satisfy;", "Minizinc_DiscreteVariables_NoConstraints": "% Define the variablesXXxnvar 1..10: x1;XXxnvar 1..10: x2;XXxnvar 1..10: x3;XXxnvar 1..10: x4;XXxnvar 1..10: x5;XXxnvar 1..10: x6;XXxnvar 1..10: x7;XXxnvar 1..10: x8;XXxnvar 1..10: x9;XXxnvar 1..10: x10;XXxnXXxn% Define the constraintsXXxnconstraint x1 * x2 = 2;XXxnconstraint x2 * x3 = 3;XXxnconstraint x3 * x4 = 4;XXxnconstraint x4 * x5 = 5;XXxnconstraint x5 * x6 = 6;XXxnconstraint x6 * x7 = 7;XXxnconstraint x7 * x8 = 8;XXxnconstraint x8 * x9 = 9;XXxnconstraint x9 * x10 = 10;XXxnXXxn% Solve the problemXXxnsolve satisfy;XXxnXXxn% Output the values of the variablesXXxnoutput ['x1 = ' ++ show(x1) ++ 'XXxn'];XXxnoutput ['x2 = ' ++ show(x2) ++ 'XXxn'];XXxnoutput ['x3 = ' ++ show(x3) ++ 'XXxn'];XXxnoutput ['x4 = ' ++ show(x4) ++ 'XXxn'];XXxnoutput ['x5 = ' ++ show(x5) ++ 'XXxn'];XXxnoutput ['x6 = ' ++ show(x6) ++ 'XXxn'];XXxnoutput ['x7 = ' ++ show(x7) ++ 'XXxn'];XXxnoutput ['x8 = ' ++ show(x8) ++ 'XXxn'];XXxnoutput ['x9 = ' ++ show(x9) ++ 'XXxn'];XXxnoutput ['x10 = ' ++ show(x10) ++ 'XXxn'];", "Array Without Domain and Constraints": "include 'globals.mzn';\n\n% Number of elements in the array\nint: num_elements;\n\n% Array of discrete variables without domain and constraints\narray[1..num_elements] of var 0..10: elements;\n\n% The sum of all elements must be 25\nconstraint sum(elements) = 25;\n\nsolve satisfy;\n\n% Print the result\noutput['Elements: '];\noutput[show(elements)];", "Array of Discrete Variables Without Constraints": "% Variables\narray[1..5] of var 1..10: X; % Array of discrete variables with domain 1 to 10\n\n% Constraints\n% No constraints specified\n\n% Solve\nsolve satisfy;\n\n% Output\noutput['X = '];\noutput[show(X) ++ 'XXxn'];", "Minizinc Constraint Satisfaction Problem (CSP)": "```minizinc\n% 10 discrete variables\nvar int: var1;\nvar int: var2;\nvar int: var3;\nvar int: var4;\nvar int: var5;\nvar int: var6;\nvar int: var7;\nvar int: var8;\nvar int: var9;\nvar int: var10;\n\n% Bot comments should be marked with the % symbol for clarity\n\n% Print the results\noutput['var1: XXx(var1)'];\noutput['var2: XXx(var2)'];\noutput['var3: XXx(var3)'];\noutput['var4: XXx(var4)'];\noutput['var5: XXx(var5)'];\noutput['var6: XXx(var6)'];\noutput['var7: XXx(var7)'];\noutput['var8: XXx(var8)'];\noutput['var9: XXx(var9)'];\noutput['var10: XXx(var10)'];\n\nsolve satisfy;\n```", "Array of Discrete Variables without Domain and Constraints": "```minizinc\n% Input parameters\narray[int] of var int: discrete_variables;\n\n% Bot comments with % symbol\n\n% Relations between parameters\n\noutput['Discrete Variables: XXx(discrete_variables)'];\nsolve satisfy;\n```", "Minizinc Constraint Satisfaction Problem": "```minizinc\n% Define array of discrete variables\narray[1..5] of var int: variables;\n\n% Add constraints here\n\n% Print results\noutput['Variables: XXx(variables)'];\n\nsolve satisfy;\n```", "Minizinc - Empty Domain and Constraints": "% MiniZinc model to solve a problem with 10 discrete variables without domain and constraints\n\n% 10 discrete variables without domain and constraints\nvar 1..10: x1;\nvar 1..10: x2;\nvar 1..10: x3;\nvar 1..10: x4;\nvar 1..10: x5;\nvar 1..10: x6;\nvar 1..10: x7;\nvar 1..10: x8;\nvar 1..10: x9;\nvar 1..10: x10;\n\n% Output the values of the variables\noutput ['x1: ' ++ show(x1) ++ 'XXxn'];\noutput ['x2: ' ++ show(x2) ++ 'XXxn'];\noutput ['x3: ' ++ show(x3) ++ 'XXxn'];\noutput ['x4: ' ++ show(x4) ++ 'XXxn'];\noutput ['x5: ' ++ show(x5) ++ 'XXxn'];\noutput ['x6: ' ++ show(x6) ++ 'XXxn'];\noutput ['x7: ' ++ show(x7) ++ 'XXxn'];\noutput ['x8: ' ++ show(x8) ++ 'XXxn'];\noutput ['x9: ' ++ show(x9) ++ 'XXxn'];\noutput ['x10: ' ++ show(x10) ++ 'XXxn'];\n\nsolve satisfy;", "Variable Assignment Problem": "% Define the 10 discrete variables\r\nvar 1..100: var1;\r\nvar 1..100: var2;\r\nvar 1..100: var3;\r\nvar 1..100: var4;\r\nvar 1..100: var5;\r\nvar 1..100: var6;\r\nvar 1..100: var7;\r\nvar 1..100: var8;\r\nvar 1..100: var9;\r\nvar 1..100: var10;\r\n\r\n% Constraints (example constraints for demonstration)\r\nconstraint var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9 + var10 = 100;\r\nconstraint var1 * 2 = var2;\r\nconstraint var3 = 20;\r\nconstraint var4 > var5;\r\nconstraint var6 + var7 = 30;\r\nconstraint var8 <= 40;\r\nconstraint var9 != var10;\r\n\r\n% Output (printing the values of the 10 discrete variables)\r\noutput['Variable 1: ' ++ show(var1) ++ 'XXxn'];\r\noutput['Variable 2: ' ++ show(var2) ++ 'XXxn'];\r\noutput['Variable 3: ' ++ show(var3) ++ 'XXxn'];\r\noutput['Variable 4: ' ++ show(var4) ++ 'XXxn'];\r\noutput['Variable 5: ' ++ show(var5) ++ 'XXxn'];\r\noutput['Variable 6: ' ++ show(var6) ++ 'XXxn'];\r\noutput['Variable 7: ' ++ show(var7) ++ 'XXxn'];\r\noutput['Variable 8: ' ++ show(var8) ++ 'XXxn'];\r\noutput['Variable 9: ' ++ show(var9) ++ 'XXxn'];\r\noutput['Variable 10: ' ++ show(var10) ++ 'XXxn'];\r\nsolve satisfy;", "minizinc_discrete_domain_without_constraints": "% Define 10 discrete variables with domain 1..10\nvar 1..10: var1;\nvar 1..10: var2;\nvar 1..10: var3;\nvar 1..10: var4;\nvar 1..10: var5;\nvar 1..10: var6;\nvar 1..10: var7;\nvar 1..10: var8;\nvar 1..10: var9;\nvar 1..10: var10;\n\n% Print the values of the variables\noutput['var1: XXx(var1)XXxn'];\noutput['var2: XXx(var2)XXxn'];\noutput['var3: XXx(var3)XXxn'];\noutput['var4: XXx(var4)XXxn'];\noutput['var5: XXx(var5)XXxn'];\noutput['var6: XXx(var6)XXxn'];\noutput['var7: XXx(var7)XXxn'];\noutput['var8: XXx(var8)XXxn'];\noutput['var9: XXx(var9)XXxn'];\noutput['var10: XXx(var10)XXxn'];\n\n% Add the solve satisfy; statement if needed\nsolve satisfy;", "Minizinc_Constraints": "% 10 discrete variables with domains\nvar 1..10: x1; % variable x1 with domain [1, 10]\nvar 1..10: x2; % variable x2 with domain [1, 10]\nvar 1..10: x3; % variable x3 with domain [1, 10]\nvar 1..10: x4; % variable x4 with domain [1, 10]\nvar 1..10: x5; % variable x5 with domain [1, 10]\nvar 1..10: x6; % variable x6 with domain [1, 10]\nvar 1..10: x7; % variable x7 with domain [1, 10]\nvar 1..10: x8; % variable x8 with domain [1, 10]\nvar 1..10: x9; % variable x9 with domain [1, 10]\nvar 1..10: x10; % variable x10 with domain [1, 10]\n\n% Constraints can be added based on relationships between the variables\n% Add your constraints here\n\n% Example constraint: Ensure that x1 + x2 + x3 = 15\nconstraint x1 + x2 + x3 == 15;\n\n% Add more constraints as needed\n\n% Print the values of the 10 variables once a solution is found\noutput['x1 = ' ++ show(x1) ++ 'XXxn'];\noutput['x2 = ' ++ show(x2) ++ 'XXxn'];\noutput['x3 = ' ++ show(x3) ++ 'XXxn'];\noutput['x4 = ' ++ show(x4) ++ 'XXxn'];\noutput['x5 = ' ++ show(x5) ++ 'XXxn'];\noutput['x6 = ' ++ show(x6) ++ 'XXxn'];\noutput['x7 = ' ++ show(x7) ++ 'XXxn'];\noutput['x8 = ' ++ show(x8) ++ 'XXxn'];\noutput['x9 = ' ++ show(x9) ++ 'XXxn'];\noutput['x10 = ' ++ show(x10) ++ 'XXxn'];\n\nsolve satisfy; % Find a solution that satisfies all constraints", "ArrayDiscreteVariablesNoDomainNoConstraints": "array[1..10] of var int: x; \n\n% Bot comments\nconstraint true; \n\nsolve satisfy; \n\noutput[ 'Solution: ' ++ show(x) ];", "Minizinc Array Constraints": "% Array of discrete variables without domain\narray[1..5] of var 1..10: x; \n\n% Constraints\nconstraint x[1] + x[2] + x[3] + x[4] + x[5] = 20; \n\n% Output the solution\noutput['Values of x: ' ++ show(x) ++ 'XXxn']; \n\n% Solve the problem\nsolve satisfy;", "Array without Constraints": "% Define the size of the array of discrete variables\nint: n; % Size of the array\n\n% Define the domain for the variables (for this example, we choose 0 to 5)\narray[1..n] of var 0..5: variables; % Array of discrete variables with domain 0 to 5\n\n% No constraints specified in the text\n\n% Output the array of variables\noutput['Array of discrete variables: XXx(variables)']; % Print the array\n\n% Add the solve satisfy; statement if needed\nsolve satisfy;", "Discrete Variable Assignment": "% 10 discrete variables\nvar 0..9: x;\nvar 0..9: y;\nvar 0..9: z;\nvar 0..9: w;\nvar 0..9: a;\nvar 0..9: b;\nvar 0..9: c;\nvar 0..9: d;\nvar 0..9: e;\nvar 0..9: f;\n\n% No constraints are specified, so any assignment is valid\n\n% Print out the values of the 10 variables\noutput['x = ' ++ show(x) ++ 'XXxn'];\noutput['y = ' ++ show(y) ++ 'XXxn'];\noutput['z = ' ++ show(z) ++ 'XXxn'];\noutput['w = ' ++ show(w) ++ 'XXxn'];\noutput['a = ' ++ show(a) ++ 'XXxn'];\noutput['b = ' ++ show(b) ++ 'XXxn'];\noutput['c = ' ++ show(c) ++ 'XXxn'];\noutput['d = ' ++ show(d) ++ 'XXxn'];\noutput['e = ' ++ show(e) ++ 'XXxn'];\noutput['f = ' ++ show(f) ++ 'XXxn'];\n\nsolve satisfy;", "Array of Discrete Variables without Constraints": "% Define the number of elements in the array\nint: n; % Number of elements in the array\n\n% Define the array of elements\narray[1..n] of var int: array_elements; % Array of discrete variables\n\n% No constraints to be added as per the description\n\n% Output the array of elements\noutput['Array Elements: '];\noutput['[ '];\n% Loop through and print each element\nfor i in 1..n do\n    if i < n then\n        output['XXx(array_elements[i]), '];\n    else\n        output['XXx(array_elements[i])'];\n    endif;\nend for;\noutput[' ]XXxn'];", "Array Constraint Satisfaction Problem": "int: n;  % Number of elements in the array\nint: m;  % Maximum value of any element in the array\n\n% Array of n elements\narray[1..n] of var 1..m: x;\n\n% Constraints\nconstraint\n  % All elements are within 1 and m\n  forall(i in 1..n) (\n    1 <= x[i] /XXx x[i] <= m\n  ) /XXx\n  \n  % All elements are different\n  forall(i, j in 1..n where i < j) (\n    x[i] != x[j]\n  ) /XXx\n  \n  % No three elements sum up to the fourth\n  forall(i, j, k in 1..n where i < j /XXx j < k) (\n    x[i] + x[j] != x[k] /XXx x[i] + x[k] != x[j] /XXx x[j] + x[k] != x[i]\n  );\n\nsolve satisfy;\n\n% Output\noutput['Array: '];\noutput[show(x)];", "MinizincEmptyDomainProblem": "```minizinc\nint: var1;\nint: var2;\nint: var3;\nint: var4;\nint: var5;\nint: var6;\nint: var7;\nint: var8;\nint: var9;\nint: var10;\n\noutput ['var1: ', show(var1), ' var2: ', show(var2), ' var3: ', show(var3), ' var4: ', show(var4), ' var5: ', show(var5), ' var6: ', show(var6), ' var7: ', show(var7), ' var8: ', show(var8), ' var9: ', show(var9), ' var10: ', show(var10)];\n\nsolve satisfy;\n```", "DiscreteVariableWithNoConstraints": "```minizinc\nint: var1;\nint: var2;\nint: var3;\nint: var4;\nint: var5;\nint: var6;\nint: var7;\nint: var8;\nint: var9;\nint: var10;\n\noutput['Var1: XXx(var1)'];\noutput['Var2: XXx(var2)'];\noutput['Var3: XXx(var3)'];\noutput['Var4: XXx(var4)'];\noutput['Var5: XXx(var5)'];\noutput['Var6: XXx(var6)'];\noutput['Var7: XXx(var7)'];\noutput['Var8: XXx(var8)'];\noutput['Var9: XXx(var9)'];\noutput['Var10: XXx(var10)'];\n\nsolve satisfy;\n```", "DiscreteVariableConstraintSatisfactionProblem": "```minizinc\nint: var1;\nint: var2;\nint: var3;\nint: var4;\nint: var5;\nint: var6;\nint: var7;\nint: var8;\nint: var9;\nint: var10;\n\n% Constraints\nconstraint var1 >= 0 /XXx var1 <= 10;\nconstraint var2 >= 0 /XXx var2 <= 10;\nconstraint var3 >= 0 /XXx var3 <= 10;\nconstraint var4 >= 0 /XXx var4 <= 10;\nconstraint var5 >= 0 /XXx var5 <= 10;\nconstraint var6 >= 0 /XXx var6 <= 10;\nconstraint var7 >= 0 /XXx var7 <= 10;\nconstraint var8 >= 0 /XXx var8 <= 10;\nconstraint var9 >= 0 /XXx var9 <= 10;\nconstraint var10 >= 0 /XXx var10 <= 10;\n\noutput['Var1: XXx(var1)'];\noutput['Var2: XXx(var2)'];\noutput['Var3: XXx(var3)'];\noutput['Var4: XXx(var4)'];\noutput['Var5: XXx(var5)'];\noutput['Var6: XXx(var6)'];\noutput['Var7: XXx(var7)'];\noutput['Var8: XXx(var8)'];\noutput['Var9: XXx(var9)'];\noutput['Var10: XXx(var10)'];\n\nsolve satisfy;\n```", "discrete_variables": "% ParametersXXxnvar 1..10: var1;XXxnvar 1..10: var2;XXxnvar 1..10: var3;XXxnvar 1..10: var4;XXxnvar 1..10: var5;XXxnvar 1..10: var6;XXxnvar 1..10: var7;XXxnvar 1..10: var8;XXxnvar 1..10: var9;XXxnvar 1..10: var10;XXxnXXxn% ConstraintsXXxnconstraint var1 + var2 + var3 + var4 + var5 == 9;XXxnconstraint var6 + var7 + var8 + var9 + var10 == 1;XXxnXXxnsolve satisfy;XXxnXXxn% OutputXXxnoutput [XXxn  'Values: ', show(var1), ', ', show(var2), ', ', show(var3), ', ', show(var4), ', ', show(var5), ', ', show(var6), ', ', show(var7), ', ', show(var8), ', ', show(var9), ', ', show(var10)XXxn];", "Array of Discrete Variables Without Domain and Constraints": "% 10 discrete variables without domain and constraints\n% Variables:\nvar 0..100: x1;\nvar 0..100: x2;\nvar 0..100: x3;\nvar 0..100: x4;\nvar 0..100: x5;\nvar 0..100: x6;\nvar 0..100: x7;\nvar 0..100: x8;\nvar 0..100: x9;\nvar 0..100: x10;\n\n% Display assignments for the variables\noutput['x1: XXx(x1)XXxn'];\noutput['x2: XXx(x2)XXxn'];\noutput['x3: XXx(x3)XXxn'];\noutput['x4: XXx(x4)XXxn'];\noutput['x5: XXx(x5)XXxn'];\noutput['x6: XXx(x6)XXxn'];\noutput['x7: XXx(x7)XXxn'];\noutput['x8: XXx(x8)XXxn'];\noutput['x9: XXx(x9)XXxn'];\noutput['x10: XXx(x10)XXxn'];\n\nsolve satisfy;", "DiscreteVariableWithDomainConstraints": "int: var1; % Values from 1 to 10\nint: var2;\nint: var3;\nint: var4;\nint: var5;\nint: var6;\nint: var7;\nint: var8;\nint: var9;\nint: var10;\n\n% Constraints\nconstraint var1 < var2;\nconstraint var3 <= var4;\nconstraint var5 > var6;\nconstraint var7 >= var8;\nconstraint var9 != 10;\nconstraint var10 == var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9;\n\n% Solve\nsolve satisfy;\n\noutput['Variable 1: XXx(var1)XXxn'];\noutput['Variable 2: XXx(var2)XXxn'];\noutput['Variable 3: XXx(var3)XXxn'];\noutput['Variable 4: XXx(var4)XXxn'];\noutput['Variable 5: XXx(var5)XXxn'];\noutput['Variable 6: XXx(var6)XXxn'];\noutput['Variable 7: XXx(var7)XXxn'];\noutput['Variable 8: XXx(var8)XXxn'];\noutput['Variable 9: XXx(var9)XXxn'];\noutput['Variable 10: XXx(var10)XXxn'];", "DiscreteVariablesArrayNoConstraints": "array[1..5] of var 1..10: x;  % Create an array of 5 discrete variables with domain [1,10].XXxnXXxn% Output the array valuesXXxnoutput['Array Values: XXx(x)XXxXXxn'];", "Minizinc_Discrete_Variables_NoConstraints": "int: n;  % Number of discrete variablesXXxnarray[1..10] of var 0..100: x;  % Array of 10 discrete variables, no domainXXxnconstraint true;  % No actual constraints specifiedXXxnsolve satisfy;  % Solve and outputXXxnoutput [XXxn  'Discrete Variables: ', show(x), 'XXxn'XXxn];", "DiscreteVariablesWithoutConstraints": "int: x1;  % x1 = ... XXxn\nint: x2;  % x2 = ... XXxn\nint: x3;  % x3 = ... XXxn\nint: x4;  % x4 = ... XXxn\nint: x5;  % x5 = ... XXxn\nint: x6;  % x6 = ... XXxn\nint: x7;  % x7 = ... XXxn\nint: x8;  % x8 = ... XXxn\nint: x9;  % x9 = ... XXxn\nint: x10; % x10 = ... XXxn\noutput ['x1: ', show(x1), 'XXxnx2: ', show(x2), 'XXxnx3: ', show(x3), 'XXxnx4: ', show(x4), 'XXxnx5: ', show(x5), 'XXxnx6: ', show(x6), 'XXxnx7: ', show(x7), 'XXxnx8: ', show(x8), 'XXxnx9: ', show(x9), 'XXxnx10: ', show(x10), 'XXxn']; XXxn\nsolve satisfy;", "DiscreteVariableWithDomainAndConstraints": "int: N = 10; % Number of variables\narray[1..N] of var 1..100: x; % 10 discrete variables with domain 1..100\n\n% Constraints\nconstraint forall(i in 1..N) (\n    x[i] >= 1 /XXx x[i] <= 100\n);\n\nsolve satisfy;\n\n% Output\noutput ['x = ']\n++ [show(x[i]) ++ ' ' | i in 1..N];", "DiscreteVariableArrayConstraints": "% MiniZinc model for an array of discrete variables with domain and constraintsXXxnXXxn% ParametersXXxnint: n;          % Number of elements in the arrayXXxnarray[1..n] of var 1..10: x;  % Array of discrete variables with domain 1 to 10XXxnXXxn% ConstraintsXXxn% Example constraint: Sum of the elements is less than 20XXxnconstraint sum(x) < 20;XXxnXXxn% OutputXXxnoutput['Array x: XXx(x)'];XXxnXXxnsolve satisfy;", "FloorResidentsProblem": "int: Baker; % Floor of Baker\nint: Cooper; % Floor of Cooper\nint: Fletcher; % Floor of Fletcher\nint: Miller; % Floor of Miller\nint: Smith; % Floor of Smith\n\n% Domain definition\nconstraint 1 <= Baker /XXx Baker <= 5;\nconstraint 1 <= Cooper /XXx Cooper <= 5;\nconstraint 1 <= Fletcher /XXx Fletcher <= 5;\nconstraint 1 <= Miller /XXx Miller <= 5;\nconstraint 1 <= Smith /XXx Smith <= 5;\n\n% Constraints\nconstraint Baker != 5; % Baker does not live on the 5th floor\nconstraint Cooper != 1; % Cooper does not live on the 1st floor\nconstraint Fletcher != 1 /XXx Fletcher != 5; % Fletcher does not live on the 1st or 5th floor\nconstraint Miller > Cooper; % Miller lives on a higher floor than Cooper\nconstraint abs(Smith - Fletcher) > 1; % Smith is not on a floor adjacent to Fletcher\nconstraint abs(Fletcher - Cooper) > 1; % Fletcher is not on a floor adjacent to Cooper\n\nsolve satisfy;\n\noutput['Baker: ', show(Baker), 'XXxn'];\noutput['Cooper: ', show(Cooper), 'XXxn'];\noutput['Fletcher: ', show(Fletcher), 'XXxn'];\noutput['Miller: ', show(Miller), 'XXxn'];\noutput['Smith: ', show(Smith), 'XXxn'];", "Apple Bribing Problem": "int: gates = 5;  % Number of gates\nint: initial_apples;  % Variable to represent the initial number of apples\n\n% Constraints\nconstraint\n  % Boy must give away half of his apples, plus one, at each gate\n  forall(g in 1..gates) (\n    initial_apples = 2 * (initial_apples div 2 + 1)\n  )\n  /XXx\n  % The total number of apples must be an integer\n  initial_apples mod 2 == 0\n;\n\n% Objective: Find the initial number of apples\nsolve satisfy;\n\noutput['The boy started with: ' ++ show(initial_apples) ++ ' applesXXxn'];", "Apple_Bribing_Problem": "int: gates = 5;  % Number of gates, Boy starts with 'total' apples and gives half of them plus one at each gate. \nint: total = 100;  % Initial total number of apples the boy has, to find out. \n\n% Constraints and Relations\nconstraint total > 0 /XXx total mod 2 == 0;  % Total apples must be even to give equal halves. \nconstraint total div 2 - gates == 0;  % Boy gives half of his apples plus one at each gate. \nconstraint total == 2 * (2 * gates - 1);  % Total apples formula. \n\nsolve satisfy;\n\n% Output\noutput ['Total Apples to Start With: ' ++ show(total) ++ 'XXxn'];", "MagicSquareProblem": "int: n = 4;\nint: MagicSum = n * (n * n + 1) div 2;\n\narray[1..n, 1..n] of var 1..n*n: square;\n\n% All cells should contain different values\nconstraint alldifferent(square);\n\n% Rows must sum up to MagicSum\nconstraint\n    forall(i in 1..n)(\n        sum(j in 1..n)(square[i, j]) = MagicSum\n    );\n\n% Columns must sum up to MagicSum\nconstraint\n    forall(j in 1..n)(\n        sum(i in 1..n)(square[i, j]) = MagicSum\n    );\n\n% Diagonals must sum up to MagicSum\nconstraint\n    sum(i in 1..n)(square[i, i]) = MagicSum /XXx\n    sum(i in 1..n)(square[n - i + 1, i]) = MagicSum;\n\nsolve satisfy;\n\noutput [\n    'Magic Square for n = ', show(n), ':XXxn'\n] ++\n[\n    if j = n then \n        show(square[i, j]) ++ 'XXxn'\n    else \n        show(square[i, j]) ++ ' '\n    endif\n    | i, j in 1..n \n];", "FloorResidentsConstraintProblem": "int: floorMin = 1;  % Minimum floor number\nint: floorMax = 5;  % Maximum floor number\n\n% Decision variables: Assign a floor to each person\narray[1..5] of var floorMin..floorMax: floors;\n\n% Constraints based on the problem description\nconstraint forall(p in 1..5)(\n    floors[p] != 5  % Baker does not live on the 5th floor\n);\nconstraint forall(p in 1..5)(\n    floors[p] != 1  % Cooper does not live on the 1st floor\n);\nconstraint forall(p in 1..5)(\n    floors[p] != 1 /XXx floors[p] != 5  % Fletcher does not live on the 1st or 5th floor\n);\nconstraint floors[4] > floors[2];  % Miller lives on a higher floor than Cooper\nconstraint abs(floors[5] - floors[3]) != 1;  % Smith does not live on a floor adjacent to Fletcher\nconstraint abs(floors[3] - floors[2]) != 1;  % Fletcher does not live on a floor adjacent to Cooper\n\nconstraint all_different(floors);  % All people live on different floors\n\nsolve satisfy;\n\n% Output the assignment of people to floors\noutput['Baker lives on floor: ' ++ show(floors[1]) ++ 'XXxn'];\noutput['Cooper lives on floor: ' ++ show(floors[2]) ++ 'XXxn'];\noutput['Fletcher lives on floor: ' ++ show(floors[3]) ++ 'XXxn'];\noutput['Miller lives on floor: ' ++ show(floors[4]) ++ 'XXxn'];\noutput['Smith lives on floor: ' ++ show(floors[5]) ++ 'XXxn'];", "AppleBribingProblem": "int: gates = 5; % Number of gates\nint: guards = 5; % Total number of guards\n\n% Define the variables\nvar 1..1000: boy_initial_apples; % Initial number of apples the boy must have\narray[1..guards] of var 1..100: apples_given; % Number of apples given to each guard\n\n% Constraints\nconstraint apples_given[1] = (boy_initial_apples div 2) + 1;\nconstraint sum(apples_given) = boy_initial_apples;\n\n% Objective: Find the minimum initial apples value\nsolve satisfy;\n\n% Output\noutput ['Initial Apples: ' ++ show(boy_initial_apples) ++ 'XXxn'];\noutput ['Apples given to each guard: ' ++ show(apples_given) ++ 'XXxn'];", "MagicSquareConstraintProblem": "int: n = 4;\n\n% Decision variables: Values in each cell of the magic square\narray[1..n, 1..n] of var 1..n*n: square;\n\n% Constraints: The sum of each row, column, and diagonal must be equal to 34 for a 4x4 magic square\nconstraint\n    forall(i in 1..n)(\n        sum(j in 1..n)(square[i, j]) = n*(n^2+1) div 2 /XXx\n        sum(j in 1..n)(square[j, i]) = n*(n^2+1) div 2\n    );\nconstraint\n    sum(i in 1..n)(square[i, i]) = n*(n^2+1) div 2 /XXx\n    sum(i in 1..n)(square[i, n+1-i]) = n*(n^2+1) div 2;\n\n% Solve and output the magic square\nsolve satisfy;\n\noutput [\n    'Magic Square for n = 4: XXxn'\n] ++ [\n    if j = 1 then 'XXxn' else '' endif ++\n    show(square[i, j]) ++ if j < n then ' ' else '' endif\n    | i, j in 1..n\n];", "FloorResidentsModel": "% Decision variables: The floor each person lives on\narray[1..5] of var 1..5: floors;\n\n% Constraints based on the textual description\nconstraint floors[1] != 5 /XXx floors[2] != 1 /XXx floors[3] != 1 /XXx floors[3] != 5 /XXx\n  floors[4] != floors[2] /XXx abs(floors[5] - floors[3]) != 1 /XXx abs(floors[3] - floors[2]) != 1;\n\n% Additional constraint to ensure all persons live on different floors\nconstraint all_different(floors);\n\nsolve satisfy;\n\noutput ['Baker: ' ++ show(floors[1]) ++ 'XXxn',\n        'Cooper: ' ++ show(floors[2]) ++ 'XXxn',\n        'Fletcher: ' ++ show(floors[3]) ++ 'XXxn',\n        'Miller: ' ++ show(floors[4]) ++ 'XXxn',\n        'Smith: ' ++ show(floors[5]) ++ 'XXxn'];", "DistinctDigitNumberConstraintProblem": "var 1..9: a; \nvar 1..9: b; \nvar 1..9: c; \nvar 1..9: d;\nconstraint all_different([a, b, c, d]);\nvar 10..99: ab = 10 * a + b;\nvar 10..99: cd = 10 * c + d;\nvar 10..99: bc = 10 * b + c;\nvar 10..99: da = 10 * d + a;\nconstraint cd = 3 * ab /XXx da = 2 * bc;\nsolve satisfy;\noutput ['The pin is: ', show(a), show(b), show(c), show(d), 'XXxn'];", "Logic grid puzzle": "set of int: FLOORS = 1..5;\n\n% Variables representing the floor each person lives on\nvar FLOORS: Baker;   % from dzn\nvar FLOORS: Cooper;  % from dzn\nvar FLOORS: Fletcher;  % from dzn\nvar FLOORS: Miller;  % from dzn\nvar FLOORS: Smith;  % from dzn\n\n% Constraints\nconstraint Baker != 5;\nconstraint Cooper != 1;\nconstraint Fletcher != 1 /XXx Fletcher != 5;\nconstraint Miller > Cooper;\nconstraint abs(Fletcher - Smith) != 1;\nconstraint abs(Fletcher - Cooper) != 1;\nconstraint all_different([Baker, Cooper, Fletcher, Miller, Smith]);\n\nsolve satisfy;\n\n% Output\noutput['Baker lives on floor '] = show(Baker) ++ 'XXxn';\noutput['Cooper lives on floor '] = show(Cooper) ++ 'XXxn';\noutput['Fletcher lives on floor '] = show(Fletcher) ++ 'XXxn';\noutput['Miller lives on floor '] = show(Miller) ++ 'XXxn';\noutput['Smith lives on floor '] = show(Smith) ++ 'XXxn';", "Mathematical Modeling.": "```minizinc\nint: num_guards = 5; % from dzn\nvar int: boy_initial_apples; % from dzn\narray[1..num_guards] of var int: apples_given_to_guard; \n\nconstraint forall(i in 1..num_guards)(\n    apples_given_to_guard[i] = boy_initial_apples div 2 + 1\n);\n\nvar int: total_apples_given_away = sum(i in 1..num_guards)(apples_given_to_guard[i]);\n\nsolve satisfy;\n\noutput ['The boy initially had: ', show(boy_initial_apples)];\n```", "Magic Square Problem": "```minizinc\nint: n;  % dimension of the grid\n\narray[1..n, 1..n] of var 1..(n*n): grid;\n\n% Constraint: Each cell contains a different integer\nconstraint forall(i, j in 1..n where i < j) (\n    grid[i, j] != grid[j, i]\n);\n\n% Constraint: The sum of each row must be equal\nconstraint forall(i in 1..n) (\n    sum(j in 1..n)(grid[i, j]) == sum(k in 1..n)(grid[1, k])  % Sum of the first row as target\n);\n\n% Constraint: The sum of each column must be equal\nconstraint forall(j in 1..n) (\n    sum(i in 1..n)(grid[i, j]) == sum(k in 1..n)(grid[1, k])  % Sum of the first row as target\n);\n\n% Constraint: The sum of the main diagonal must be equal\nconstraint sum(i in 1..n)(grid[i, i]) == sum(k in 1..n)(grid[1, k]);  % Sum of the first row as target\n\n% Constraint: The sum of the secondary diagonal must be equal\nconstraint sum(i in 1..n)(grid[i, n - i + 1]) == sum(k in 1..n)(grid[1, k]);  % Sum of the first row as target\n\n% Additional constraint: Ensure n != 2 is implicitly satisfied as we will provide n in the input\n\nsolve satisfy;\n\noutput ['Grid: ', show(grid)];\n```", "Integer Linear Programming": "int: num_bags; % Total number of bags of coins\n\n% Number of coins in each type of bag\nint: coins_16 = 16;\nint: coins_17 = 17;\nint: coins_23 = 23;\nint: coins_24 = 24;\nint: coins_39 = 39;\nint: coins_40 = 40;\n\n% Number of bags stolen for each type\n% Variables representing the bags stolen for each type\nvar 0..num_bags: stolen_16;\nvar 0..num_bags: stolen_17;\nvar 0..num_bags: stolen_23;\nvar 0..num_bags: stolen_24;\nvar 0..num_bags: stolen_39;\nvar 0..num_bags: stolen_40;\n\n% Total coins stolen\nconstraint stolen_16*coins_16 + stolen_17*coins_17 + stolen_23*coins_23 +\n           stolen_24*coins_24 + stolen_39*coins_39 + stolen_40*coins_40 = 100;\n\n% Solve the problem\nsolve satisfy;\n\n% Output the number of bags stolen for each type\noutput['Bags stolen for 16 coins: ' ++ show(stolen_16) ++ 'XXxn'];\noutput['Bags stolen for 17 coins: ' ++ show(stolen_17) ++ 'XXxn'];\noutput['Bags stolen for 23 coins: ' ++ show(stolen_23) ++ 'XXxn'];\noutput['Bags stolen for 24 coins: ' ++ show(stolen_24) ++ 'XXxn'];\noutput['Bags stolen for 39 coins: ' ++ show(stolen_39) ++ 'XXxn'];\noutput['Bags stolen for 40 coins: ' ++ show(stolen_40) ++ 'XXxn'];", "Ratio Constraint Satisfaction Problem": "int: total_people = 13;  % Total number of people\nint: num_males = 4;        % Total number of males\nint: females = total_people - num_males;  % Calculate number of females\n\n% Ratio of females to males should not exceed 7/3 at any point\nconstraint females / num_males <= 7 / 3;\n\n% Solve the model\nsolve satisfy;\n\n% Output the final configuration\noutput['Number of females: ' ++ show(females) ++ 'XXxnNumber of males: ' ++ show(num_males)];", "Equal Distribution Problem": "int: total_cows = 25; % Total number of cowsXXxnarray[1..total_cows] of int: milk_production = [i | i in 1..total_cows]; % Milk production of each cowXXxnXXxn% Number of cows each son receivesXXxnarray[1..5] of int: sons_cow_requirements = [7, 6, 5, 4, 3];XXxnXXxn% Calculate the total milk production of all cowsXXxnint: total_milk = sum(milk_production);XXxnXXxn% Each son's milk requirementXXxnint: milk_per_son = total_milk div 5;XXxnXXxn% Check if the total milk can be evenly distributedXXxnconstraint total_milk mod 5 == 0;XXxnXXxn% Decision variables: which cows each son getsXXxnarray[1..5, 1..total_cows] of var 0..1: assigned;XXxnXXxn% Each cow is assigned to exactly one sonXXxnconstraint forall(c in 1..total_cows) (XXxn    sum(s in 1..5) (assigned[s, c]) == 1XXxn);XXxnXXxn% Each son gets the required number of cowsXXxnconstraint forall(s in 1..5) (XXxn    sum(c in 1..total_cows) (assigned[s, c]) == sons_cow_requirements[s]XXxn);XXxnXXxn% Each son gets the required amount of milkXXxnconstraint forall(s in 1..5) (XXxn    sum(c in 1..total_cows) (assigned[s, c] * milk_production[c]) == milk_per_sonXXxn);XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn  'Son 1 cows: ', show([c | c in 1..total_cows where assigned[1, c] == 1]), 'XXxn',XXxn  'Son 2 cows: ', show([c | c in 1..total_cows where assigned[2, c] == 1]), 'XXxn',XXxn  'Son 3 cows: ', show([c | c in 1..total_cows where assigned[3, c] == 1]), 'XXxn',XXxn  'Son 4 cows: ', show([c | c in 1..total_cows where assigned[4, c] == 1]), 'XXxn',XXxn  'Son 5 cows: ', show([c | c in 1..total_cows where assigned[5, c] == 1]), 'XXxn'XXxn];", "Linear Equations": "int: a; % from dznXXxnint: b; % from dznXXxnint: c; % from dznXXxnint: d; % from dznXXxnXXxnarray[1..4] of var 1..711: prices = [a, b, c, d]; % prices in centsXXxnvar int: total = sum(prices);XXxnXXxnconstraint total == 711;XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn  'The prices of the four items are: ', show(a), ', ', show(b), ', ', show(c), ', ', show(d), 'XXxn'XXxn];", "Diophantine Equations": "int: total_coins = 100; % Total number of coins stolen\n\n% Number of bags stolen for each type of coin bag\nvar 0..100: bags_16;\nvar 0..100: bags_17;\nvar 0..100: bags_23;\nvar 0..100: bags_24;\nvar 0..100: bags_39;\nvar 0..100: bags_40;\n\n% Objective: Minimize the number of bags stolen\nsolve satisfy;\n\n% Constraint: Total number of bags stolen must add up to 100\nconstraint 16 * bags_16 + 17 * bags_17 + 23 * bags_23 + 24 * bags_24 + 39 * bags_39 + 40 * bags_40 == total_coins; \n\n% Output the solution\noutput['Bags of 16 coins: ' ++ show(bags_16) ++ 'XXxn'];\noutput['Bags of 17 coins: ' ++ show(bags_17) ++ 'XXxn'];\noutput['Bags of 23 coins: ' ++ show(bags_23) ++ 'XXxn'];\noutput['Bags of 24 coins: ' ++ show(bags_24) ++ 'XXxn'];\noutput['Bags of 39 coins: ' ++ show(bags_39) ++ 'XXxn'];\noutput['Bags of 40 coins: ' ++ show(bags_40) ++ 'XXxn'];", "FourDigitPinProblem": "```minizinc\n% Define input parameters\nvar 1..9: a; % from dzn\nvar 0..9: b; % from dzn\nvar 0..9: c; % from dzn\nvar 0..9: d; % from dzn\n\n% Constraints\nconstraint all_different([a, b, c, d]); % No two digits are the same.\n\n% Relations\nvar 0..99: ab = a*10 + b;\nvar 0..99: cd = c*10 + d;\nvar 0..99: bc = b*10 + c;\nvar 0..99: da = d*10 + a;\n\nconstraint cd == 3 * ab; % The 2-digit number cd is 3 times the 2-digit number ab.\nconstraint da == 2 * bc; % The 2-digit number da is 2 times the 2-digit number bc.\n\n% Output\noutput['Pin number (abcd): ', show(ab), show(cd), show(bc), show(da)];\n\nsolve satisfy;\n```", "Backward Induction": "int: gates;\nint: apples_given;\n\nvar 0..100: total_apples;\n\nconstraint total_apples - gates - apples_given == 0;\n\noutput [total_apples];\n\nsolve satisfy;", "Magic Square": "int: n = 4; % Size of the magic square (4 for a 4x4 grid) XXxnarray[1..n, 1..n] of var 1..(n*n): square; % 4x4 grid of integers from 1 to 16XXxnXXxnconstraintXXxn  % Each number from 1 to n^2 appears exactly onceXXxn  forall(i, j in 1..n) (XXxn    forall(k in i+1..n, l in 1..n) (square[i,j] != square[k,l]) /XXxXXxn    forall(k in 1..n, l in j+1..n) (square[i,j] != square[k,l])XXxn  ) /XXxXXxnXXxn  % Sum of each rowXXxn  forall(i in 1..n) (XXxn    sum(j in 1..n)(square[i,j]) == n * (n*n + 1) / 2XXxn  ) /XXxXXxnXXxn  % Sum of each columnXXxn  forall(j in 1..n) (XXxn    sum(i in 1..n)(square[i,j]) == n * (n*n + 1) / 2XXxn  ) /XXxXXxnXXxn  % Sum of the main diagonalXXxn  sum(i in 1..n)(square[i,i]) == n * (n*n + 1) / 2 /XXxXXxnXXxn  % Sum of the secondary diagonalXXxn  sum(i in 1..n)(square[i,n+1-i]) == n * (n*n + 1) / 2;XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn  'Magic Square:XXxn',XXxn  concat([concat([show(square[i,j]) ++ 'XXxt' | j in 1..n]) ++ 'XXxn' | i in 1..n])XXxn];", "Logic Puzzle - Guilty Suspect Identification": "```minizinc\n% Input parameters\narray[1..6] of var bool: statements; % from dzn\nvar 2..6: capacity; % from dzn\n\n% Constraints\nconstraint forall(i in 1..6)(statements[i] <-> (i != 1 /XXx i != 2));\nconstraint sum(statements) = capacity;\n\n% Solve\nsolve satisfy;\n\noutput[statements];\n```", "Logic Puzzle": "int: floors = 5; % Number of floorsXXxnint: people = 5; % Number of peopleXXxnXXxn% Variables representing the floor each person lives onXXxnarray[1..people] of var 1..floors: B; % BakerXXxnarray[1..people] of var 1..floors: C; % CooperXXxnarray[1..people] of var 1..floors: F; % FletcherXXxnarray[1..people] of var 1..floors: M; % MillerXXxnarray[1..people] of var 1..floors: S; % SmithXXxnXXxn% ConstraintsXXxnconstraint B[5] != 5; % Clue 1: B does not live on the 5th floorXXxnconstraint C[1] != 1; % Clue 2: C does not live on the 1st floorXXxnconstraint F[1] != 1 /XXx F[1] != 5; % Clue 3: F does not live on the 5th or 1st floorsXXxnconstraint M[1] > C[1]; % Clue 4: M lives on a higher floor than CXXxnconstraint abs(S[1] - F[1]) > 1; % Clue 5: S does not live on a floor adjacent to FXXxnconstraint abs(F[1] - C[1]) > 1; % Clue 6: F does not live on a floor adjacent to CXXxnXXxn% All persons must live on different floorsXXxnconstraint all_different([B[1], C[1], F[1], M[1], S[1]]);XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn  'Baker (B) lives on floor: ', show(B[1]), 'XXxn',XXxn  'Cooper (C) lives on floor: ', show(C[1]), 'XXxn',XXxn  'Fletcher (F) lives on floor: ', show(F[1]), 'XXxn',XXxn  'Miller (M) lives on floor: ', show(M[1]), 'XXxn',XXxn  'Smith (S) lives on floor: ', show(S[1]), 'XXxn'XXxn];", "Ratio Constraint Problem": "int: M_init = 4; % Initial number of malesXXxnint: F_init = 9; % Initial number of femalesXXxnint: M_max_ratio = 7; % Maximum females to males ratio numeratorXXxnint: M_min_ratio = 3; % Maximum females to males ratio denominatorXXxnint: total_people = M_init + F_init; % Total number of peopleXXxnXXxn% We can represent the entry of males and females as a sequence of variablesXXxnarray[1..total_people] of var 0..1: entry; % 0 for male, 1 for femaleXXxnXXxn% Track the number of males and females in the room at any pointXXxnarray[0..total_people] of var 0..total_people: males_in_room;XXxnarray[0..total_people] of var 0..total_people: females_in_room;XXxnXXxnconstraint males_in_room[0] = 0 /XXx females_in_room[0] = 0; % Initial condition (empty room)XXxnXXxn% Update the counts based on the entry sequenceXXxnconstraint forall(i in 1..total_people) (XXxn    males_in_room[i] = males_in_room[i-1] + (if entry[i] == 0 then 1 else 0 endif) /XXxXXxn    females_in_room[i] = females_in_room[i-1] + (if entry[i] == 1 then 1 else 0 endif)XXxn);XXxnXXxn% Maintain the ratio constraint at all timesXXxnconstraint forall(i in 1..total_people) (XXxn    females_in_room[i] <= (M_max_ratio / M_min_ratio) * males_in_room[i]XXxn);XXxnXXxn% We need to reach the final condition with the males and femalesXXxnconstraint males_in_room[total_people] = M_init /XXx females_in_room[total_people] = F_init;XXxnXXxn% Solve the problemXXxnsolve satisfy;XXxnXXxnoutput ['Entry sequence: ' ++ show(entry) ++ 'XXxn' ++XXxn        'Males in room at each step: ' ++ show(males_in_room) ++ 'XXxn' ++XXxn        'Females in room at each step: ' ++ show(females_in_room)];", "Fair Division\u95ee\u9898": "```minizinc\nint: total_cows; % from dzn\nint: num_sons; % from dzn\n\narray[1..25] of int: milk_produced = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];\n\narray[1..num_sons] of var 0..total_cows: cows_given;\n\nconstraint sum(cows_given) == total_cows;\n\nconstraint forall(i in 1..num_sons)(\n    cows_given[i] == 8 - i\n);\n\nsolve satisfy;\n\noutput['cows_given'] = cows_given;\n```", "Floor Puzzle": "% Variables representing the floors where each person lives\nvar 1..5: Baker;    % from dzn\nvar 1..5: Cooper;   % from dzn\nvar 1..5: Fletcher; % from dzn\nvar 1..5: Miller;   % from dzn\nvar 1..5: Smith;    % from dzn\n\n% Constraints based on textual description\nconstraint all_different([Baker, Cooper, Fletcher, Miller, Smith]);\n\nconstraint Baker != 5; % Baker does not live on the fifth floor\nconstraint Cooper != 1; % Cooper does not live on the first floor\nconstraint Fletcher != 1 /XXx Fletcher != 5; % Fletcher does not live on the first or fifth floor\nconstraint Miller > Cooper; % Miller lives on a higher floor than Cooper\nconstraint abs(Fletcher - Smith) > 1; % Smith does not live on a floor adjacent to Fletcher\nconstraint abs(Fletcher - Cooper) > 1; % Fletcher does not live on a floor adjacent to Cooper\n\nsolve satisfy;\n\noutput ['Baker: ', show(Baker), 'XXxn',\n        'Cooper: ', show(Cooper), 'XXxn',\n        'Fletcher: ', show(Fletcher), 'XXxn',\n        'Miller: ', show(Miller), 'XXxn',\n        'Smith: ', show(Smith), 'XXxn'];", "Pin Problem": "% Semantic entities extracted: \r\n% Input parameters: a, b, c, d (4 digits for the pin code) \r\n\r\n% Constraints: \r\n% - My bank card has a 4 digit pin, so each digit is in the range 0-9 \r\n% - No two digits are the same (a, b, c, d are distinct) \r\n% - The 2-digit number cd is 3 times the 2-digit number ab (10c + d = 3(10a + b)) \r\n% - The 2-digit number da is 2 times the 2-digit number bc (10d + a = 2(10b + c)) \r\n\r\nvar 0..9: a; \r\nvar 0..9: b; \r\nvar 0..9: c; \r\nvar 0..9: d; \r\n\r\nconstraint all_different([a, b, c, d]); \r\nconstraint 10*c + d == 3*(10*a + b); \r\nconstraint 10*d + a == 2*(10*b + c); \r\n\r\nsolve satisfy; \r\n\r\noutput [ show(a) ++ show(b) ++ show(c) ++ show(d) ];", "Brainteaser": "include 'globals.mzn'; \n\nint: gates = 5; \n\nvar 0..100: initial_apples; \n\narray[0..gates] of var 0..100: apples; \n\nconstraint 2 * initial_apples == sum(g in 0..gates-1)(apples[g]); \nconstraint apples[gates] == 0; \n\nconstraint forall(i in 0..gates-1)( \n  apples[i+1] == (apples[i] div 2) - 1 \n); \n\nsolve satisfy; \n\noutput['The boy started with ' ++ show(initial_apples) ++ ' apples.' ++ 'XXxn'];", "4x4 Magic Square with Sum 34": "int: n = 4;  % Grid size (n x n)\nint: target_sum = 34;  % Target sum for each row, column, and diagonal\narray[1..n, 1..n] of var 1..16: grid;  % Each cell in the grid can be 1 to 16\n\n% Constraints: All numbers in the grid must be integers\nconstraint forall(i, j in 1..n)(\n    grid[i, j] in 1..16\n);\n\n% Constraints: Rows, columns, and diagonals must sum to the target value\nconstraint forall(i in 1..n)(\n    sum(j in 1..n)(grid[i, j]) = target_sum /XXx\n    sum(j in 1..n)(grid[j, i]) = target_sum\n);\nconstraint sum(i in 1..n)(grid[i, i]) = target_sum;  % Main diagonal\nconstraint sum(i in 1..n)(grid[i, n - i + 1]) = target_sum;  % Anti-diagonal\n\nsolve satisfy;\n\n% Output the magic square\noutput [\n    'XXxnMagic Square:XXxn',\n    show(grid[1,1]) ++ ' ' ++ show(grid[1,2]) ++ ' ' ++ show(grid[1,3]) ++ ' ' ++ show(grid[1,4]) ++ 'XXxn' ++\n    show(grid[2,1]) ++ ' ' ++ show(grid[2,2]) ++ ' ' ++ show(grid[2,3]) ++ ' ' ++ show(grid[2,4]) ++ 'XXxn' ++\n    show(grid[3,1]) ++ ' ' ++ show(grid[3,2]) ++ ' ' ++ show(grid[3,3]) ++ ' ' ++ show(grid[3,4]) ++ 'XXxn' ++\n    show(grid[4,1]) ++ ' ' ++ show(grid[4,2]) ++ ' ' ++ show(grid[4,3]) ++ ' ' ++ show(grid[4,4]) ++ 'XXxn'\n];", "Logic Puzzles": "% Parameters given by the suspects (0 for innocent, 1 for guilty)\nvar 0..1: artie; % from dzn\nvar 0..1: bill; % from dzn\nvar 0..1: crackitt; % from dzn\nvar 0..1: dodgy; % from dzn\nvar 0..1: edgy; % from dzn\nvar 0..1: fingers; % from dzn\n\n% Constraints based on the statements:\nconstraint\n    % Getaway car was barely big enough for two people\n    sum([artie, bill, crackitt, dodgy, edgy, fingers]) >= 1 /XXx\n    sum([artie, bill, crackitt, dodgy, edgy, fingers]) <= 2 /XXx\n    \n    % Innocent suspects tell the truth, guilty suspect(s) lie\n    (artie = 0 XXx/ artie = 1 /XXx artie = 1) /XXx\n    (bill = 0 XXx/ bill = 1 /XXx bill = 1) /XXx\n    (crackitt = 0 XXx/ crackitt = 1 /XXx crackitt = 0) /XXx\n    (dodgy = 0 XXx/ dodgy = 1 /XXx dodgy = 1) /XXx\n    (edgy = 0 XXx/ edgy = 1 /XXx edgy = 1) /XXx\n    (fingers = 0 XXx/ fingers = 1 /XXx fingers = 1) /XXx\n    \n    % Relations between the suspects\n    (crackitt = 1 -> bill = 1) /XXx\n    (artie = 1 -> dodgy = 1) /XXx\n    (fingers = 1 -> artie = 1 /XXx dodgy = 1) /XXx\n    (crackitt = 1 -> bill = 0) /XXx\n    (dodgy = 1 -> artie = 0) /XXx\n    (edgy = 1 -> bill = 1) /XXx\n    (bill = 1 -> crackitt = 0) /XXx\n    (artie = 0 /XXx bill = 0 /XXx crackitt = 0 /XXx dodgy = 0 /XXx edgy = 0 /XXx fingers = 0 -> crackitt = 0) /XXx\n    (artie = 0 /XXx bill = 0 /XXx crackitt = 0 /XXx dodgy = 0 /XXx edgy = 0 /XXx fingers = 0 -> bill = 1) /XXx\n    (artie = 0 /XXx bill = 0 /XXx crackitt = 0 /XXx dodgy = 0 /XXx edgy = 0 /XXx fingers = 0 -> dodgy = 1) /XXx\n    (artie = 0 /XXx bill = 0 /XXx crackitt = 0 /XXx dodgy = 0 /XXx edgy = 0 /XXx fingers = 0 -> edgy = 1) /XXx\n    (artie = 0 /XXx bill = 0 /XXx crackitt = 0 /XXx dodgy = 0 /XXx edgy = 0 /XXx fingers = 0 -> fingers = 1)\n;\n\n% Solve the problem\nsolve satisfy;\n\n% Output the guilty suspect(s)\noutput['Guilty: '];\nif artie = 1 then output['Artie ']; endif;\nif bill = 1 then output['Bill ']; endif;\nif crackitt = 1 then output['Crackitt ']; endif;\nif dodgy = 1 then output['Dodgy ']; endif;\nif edgy = 1 then output['Edgy ']; endif;\nif fingers = 1 then output['Fingers ']; endif;\noutput['XXxn'];", "Partition Problem": "% Extracted semantic entities:\n% Input: Set of integers\n% Constraints: Disjoint, non-empty subsets S and T, Sum(S) = Sum(T)\n\nint: n; % from dzn\nset of int: DATA = 1..n;\n\narray[DATA] of var 0..1: S; % S[i] = 1 if i in S, 0 otherwise\narray[DATA] of var int: values; % values[i] = i * S[i]\nvar int: sum_S = sum(i in DATA)(values[i]);\nvar int: sum_T = sum(i in DATA)(i - values[i]);\n\n% Constraints:\nconstraint sum(S) > 0 /XXx sum(S) < n; % Non-empty subsets\nconstraint sum_S == sum_T; % Equal sums\n\nsolve satisfy;\n\noutput ['S: '];\noutput [show(i) | i in DATA where S[i] = 1];\noutput ['XXxnT: '];\noutput [show(i) | i in DATA where S[i] = 0];", "Male-Female Ratio Problem": "int: total_people = 13; % Total number of people\nint: male_count = 4; % Number of males\nint: female_count = total_people - male_count; % Number of females\n\nint: max_males_in_room = 3; % Maximum number of males that can be in the room at any time to maintain 7/3 ratio\n\n% Decision variables: sequence of males (1) and females (0) entering the room\narray[1..total_people] of var 0..1: people_sequence;\n\n% Constraint to ensure that at any point, the ratio of females to males in the room is <= 7/3\nconstraint\n    forall(i in 1..total_people) (\n        % Calculate number of males and females in the room up to this point\n        let {\n            var int: males_in_room = sum(j in 1..i where people_sequence[j] == 1) (1);\n            var int: females_in_room = i - males_in_room;\n        } in\n        % Check the ratio constraint\n        females_in_room * 3 <= males_in_room * 7 + 1\n        % We add +1 to make the comparison strict, allowing 7 females for 3 males exactly\n    );\n\n% Find a valid sequence of people entering the room\nsolve satisfy;\n\n% Output the sequence of people (1 for male, 0 for female) entering the room\noutput [show(people_sequence)];", "System of Equations": "int: total = 711;  % Total in cents (711 cents = $7.11)\n\n% Prices of the four items\narray[1..4] of var 1..711: items;\n\n% The sum of the prices must be equal to the total\nconstraint items[1] + items[2] + items[3] + items[4] == total;\n\n% The prices must be positive\nconstraint forall(i in 1..4)(items[i] > 0);\n\nsolve satisfy;\n\noutput['Prices of the four items: '];\noutput[show(items)];", "Pythagorean Quadruple": "% Given the problem description, we need to find four different numbers a, b, c, and d in the range of 1 to 100, such that a^2 + b^2 = c^2 + d^2.\n\n% Define decision variables\nvar 1..100: a; % a in the range [1, 100]\nvar 1..100: b; % b in the range [1, 100]\nvar 1..100: c; % c in the range [1, 100]\nvar 1..100: d; % d in the range [1, 100]\n\n% Constraint: The numbers a, b, c, and d must be different from each other\nconstraint all_different([a, b, c, d]);\n\n% Constraint: The equation a^2 + b^2 = c^2 + d^2 must be satisfied\nconstraint a*a + b*b = c*c + d*d;\n\n% Find a solution that satisfies all constraints\nsolve satisfy;\n\n% Output the solution\noutput ['a: ', show(a), 'XXxn'];\noutput ['b: ', show(b), 'XXxn'];\noutput ['c: ', show(c), 'XXxn'];\noutput ['d: ', show(d), 'XXxn'];", "Cryptarithmetic": "% Define the digits of the pin (4 unique digits from 1 to 9)\nvar 1..9: a; \nvar 1..9: b; \nvar 1..9: c; \nvar 1..9: d; \n\n% Constraints based on the given information\nconstraint all_different([a, b, c, d]);\n\n% Form the 4-digit pin number\nvar 1000..9999: pin = 1000*a + 100*b + 10*c + d;\n\n% Form the 2-digit numbers from the pin digits\nvar 10..99: ab = 10*a + b;\nvar 10..99: cd = 10*c + d;\nvar 10..99: bc = 10*b + c;\nvar 10..99: da = 10*d + a;\n\n% Additional constraints based on the given information\nconstraint cd == 3*ab;  % The 2-digit number cd is 3 times the 2-digit number ab\nconstraint da == 2*bc;  % The 2-digit number da is 2 times the 2-digit number bc\n\nsolve satisfy;\n\n% Output the pin and the corresponding 2-digit numbers\noutput['Pin: ' ++ show(pin) ++ 'XXxn'];\noutput['ab: ' ++ show(ab) ++ 'XXxn'];\noutput['cd: ' ++ show(cd) ++ 'XXxn'];\noutput['bc: ' ++ show(bc) ++ 'XXxn'];\noutput['da: ' ++ show(da) ++ 'XXxn'];", "Logic Game: Logic Puzzle": "% The six suspects\nint: Artie = 0; % from dzn\nint: Bill = 0; % from dzn\nint: Crackitt = 0; % from dzn\nint: Dodgy = 0; % from dzn\nint: Edgy = 0; % from dzn\nint: Fingers = 0; % from dzn\n\n% Truth values: 1 means the suspect is guilty, 0 means the suspect is innocent\narray[1..6] of var 0..1: Guilty;\n\n% Constraints based on the statements made by the suspects\nconstraint Artie = 0 XXx/ Guilty[1] = 1;\nconstraint Bill = 0 XXx/ Guilty[2] = 1;\nconstraint Crackitt = 0 XXx/ Guilty[3] = 1;\nconstraint Dodgy = 0 XXx/ Guilty[4] = 1;\nconstraint Edgy = 0 XXx/ Guilty[5] = 1;\nconstraint Fingers = 0 XXx/ Guilty[6] = 1;\n\n% Constraint that at least four suspects are innocent\nconstraint sum(Guilty) >= 2;\n\n% Constraint that the getaway car was barely big enough for two people\nconstraint sum(Guilty) <= 2;\n\n% Additional constraints based on the statements to ensure consistency\nconstraint Guilty[3] = 0;\nconstraint Guilty[6] = 0 -> Guilty[1] = 1 /XXx Guilty[4] = 1;\nconstraint Guilty[5] = 0 -> (Guilty[1] = 1 XXx/ Guilty[2] = 1 XXx/ Guilty[3] = 1 XXx/ Guilty[4] = 1 XXx/ Guilty[6] = 1);\n\nsolve satisfy;\n\noutput['Guilty: '];\noutput[show(Guilty)];", "Coin Combination Problem": "```minizinc\nint: total_coins = 100; % from dzn\narray[1..6] of int: bag_sizes = [16, 17, 23, 24, 39, 40]; % from dzn\narray[1..6] of var 0..total_coins: bag_counts; % number of bags of each size\n\nconstraint sum(i in 1..6)(bag_sizes[i] * bag_counts[i]) = total_coins;\n\nsolve satisfy;\n\noutput [ show(bag_counts) ];\n```", "Equal Sum Subsets": "% Set A of ten integers\narray[1..10] of var int: A; % from dzn\n\n% Variables for the subsets S and T (binary decision variables)\narray[1..10] of var 0..1: S;\narray[1..10] of var 0..1: T;\n\n% Constraint: S and T must be disjoint and non-empty\nconstraint sum(i in 1..10)(S[i]) > 0 /XXx sum(i in 1..10)(T[i]) > 0 /XXx\n  forall(i, j in 1..10 where i != j)(S[i] + T[i] <= 1);\n\n% Constraint: The sum of elements in S must equal the sum of elements in T\nconstraint sum(i in 1..10)(S[i] * A[i]) = sum(i in 1..10)(T[i] * A[i]);\n\nsolve satisfy;\n\n% Output the subsets S and T\narray[1..10] of var 0..1: S_output = [S[i] | i in 1..10];\narray[1..10] of var 0..1: T_output = [T[i] | i in 1..10];\n\noutput['S = '];\noutput [show(S_output)];\noutput['XXxn'];\noutput['T = '];\noutput [show(T_output)];", "Logic Grid Puzzle": "% Define the set of children\r\nset of int: CHILDREN = 1..6; % 1: Debby, 2: Bernice, 3: Miriam, 4: Esther, 5: Ruth, 6: Naomi\r\n\r\n% Define parameters for ages, countries, and stories\r\narray[CHILDREN] of var 10..15: age; % Age of each child\r\narray[CHILDREN] of var int: country; % Country of origin (1: Lithuania, 2: Egypt, 3: Israel, 4: Babylon, 5: Greece, 6: Rome)\r\narray[CHILDREN] of var int: story; % Part of the Exodus story they are presenting (1: Passover, 2: Crossing the Red Sea, 3: Manna, 4: Ten Commandments, 5: Spying the Promised Land, 6: Wandering in the Desert)\r\n\r\n% Constraints based on the clues\r\nconstraint age[2] + 2 = age[1]; % The child who told the story of the Passover is two years older than Bernice\r\nconstraint country[1] = 1; % Debby's family is from Lithuania\r\n\r\n% Additional constraints to ensure different stories and countries\r\nconstraint forall(i, j in CHILDREN where i != j) (\r\n    story[i] != story[j] /XXx country[i] != country[j]\r\n);\r\n\r\n% Solve the model\r\nsolve satisfy;\r\n\r\n% Output the results\r\noutput ['Debby's age: ' ++ show(age[1]) ++ 'XXxn' ++\r\n         'Bernice's age: ' ++ show(age[2]) ++ 'XXxn' ++\r\n         'Miriam's age: ' ++ show(age[3]) ++ 'XXxn' ++\r\n         'Esther's age: ' ++ show(age[4]) ++ 'XXxn' ++\r\n         'Ruth's age: ' ++ show(age[5]) ++ 'XXxn' ++\r\n         'Naomi's age: ' ++ show(age[6]) ++ 'XXxnXXxn' ++\r\n         'Debby's country: ' ++ show(country[1]) ++ 'XXxn' ++\r\n         'Bernice's country: ' ++ show(country[2]) ++ 'XXxn' ++\r\n         'Miriam's country: ' ++ show(country[3]) ++ 'XXxn' ++\r\n         'Esther's country: ' ++ show(country[4]) ++ 'XXxn' ++\r\n         'Ruth's country: ' ++ show(country[5]) ++ 'XXxn' ++\r\n         'Naomi's country: ' ++ show(country[6]) ++ 'XXxnXXxn' ++\r\n         'Debby's story: ' ++ show(story[1]) ++ 'XXxn' ++\r\n         'Bernice's story: ' ++ show(story[2]) ++ 'XXxn' ++\r\n         'Miriam's story: ' ++ show(story[3]) ++ 'XXxn' ++\r\n         'Esther's story: ' ++ show(story[4]) ++ 'XXxn' ++\r\n         'Ruth's story: ' ++ show(story[5]) ++ 'XXxn' ++\r\n         'Naomi's story: ' ++ show(story[6])];", "Arrangement with Ratio Constraint": "int: total_people = 13;  % Total number of people\nint: males = 4;  % Number of male people\nint: females = total_people - males;  % Number of female people\nfloat: max_ratio = 7.0 / 3.0;  % Maximum allowed ratio of females to males\n\n% Variables to track the number of males and females in the room at any time\narray[1..total_people] of var 0..1: is_male;  % 1 if male, 0 if female\narray[1..total_people] of var 0..total_people: females_in_room;\n\n% At any time, the number of females in the room cannot exceed 7/3 times the number of males\nconstraint forall(t in 1..total_people) (\n    females_in_room[t] <= males + (females + males) * max_ratio / (total_people - t + 1)\n);\n\n% Ensure that the cumulative number of females is correctly updated for each person entering\nconstraint females_in_room[1] = is_male[1];\nconstraint forall(t in 2..total_people) (\n    females_in_room[t] = females_in_room[t-1] + (1 - is_male[t])\n);\n\nsolve satisfy;\n\noutput ['Order of people entering the room:XXxn'];\noutput [show([i | i in 1..total_people where is_male[i] == 1]) ++ 'XXxn'];\noutput [show([i | i in 1..total_people where is_male[i] == 0]) ++ 'XXxnXXxn'];\noutput ['Number of females in the room after each person enters:XXxn'];\noutput [show(females_in_room) ++ 'XXxn'];", "Equal Milk Distribution Problem": "int: total_cows = 25;  % Total number of cows\r\nint: total_sons = 5;    % Total number of sons\r\n\r\n% Distribution of cows among sons (descending order)\r\narray[1..total_sons] of int: cow_distribution = [7, 6, 5, 4, 3];\r\n\r\n% Milk production per cow based on cow number\r\narray[1..total_cows] of int: milk_per_cow = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];\r\n\r\n% The total milk produced by each set of cows for each son must be equal.\r\n% Calculate the target milk quantity produced by each set of cows\r\nint: total_milk = sum(milk_per_cow);\r\nint: target_milk = total_milk div total_sons;\r\n\r\n% Decision variable: cow_assignment[c] is the son number to which cow c is assigned\r\narray[1..total_cows] of var 1..total_sons: cow_assignment;\r\n\r\n% Constraint: distribute cows to sons while ensuring equal milk production\r\nconstraint\r\n    sum(c in 1..total_cows)(milk_per_cow[c] * (cow_assignment[c] == 1)) = 7 * target_milk / 7 /XXx\r\n    sum(c in 1..total_cows)(milk_per_cow[c] * (cow_assignment[c] == 2)) = 6 * target_milk / 6 /XXx\r\n    sum(c in 1..total_cows)(milk_per_cow[c] * (cow_assignment[c] == 3)) = 5 * target_milk / 5 /XXx\r\n    sum(c in 1..total_cows)(milk_per_cow[c] * (cow_assignment[c] == 4)) = 4 * target_milk / 4 /XXx\r\n    sum(c in 1..total_cows)(milk_per_cow[c] * (cow_assignment[c] == 5)) = 3 * target_milk / 3;\r\n\r\nsolve satisfy;\r\n\r\n% Output assignment of cows to sons\r\noutput['Cow Assignments to Sons: '] = show([cow_assignment[c] | c in 1..total_cows]);", "FloorPuzzle": "% Defining the five people and their corresponding floors\nvar 1..5: Baker;  % from dzn\nvar 1..5: Cooper; % from dzn\nvar 1..5: Fletcher; % from dzn\nvar 1..5: Miller; % from dzn\nvar 1..5: Smith; % from dzn\n\n% Constraints based on the given information\nconstraint \n    Baker != 5 /XXx  % Baker does not live on the fifth floor\n    Cooper != 1 /XXx % Cooper does not live on the first floor\n    Fletcher != 1 /XXx Fletcher != 5 /XXx  % Fletcher does not live on the first or fifth floor\n    Miller > Cooper /XXx % Miller lives on a higher floor than Cooper\n    abs(Fletcher - Smith) != 1 /XXx  % Smith does not live on a floor adjacent to Fletcher\n    abs(Fletcher - Cooper) != 1 /XXx % Fletcher does not live on a floor adjacent to Cooper\n    all_different([Baker, Cooper, Fletcher, Miller, Smith]); % All live on different floors\n\n% Solve the problem\nsolve satisfy;\n\n% Output the floors where the people live\noutput ['Baker: ' ++ show(Baker) ++ 'XXxn' ++\n        'Cooper: ' ++ show(Cooper) ++ 'XXxn' ++\n        'Fletcher: ' ++ show(Fletcher) ++ 'XXxn' ++\n        'Miller: ' ++ show(Miller) ++ 'XXxn' ++\n        'Smith: ' ++ show(Smith) ++ 'XXxn'];", "Four_digit_pin_problem": "% Define decision variables for the 4 digits of the pin\nvar 0..9: a; % from dzn\nvar 0..9: b; % from dzn\nvar 0..9: c; % from dzn\nvar 0..9: d; % from dzn\n\n% Constraints: each digit must be unique\nconstraint all_different([a, b, c, d]);\n\n% Additional constraints based on the problem statement\nconstraint 10*c + d == 3 * (10*a + b); % cd = 3 * ab\nconstraint 10*d + a == 2 * (10*b + c); % da = 2 * bc\n\nsolve satisfy;\n\noutput [\n    'Pin: ', show(a), show(b), show(c), show(d), 'XXxn'\n];", "Deductive reasoning puzzle": "int: n; % number of people\n\narray[1..n] of var 1..n: floor; % floor number for each person\n\n% Constraints\nconstraint all_different(floor);\n\n% Clues to determine the floor each person lives on\n% Insert clues here\n\noutput [show(floor)];\n\nsolve satisfy;", "Four-Digit Pin Problem": "```minizinc\nint: ab;\nint: bc;\nint: cd;\nint: da;\n\nconstraint ab != bc /XXx ab != cd /XXx ab != da /XXx bc != cd /XXx bc != da /XXx cd != da;\nconstraint ab * 3 == cd;\nconstraint da == 2 * bc;\n\noutput[ab, bc, cd, da];\n\nsolve satisfy;\n```", "Equal Sum Subsets.": "```minizinc\n% Input parameters\nint: n; % from dzn\nset of int: SET = 1..100;\narray[1..10] of var SET: A; \n\n% Constraints\nconstraint alldifferent(A);\n\n% Find subsets S and T\narray[1..10] of var 0..1: inS;\narray[1..10] of var 0..1: inT;\nconstraint forall(i in 1..10)(inS[i] + inT[i] = 1);\nconstraint sum(i in 1..10)(A[i]*inS[i]) = sum(i in 1..10)(A[i]*inT[i]);\n\noutput['A = XXx(A)'];\nsolve satisfy;\n```", "Logic and Deduction problem": "```minizinc\n% Input parameters\nset of int: Children = 1..5; % from dzn\nset of int: Countries = 1..5; % from dzn\nset of int: ExodusParts = 1..5; % from dzn\n\n% Variables\narray[Children] of var Countries: country_of_origin;\narray[Children] of var ExodusParts: part_of_story;\narray[Children] of var int: age;\n\n% Constraints\nconstraint all_different(country_of_origin);\nconstraint all_different(part_of_story);\nconstraint all_different(age);\n\n% Each child is associated with one country of origin\nconstraint forall(c in Children)(\n    country_of_origin[c] in Countries\n);\n\n% Each child is associated with one part of the Exodus story\nconstraint forall(c in Children)(\n    part_of_story[c] in ExodusParts\n);\n\n% Each child is associated with one age\nconstraint forall(c in Children)(\n    age[c] > 0\n);\n\n% Solve\nsolve satisfy;\n\n% Output\noutput [show(country_of_origin), 'XXxn', show(part_of_story), 'XXxn', show(age)];\n```", "Gender Ratio Arrangement Problem": "```minizinc\nint: num_people; % from dzn\nint: num_males; % from dzn\n\narray[1..num_people] of var 0..1: gender; % 0 represents female, 1 represents male\n\nconstraint sum([gender[i] | i in 1..num_people]) = num_males;\n\narray[1..num_people] of var 0..1: entry_order;\n\nconstraint\n    forall(i in 1..num_people-1)(\n        (gender[entry_order[i]] = 0 /XXx gender[entry_order[i+1]] = 1) XXx/\n        (gender[entry_order[i]] = 1)\n    );\n\nsolve satisfy;\n\noutput[entry_order];\n```", "Mathematical Modeling": "int: gates = 5;  % Number of gates to pass through\n\n% Variables\nvar int: apples;  % Initial number of apples the boy has\n\n% Constraints\nconstraint\n    apples > 0 /XXx            % The boy has to start with at least 1 apple\n    forall(g in 1..gates) (  % Loop through all gates\n        apples mod 2 = 0 /XXx  % Ensure the number of apples is even to give half to the guard\n        apples > 2            % The boy can give at least 1 apple (half of 2) to the guard\n    )\n;\n\n% Solve\nsolve satisfy;  % Find any solution, if it exists\n\n% Output\noutput['The boy started with ' ++ show(apples) ++ ' apples.'];", "Logical reasoning": "% Guilty suspects: Bill and Edgy\n% 1 - Guilty, 0 - Innocent\n\n% Variables to represent innocence/guilt and truthfulness\narray[1..6] of var 0..1: guilt; % 1 - Guilty, 0 - Innocent\narray[1..6] of var 0..1: truth; % 1 - Truthful, 0 - Liar\n\n% Constraints based on the statements of the suspects\nconstraint\n    % ARTIE: 'It wasn't me.' (Innocent)\n    (truth[1] = 1 /XXx guilt[1] = 0) XXx/\n    (truth[1] = 0 /XXx guilt[1] = 1) XXx/\n\n    % BILL: 'Crackitt was in it up to his neck.' (Guilty)\n    (truth[2] = 1 /XXx guilt[2] = 0) XXx/\n    (truth[2] = 0 /XXx guilt[2] = 1) XXx/\n\n    % CRACKITT: 'No I wasn't.' (Innocent)\n    (truth[3] = 1 /XXx guilt[3] = 0) XXx/\n    (truth[3] = 0 /XXx guilt[3] = 1) XXx/\n\n    % DODGY: 'If Crackitt did it, Bill did it with him.' (Innocent)\n    (truth[4] = 1 /XXx guilt[4] = 0) XXx/\n    (truth[4] = 0 /XXx guilt[4] = 1) XXx/\n\n    % EDGY: 'Nobody did it alone.' (Guilty)\n    (truth[5] = 1 /XXx guilt[5] = 0) XXx/\n    (truth[5] = 0 /XXx guilt[5] = 1) XXx/\n\n    % FINGERS: 'That\u2019s right: it was Artie and Dodgy together.' (Guilty)\n    (truth[6] = 1 /XXx guilt[6] = 0) XXx/\n    (truth[6] = 0 /XXx guilt[6] = 1);\n\n% At least 4 of them must be innocent\nconstraint sum(guilt) >= 2;\n\n% Getaway car can only hold 2 people\nconstraint sum(guilt) <= 4;\n\nsolve satisfy;\n\n% Output the guilty suspects\noutput['Guilty suspects: '];\nfor s in 1..6 do\n    if guilt[s] = 1 then\n        output['Suspect ' ++ show(s) ++ ' is guilty.' ++ 'XXxn'];\n    end if;\nend for;", "Partition Equal Subset Sum": "% Set A of ten integers\narray[1..10] of var 1..100: A;\n\n% Constraints\nconstraint all_different(A);\nconstraint sum(i in 1..10)(A[i]) = 2 * sum(i in 1..5)(A[i]); % The sum of elements in S is half the sum of all elements in A\n\nsolve satisfy;\n\n% Output\noutput['Set S: {'] ++ [show(A[i]) ++ (if i < 5 then ', ' else '}XXxn')] ++\n['Set T: {'] ++ [show(A[i]) ++ (if i < 5 then ', ' else '}XXxn')];", "Staircase Climbing": "int: steps = 20; % Number of steps in the staircase (fixed at 20)\n\n% Decision variable: number of 3-step climbs\nvar 0..steps div 3: num3;\n\n% Calculate the number of ways using 3-step climbs\nvar int: num5 = (steps - 3 * num3) div 5;\n\n% Constraint: Total steps taken must be equal to 20\nconstraint 3 * num3 + 5 * num5 == steps;\n\n% Objective: Count the total number of ways\nvar int: totalWays = num3 + num5;\n\n% Output the number of ways to reach the top\noutput['Number of ways to reach the top: ' ++ show(totalWays) ++ 'XXxn'];\n\nsolve satisfy;", "4-digit puzzle": "% Define the digits (a, b, c, d) of the 4-digit PIN as separate variables\nvar 0..9: a; var 0..9: b; var 0..9: c; var 0..9: d;\n\n% Constraints to ensure that no two digits are the same\nconstraint all_different([a, b, c, d]);\n\n% Calculate the 2-digit numbers 'ab' and 'cd'\nvar 0..99: ab = a * 10 + b;\nvar 0..99: cd = c * 10 + d;\n\n% Calculate the 2-digit numbers 'bc' and 'da'\nvar 0..99: bc = b * 10 + c;\nvar 0..99: da = d * 10 + a;\n\n% Additional constraints based on the given relationships\nconstraint cd == 3 * ab; % cd is 3 times ab\nconstraint da == 2 * bc; % da is 2 times bc\n\n% Solve the puzzle\nsolve satisfy;\n\n% Output the PIN\noutput['The 4-digit PIN is: ' ++ show(a) ++ show(b) ++ show(c) ++ show(d) ++ 'XXxn'];", "Magic Square for Odd Order Sizes": "int: n = 4;          % Size of the magic square (n x n)\nint: sum_value = n * (n * n + 1) div 2;  % The sum of integers in each row, column, and diagonal\n\narray[1..n, 1..n] of var 1..n*n: square;  % Values in the magic square\n\n% Constraint: All values in the square must be distinct\nconstraint all_different(square);\n\n% Constraints: Rows, columns, and diagonals sum up to the magic constant\nconstraint\n    forall(i in 1..n) (\n        sum([square[i, j] | j in 1..n]) = sum_value /XXx     % Rows\n        sum([square[j, i] | j in 1..n]) = sum_value       % Columns\n    );\n\nconstraint\n    sum([square[i, i] | i in 1..n]) = sum_value /XXx         % Main diagonal\n    sum([square[i, n - i + 1] | i in 1..n]) = sum_value;   % Secondary diagonal\n\nsolve satisfy;\n\noutput [\n    'Magic Square (n = ', show(n), '):XXxn'\n] ++\n[ \n    if j == n then \n        show(square[i, j]) ++ 'XXxn'\n    else\n        show(square[i, j]) ++ ' '\n    endif\n    | i in 1..n, j in 1..n \n];", "Coin Bag Theft Problem": "```minizinc\nint: total_coins = 100; % from dzn\narray[1..6] of int: bag_types = [16, 17, 23, 24, 39, 40]; % from dzn\narray[1..6] of var 0..total_coins: bags_stolen; \n\nconstraint sum(i in 1..6)(bags_stolen[i] * bag_types[i]) = total_coins;\n\nsolve satisfy;\n\noutput [ show(bags_stolen) ];\n```", "Age-Story-Country Mapping": "% Parameters\nset of int: Age = 1..5; % from dzn\nset of int: Country = 1..5; % from dzn\nset of int: Story = 1..5; % from dzn\n\n% Variables\narray[Age] of var Country: ChildCountry; % mapping child to country\narray[Age] of var Story: ChildStory; % mapping child to story\n\n% Constraints\nconstraint ChildCountry[3] = 3; % Debby is from Lithuania\nconstraint ChildStory[4] = ChildStory[1] + 2; % Passover child is 2 years older than Bernice\nconstraint ChildCountry[5] < ChildCountry[1]; % Yemen child is younger than Ethiopia child\nconstraint ChildCountry[4] = ChildCountry[5]; % Morocco child is 3 years older than Ted\nconstraint ChildStory[2] = ChildStory[3] - 3; % Sammy is 3 years older than Moses's Youth child\n\n% Output\nsolve satisfy;\n\n% Print the results\noutput['Bernice is from ' ++ show(ChildCountry[1]) ++ ' and relates to ' ++ show(ChildStory[1]) ++ 'XXxn'];\noutput['Carl is from ' ++ show(ChildCountry[2]) ++ ' and relates to ' ++ show(ChildStory[2]) ++ 'XXxn'];\noutput['Debby is from ' ++ show(ChildCountry[3]) ++ ' and relates to ' ++ show(ChildStory[3]) ++ 'XXxn'];\noutput['Sammy is from ' ++ show(ChildCountry[4]) ++ ' and relates to ' ++ show(ChildStory[4]) ++ 'XXxn'];\noutput['Ted is from ' ++ show(ChildCountry[5]) ++ ' and relates to ' ++ show(ChildStory[5]) ++ 'XXxn'];", "Mathematical word problem": "int: n = 4;  % Number of items\nvar 0.01..7.11: p1; % Price of the first item\nvar 0.01..7.11: p2; % Price of the second item\nvar 0.01..7.11: p3; % Price of the third item\nvar 0.01..7.11: p4; % Price of the fourth item\n\nconstraint p1 + p2 + p3 + p4 == 7.11; % Total price is $7.11\nconstraint p1 * p2 * p3 * p4 != 7.11; % The cashier mistakenly multiplied the prices, leading to an incorrect total\n\nsolve satisfy;\n\noutput['Prices of the four items are: ' ++ show(p1) ++ ', ' ++ show(p2) ++ ', ' ++ show(p3) ++ ', ' ++ show(p4)];", "Sum of Squares Equivalence": "int: n = 4;  % number of elements\nint: min_val = 1;  % minimum value for elements\nint: max_val = 100;  % maximum value for elements\n\narray[1..n] of var min_val..max_val: num;  % array with n elements\n\n% Constraints to ensure all elements are different\nconstraint all_different(num);\n\n% Calculate the sum of the squares of the first two elements\nvar int: sum_squares_12 = num[1]*num[1] + num[2]*num[2];\n\n% Calculate the sum of the squares of the last two elements\nvar int: sum_squares_34 = num[3]*num[3] + num[4]*num[4];\n\n% Display the combination if the sums are equal\nconstraint sum_squares_12 == sum_squares_34;\n\nsolve satisfy;\n\noutput['Numbers with equal sum of squares: ' ++ show(num) ++ 'XXxn'];", "4_digit_pin_problem": "% Define the 4-digit pin as a sequence of unique digits (abcd)\narray[1..4] of var 0..9: pin;\n\n% Constraints:\n% 1. No two digits are the same\nconstraint all_different(pin);\n\n% 2. Define the 2-digit numbers ab and cd\nvar int: ab = 10 * pin[1] + pin[2];\nvar int: cd = 10 * pin[3] + pin[4];\n\n% 3. Define the 2-digit numbers bc and da\nvar int: bc = 10 * pin[2] + pin[3];\nvar int: da = 10 * pin[4] + pin[1];\n\n% 4. The 2-digit number cd is 3 times the 2-digit number ab\nconstraint cd = 3 * ab;\n\n% 5. The 2-digit number da is 2 times the 2-digit number bc\nconstraint da = 2 * bc;\n\nsolve satisfy;\n\n% Output\noutput['Pin: '];\noutput['XXx(pin[1])XXx(pin[2])XXx(pin[3])XXx(pin[4])XXxn'];\n", "apple_bribe_problem": "int: gates = 5; % from dznXXxnint: apples_left = 0; % from dznXXxnXXxn% Decision variable: number of apples the boy starts withXXxnvar 1..100: apples_start;XXxnXXxn% Calculate the apples at each stepXXxnarray[0..gates] of var -1000..1000: apples;XXxnXXxnconstraintXXxn  % Initial applesXXxn  apples[0] == apples_start /XXxXXxnXXxn  % Apples at each gateXXxn  forall(i in 1..gates) (XXxn    apples[i] == (apples[i-1] - (apples[i-1] / 2 + 1)) /XXxXXxn    (apples[i-1] - apples[i]) mod 2 == 0 /XXxXXxn    apples[i-1] - apples[i] >= 0XXxn  ) /XXxXXxnXXxn  % Final applesXXxn  apples[gates] == apples_left;XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn  'The boy started with ', show(apples_start), ' apples.XXxn'XXxn];", "Magic Square of Order 4": "int: n; % from dzn\n\narray[1..n, 1..n] of var 1..n*n: square;\n\n% Constraints\nconstraint alldifferent(square);\n\n% Rows and columns sums\nconstraint\n  forall(i in 1..n) (\n    sum(j in 1..n)(square[i,j]) == n*(n^2+1) div 2 /XXx\n    sum(j in 1..n)(square[j,i]) == n*(n^2+1) div 2\n  );\n\n% Diagonals sums\nconstraint\n  sum(i in 1..n)(square[i,i]) == n*(n^2+1) div 2 /XXx\n  sum(i in 1..n)(square[i,n-i+1]) == n*(n^2+1) div 2;\n\nsolve satisfy;\n\noutput [\n  'XXxnMagic Square (n = ', show(n), '):XXxn'\n] ++\nconcat([\n  if j == 1 then [''] else ['XXxn'] endif ++\n  [show(square[i, j]) ++ ' ']\n  | i, j in 1..n\n]) ++\n['XXxnXXxn'];\n", "coin_bags_problem": "int: bags16; % number of bags of 16 coins\nint: bags17; % number of bags of 17 coins\nint: bags23; % number of bags of 23 coins\nint: bags24; % number of bags of 24 coins\nint: bags39; % number of bags of 39 coins\nint: bags40; % number of bags of 40 coins\n\n% Total number of coins in each type of bag\nint: coins16 = 16;\nint: coins17 = 17;\nint: coins23 = 23;\nint: coins24 = 24;\nint: coins39 = 39;\nint: coins40 = 40;\n\n% Total number of stolen bags for each type of coins\nvar 0..10: stolen16;\nvar 0..10: stolen17;\nvar 0..10: stolen23;\nvar 0..10: stolen24;\nvar 0..10: stolen39;\nvar 0..10: stolen40;\n\n% Total number of coins lost\nint: totalCoinsLost = 100;\n\nconstraint stolen16 * coins16 + stolen17 * coins17 + stolen23 * coins23 + stolen24 * coins24 + stolen39 * coins39 + stolen40 * coins40 == totalCoinsLost;\n\nsolve satisfy;\n\noutput [\n  'Bags of 16 coins stolen: ' ++ show(stolen16) ++ 'XXxn' ++\n  'Bags of 17 coins stolen: ' ++ show(stolen17) ++ 'XXxn' ++\n  'Bags of 23 coins stolen: ' ++ show(stolen23) ++ 'XXxn' ++\n  'Bags of 24 coins stolen: ' ++ show(stolen24) ++ 'XXxn' ++\n  'Bags of 39 coins stolen: ' ++ show(stolen39) ++ 'XXxn' ++\n  'Bags of 40 coins stolen: ' ++ show(stolen40)\n];", "Children Bible Stories": "% Define the ages of each child\nint: debby_age;\nint: carl_age;\nint: sammy_age;\nint: bernice_age;\nint: ted_age;\n\n% Define the countries of origin of each child's family\nvar 1..5: debby_country;  % 1: Lithuania, 2: Ethiopia, 3: Kazakhstan, 4: Yemen, 5: Morocco\nvar 1..5: carl_country;\nvar 1..5: sammy_country;\nvar 1..5: bernice_country;\nvar 1..5: ted_country;\n\n% Define the stories each child told\nvar 1..5: debby_story;  % 1: Ten Commandments, 2: Moses's youth, 3: Burning bush, 4: Passover, 5: Captivity in Egypt\nvar 1..5: carl_story;\nvar 1..5: sammy_story;\nvar 1..5: bernice_story;\nvar 1..5: ted_story;\n\n% Constraints\nconstraint debby_age = 10 /XXx\n          carl_age = 8 /XXx\n          sammy_age = 7 /XXx\n          bernice_age = 5 /XXx\n          ted_age = 3;\n\nconstraint debby_country = 1 /XXx\n          carl_country = 2 /XXx\n          sammy_country = 3 /XXx\n          bernice_country = 4 /XXx\n          ted_country = 5;\n\nconstraint debby_story = 1 /XXx\n          carl_story = 2 /XXx\n          sammy_story = 3 /XXx\n          bernice_story = 4 /XXx\n          ted_story = 5;\n\n% Ensure each story is unique\nconstraint all_different([debby_story, carl_story, sammy_story, bernice_story, ted_story]);\n\nsolve satisfy;\n\noutput['Debby: ' ++ show(debby_age) ++ ' years old, from ' ++ show(debby_country) ++ ', told the story of ' ++ show(debby_story) ++ 'XXxn'];\noutput['Carl: ' ++ show(carl_age) ++ ' years old, from ' ++ show(carl_country) ++ ', told the story of ' ++ show(carl_story) ++ 'XXxn'];\noutput['Sammy: ' ++ show(sammy_age) ++ ' years old, from ' ++ show(sammy_country) ++ ', told the story of ' ++ show(sammy_story) ++ 'XXxn'];\noutput['Bernice: ' ++ show(bernice_age) ++ ' years old, from ' ++ show(bernice_country) ++ ', told the story of ' ++ show(bernice_story) ++ 'XXxn'];\noutput['Ted: ' ++ show(ted_age) ++ ' years old, from ' ++ show(ted_country) ++ ', told the story of ' ++ show(ted_story) ++ 'XXxn'];", "RatioConstraintPlacementProblem": "int: total_people; % Total number of people (13 in this case)XXxnint: num_males; % Number of males (4 in this case)XXxnint: max_females = (total_people - num_males) - (total_people div 3); % Maximum number of females allowed in the room at any one time based on the 7:3 ratioXXxnXXxn% Decision variablesXXxnarray[1..total_people] of var bool: is_male; % True if person is male, false if femaleXXxnXXxn% ConstraintsXXxnconstraint sum([bool2int(is_male[i]) | i in 1..total_people]) == num_males; % Ensure there are exactly num_males malesXXxnconstraint forall(t in 1..total_people) (XXxn    sum([bool2int(is_male[i]) | i in 1..t]) <= num_males + (t - 1) * 7 div 3 % Check the ratio constraint for each personXXxn);XXxnXXxn% Output the solutionXXxnoutput [XXxn  'Order of entry (1 is male, 0 is female): ', show([bool2int(is_male[i]) | i in 1..total_people]) ++ 'XXxn'XXxn];XXxnXXxnsolve satisfy;", "Cow Distribution Problem": "int: total_cows;  % Total number of cows (25 in this case)XXxnint: total_sons;  % Total number of sons (5 in this case)XXxnXXxn% Milk production per cow (1 to 25 kg)XXxnarray[1..total_cows] of int: cow_production = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];XXxnXXxn% Number of cows to be given to each sonXXxnarray[1..total_sons] of int: cows_per_son = [7, 6, 5, 4, 3];XXxnXXxn% Decision variable: cows for each sonXXxnarray[1..total_sons, 1..total_cows] of var 0..1: x;XXxnXXxn% Each son must get the correct number of cowsXXxnconstraintXXxn    forall(s in 1..total_sons) (XXxn        sum(c in 1..total_cows)(x[s, c]) == cows_per_son[s]XXxn    );XXxnXXxn% The total milk production for each son should be the sameXXxnconstraintXXxn    forall(s in 2..total_sons) (XXxn        sum(c in 1..total_cows)(cow_production[c] * x[s, c]) == sum(c in 1..total_cows)(cow_production[c] * x[1, c])XXxn    );XXxnXXxn% Solve for the distribution of cowsXXxnsolve satisfy;XXxnXXxn% Output the cows allocated to each sonXXxnoutput [XXxn    'Son 1: ' ++ show([c | c in 1..total_cows where x[1, c] == 1]) ++ 'XXxn' ++XXxn    'Son 2: ' ++ show([c | c in 1..total_cows where x[2, c] == 1]) ++ 'XXxn' ++XXxn    'Son 3: ' ++ show([c | c in 1..total_cows where x[3, c] == 1]) ++ 'XXxn' ++XXxn    'Son 4: ' ++ show([c | c in 1..total_cows where x[4, c] == 1]) ++ 'XXxn' ++XXxn    'Son 5: ' ++ show([c | c in 1..total_cows where x[5, c] == 1]) ++ 'XXxn'XXxn];", "linear equation with four variables": "int: total_price = 711;  % Total price in cents (7.11 dollars = 711 cents)\r\n\r\n% Define the prices of the four items\r\nvar 0..711: price1;  % Price of item 1 in cents\r\nvar 0..711: price2;  % Price of item 2 in cents\r\nvar 0..711: price3;  % Price of item 3 in cents\r\nvar 0..711: price4;  % Price of item 4 in cents\r\n\r\n% Constraint: Total price is the sum of the prices of the four items\r\nconstraint price1 + price2 + price3 + price4 == total_price;\r\n\r\nsolve satisfy;\r\n\r\noutput ['Prices of the four items: ' ++ show(price1/100) ++ ', ' ++ show(price2/100) ++ ', ' ++ show(price3/100) ++ ', ' ++ show(price4/100)];", "sum_of_squares": "int: n = 4; % Number of combinationsXXxnint: range = 100; % Range of numbersXXxnXXxn% Define the variables for the combinationsXXxnarray[1..n] of var 1..range: a; % First numberXXxnarray[1..n] of var 1..range: b; % Second numberXXxnarray[1..n] of var 1..range: c; % Third numberXXxnarray[1..n] of var 1..range: d; % Fourth numberXXxnXXxn% Constraints to ensure that the numbers are different within each pairXXxnconstraint forall(i in 1..n) (XXxn    a[i] != b[i] /XXxXXxn    c[i] != d[i]XXxn);XXxnXXxn% Constraint for the sum of squaresXXxnconstraint forall(i in 1..n) (XXxn    a[i]*a[i] + b[i]*b[i] = c[i]*c[i] + d[i]*d[i]XXxn);XXxnXXxn% Find a solutionXXxnsolve satisfy;XXxnXXxn% Output the combinations that satisfy the conditionsXXxnoutput [XXxn    'a: ' ++ show(a) ++ 'XXxn' ++XXxn    'b: ' ++ show(b) ++ 'XXxn' ++XXxn    'c: ' ++ show(c) ++ 'XXxn' ++XXxn    'd: ' ++ show(d)XXxn];", "Permutation with Restrictions": "int: total_people = 13;\nint: num_males = 4;  % Given that 4 are male\nfloat: max_ratio = 7.0 / 3;  % Maximum ratio of females to males\n\narray[1..total_people] of var 0..1: is_male;  % 1 for male, 0 for female\n\n% Constraint: The ratio of females to males in the room at any one time must not exceed 7/3\nconstraint\n    forall(i in 1..total_people) (\n        sum(j in 1..i) (1 - is_male[j]) / sum(j in 1..i) (is_male[j] + 1e-6) <= max_ratio\n    );\n\n% Constraint: The total number of people must be 13 and the number of males must be 4\nconstraint sum(is_male) == num_males;\n\n% Solve for the order in which 4 males and 9 females enter the room\nsolve satisfy;\n\n% Print the result\noutput['Order of entry (0 for female, 1 for male): '];\noutput[show(is_male)];", "Linear Equations in Four Variables": "int: n = 4;  % Number of items\nfloat: total_price = 7.11;  % Total price\narray[1..n] of var 0.01..5.0: price;  % Price of each item\n\nconstraint\n    sum(i in 1..n)(price[i]) = total_price;\n\nsolve satisfy;\n\noutput [\n    'The prices of the four items are: ',\n    show(price[1]), ', ', show(price[2]), ', ', show(price[3]), ', ', show(price[4])\n];", "Cryptarithmetic\u95ee\u9898": "% Define the 4-digit PIN (abcd)\nvar 0..9: a; \nvar 0..9: b; \nvar 0..9: c; \nvar 0..9: d; \n\n% Constraint: No two digits are the same\nconstraint all_different([a, b, c, d]);\n\n% Define the 2-digit numbers cd and ab\nvar 0..99: cd = 10*c + d;\nvar 0..99: ab = 10*a + b;\n\n% Define the 2-digit numbers da and bc\nvar 0..99: da = 10*d + a;\nvar 0..99: bc = 10*b + c;\n\n% Constraints based on the facts provided\nconstraint cd == 3 * ab; % cd is 3 times ab\nconstraint da == 2 * bc; % da is 2 times bc\n\n% Find a solution for the PIN\nsolve satisfy;\n\n% Output the PIN\noutput ['The PIN is: ' ++ show(a) ++ show(b) ++ show(c) ++ show(d)];", "Mathematical modeling.": "int: nGates = 5; % from dznXXxnint: applesLeft = 0; % from dznXXxnXXxnarray[1..nGates] of var 0..10000: applesGiven;XXxnXXxnconstraintXXxn  forall(i in 1..nGates) (XXxn    applesGiven[i] = (applesLeft * 2) + 2 * iXXxn  );XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn  'The boy started with ', show(sum(i in 1..nGates) (applesGiven[i])), ' apples.XXxn'XXxn];", "Partition Equal Subset Sum\u95ee\u9898": "% Given set A of ten integers\narray[1..10] of var 0..100: A = [81, 21, 79, 4, 29, 70, 28, 20, 14, 7];\n\n% Decision variables to represent which elements are in S and T\narray[1..10] of var 0..1: in_S;\narray[1..10] of var 0..1: in_T;\n\n% Constraints: S and T must be disjoint and non-empty\nconstraint sum(i in 1..10)(in_S[i]) > 0;\nconstraint sum(i in 1..10)(in_T[i]) > 0;\nconstraint forall(i in 1..10)(in_S[i] + in_T[i] >= 0 /XXx in_S[i] + in_T[i] <= 1);\n\n% The sum of elements in S must equal the sum of elements in T\nconstraint sum(i in 1..10)(in_S[i] * A[i]) = sum(i in 1..10)(in_T[i] * A[i]);\n\n% Output the subsets S and T\noutput['S = {'] ++ [if in_S[i] = 1 then show(A[i]) else '' endif | i in 1..10] ++ ['}XXxn'] ++\n['T = {'] ++ [if in_T[i] = 1 then show(A[i]) else '' endif | i in 1..10] ++ ['}XXxn'];", "Distribute Equal Quantity Problem": "int: n_cows = 25;  % Total number of cowsXXxnint: n_sons = 5;  % Number of sonsXXxnXXxn% Milk production per cow (from 1kg to 25kg)XXxnarray[1..n_cows] of int: milk_production = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];XXxnXXxn% Distribution of cows to sonsXXxnarray[1..n_sons] of int: cows_per_son = [7, 6, 5, 4, 3];XXxnint: total_milk = sum(i in 1..n_cows)(milk_production[i]);  % Total milk productionXXxnint: milk_per_son = total_milk div n_sons;  % Milk each son should receiveXXxnXXxn% Decision variable: which son receives each cowXXxnarray[1..n_cows] of var 1..n_sons: son_assignment;XXxnXXxn% ConstraintsXXxnconstraint sum(i in 1..n_cows)(milk_production[i]) == total_milk;  % Total milk produced is constantXXxnconstraint forall(s in 1..n_sons)(XXxn    sum(i in 1..n_cows where son_assignment[i] == s)(milk_production[i]) == milk_per_sonXXxn);  % Equal milk distributionXXxnXXxnsolve satisfy;XXxnXXxn% Output the distribution of cows to sonsXXxnoutput [XXxn    'Son 1: ' ++ show(sum(i in 1..n_cows)(if son_assignment[i] == 1 then 1 else 0 endif)) ++ 'XXxn',XXxn    'Son 2: ' ++ show(sum(i in 1..n_cows)(if son_assignment[i] == 2 then 1 else 0 endif)) ++ 'XXxn',XXxn    'Son 3: ' ++ show(sum(i in 1..n_cows)(if son_assignment[i] == 3 then 1 else 0 endif)) ++ 'XXxn',XXxn    'Son 4: ' ++ show(sum(i in 1..n_cows)(if son_assignment[i] == 4 then 1 else 0 endif)) ++ 'XXxn',XXxn    'Son 5: ' ++ show(sum(i in 1..n_cows)(if son_assignment[i] == 5 then 1 else 0 endif)) ++ 'XXxn'XXxn];", "Diophantine equation": "int: n = 4; % Number of numbers\nset of int: NUMS = 1..100; % Set of numbers [1, 2, ..., 100]\n\n% Decision variables\narray[1..n] of var NUMS: a; % First number\narray[1..n] of var NUMS: b; % Second number\narray[1..n] of var NUMS: c; % Third number\narray[1..n] of var NUMS: d; % Fourth number\n\n% Constraints: Distinct numbers and sum of squares condition\nconstraint all_different(a ++ b ++ c ++ d);\nconstraint sum(i in 1..n)(a[i]*a[i]) + sum(i in 1..n)(b[i]*b[i]) == sum(i in 1..n)(c[i]*c[i]) + sum(i in 1..n)(d[i]*d[i]);\n\nsolve satisfy;\n\n% Output the combination that satisfies the condition\noutput ['Numbers: ' ++ show(a) ++ ', ' ++ show(b) ++ ', ' ++ show(c) ++ ', ' ++ show(d) ++ 'XXxn'];", "Floor Assignment Logic Puzzle": "```minizinc\nint: num_floors = 5; % from dzn\narray[1..num_floors] of var 1..num_floors: floors; % from dzn\n\n% Each person occupies a unique floor\nset of int: persons = {1, 2, 3, 4, 5}; % 1: Baker, 2: Cooper, 3: Fletcher, 4: Miller, 5: Smith\n\n% Constraints\nconstraint\n    % Baker does not live on the fifth floor\n    floors[1] != 5 /XXx\n    % Cooper does not live on the first floor\n    floors[2] != 1 /XXx\n    % Fletcher does not live on the fifth or first floors\n    floors[3] != 5 /XXx floors[3] != 1 /XXx\n    % Miller lives on a higher floor than Cooper\n    floors[4] > floors[2] /XXx\n    % Smith does not live on a floor adjacent to Fletcher's\n    abs(floors[5] - floors[3]) > 1 /XXx\n    % Fletcher does not live on a floor adjacent to Cooper\u2019s\n    abs(floors[3] - floors[2]) > 1 /XXx\n    % All floors are unique\n    all_different(floors);\n\nsolve satisfy;\n\noutput [ show(floors) ];\n```", "Innocent Suspect Analysis": "```minizinc\nint: num_suspects;\narray[1..num_suspects] of var bool: innocent; % True if the suspect is innocent\narray[1..num_suspects] of set of int: statements; % Statements made by each suspect\n\n% At least four suspects must be innocent\nconstraint sum(i in 1..num_suspects)(if innocent[i] then 1 else 0 endif) >= 4;\n\n% Constraints to determine contradictions among statements\n% Assuming statements are indexed by the suspect number\n% A guilty suspect's statement will not align with the statements of innocent suspects\nconstraint forall(i in 1..num_suspects)(\n    (innocent[i] -> forall(j in 1..num_suspects where j != i)(statements[i] == statements[j] -> innocent[j]))\n);\n\nsolve satisfy;\n\noutput [ show(innocent) ];\n```", "Coin Bag Combination Problem": "```minizinc\nint: total_coins = 100;\n\narray[1..6] of int: coin_types = [16, 17, 23, 24, 39, 40];\narray[1..6] of var 0..total_coins: bags;\n\nconstraint sum(i in 1..6)(bags[i] * coin_types[i]) = total_coins;\n\nsolve satisfy;\n\noutput ['Bags stolen for each coin type: ', show(bags)];\n```", "Milk Distribution Problem": "```minizinc\nint: total_cows = 25; % from dzn\nint: total_sons = 5; % from dzn\nint: milk_per_son = 65; % from dzn\n\nset of int: COWS = 1..total_cows;\n\narray[COWS] of int: milk_production = [i | i in COWS]; % Each cow produces its index in kg\n\narray[1..total_sons] of var set of COWS: son_assignments;\n\n% Each son receives exactly 65 kg of milk\nconstraint forall(s in 1..total_sons)(\n    sum(i in son_assignments[s]) (milk_production[i]) = milk_per_son\n);\n\n% Each cow can only be assigned to one son\nconstraint forall(c in COWS)(\n    count(s in 1..total_sons)(c in son_assignments[s]) <= 1\n);\n\n% Each son must receive a subset of cows\nconstraint forall(s in 1..total_sons)(\n    card(son_assignments[s]) > 0 % Each son must have at least one cow\n);\n\nsolve satisfy;\n\noutput [ show(son_assignments) ];\n```", "Sum-Product Price Problem": "```minizinc\nint: num_items = 4;\nfloat: total_price = 7.11;\n\narray[1..num_items] of var 0..total_price: prices;\n\nconstraint sum(prices) == total_price;\n\nsolve satisfy;\n\noutput [ show(prices) ];\n```", "Distinct Integer Quadratic Equation Solver": "```minizinc\nint: a;\nint: b;\nint: c;\nint: d;\n\n% Define the domain for a, b, c, and d\narray[1..4] of var 1..100: vars;\n\n% Ensure all numbers are distinct\nconstraint all_different(vars);\n\n% Ensure the equation a^2 + b^2 = c^2 + d^2 is satisfied\nconstraint vars[1]^2 + vars[2]^2 = vars[3]^2 + vars[4]^2;\n\n% Solve the problem\nsolve satisfy;\n\n% Output the results\noutput [ show(vars[1]), ' ', show(vars[2]), ' ', show(vars[3]), ' ', show(vars[4]) ];\n```", "Floor Assignment Problem": "include 'globals.mzn';XXxnXXxnint: num_floors = 5;XXxnXXxnset of int: PEOPLE = 1..5;XXxnXXxn% Variables to represent which floor each person is onXXxnarray[PEOPLE] of var 1..num_floors: floors;XXxnXXxn% Person identifiersXXxnint: BAKER = 1;XXxnint: COOPER = 2;XXxnint: FLETCHER = 3;XXxnint: MILLER = 4;XXxnint: SMITH = 5;XXxnXXxn% Constraints based on the cluesXXxnconstraint floors[BAKER] != 5; % Baker is not on 5th floorXXxnconstraint floors[COOPER] != 1; % Cooper is not on 1st floorXXxnconstraint floors[FLETCHER] != 1; % Fletcher is not on 1st floorXXxnconstraint floors[FLETCHER] != 5; % Fletcher is not on 5th floorXXxnconstraint floors[MILLER] > floors[COOPER]; % Miller is on a higher floor than CooperXXxnconstraint abs(floors[SMITH] - floors[FLETCHER]) > 1; % Smith is not adjacent to FletcherXXxnconstraint abs(floors[FLETCHER] - floors[COOPER]) > 1; % Fletcher is not adjacent to CooperXXxnXXxn% Ensure all floors are distinctXXxnconstraint all_different(floors);XXxnXXxnsolve satisfy;XXxnXXxnoutput ['Baker: ' ++ show(floors[BAKER]) ++ 'XXxn' ++XXxn        'Cooper: ' ++ show(floors[COOPER]) ++ 'XXxn' ++XXxn        'Fletcher: ' ++ show(floors[FLETCHER]) ++ 'XXxn' ++XXxn        'Miller: ' ++ show(floors[MILLER]) ++ 'XXxn' ++XXxn        'Smith: ' ++ show(floors[SMITH])];", "Digit Equation Solver": "include 'globals.mzn'; \n\n% Define the variables (digits a, b, c, d) as integers from 0 to 9\nvar 0..9: a; % from dzn\nvar 0..9: b; % from dzn\nvar 0..9: c; % from dzn\nvar 0..9: d; % from dzn\n\n% Constraint 1: All digits must be different\nconstraint a != b /XXx a != c /XXx a != d /XXx\n            b != c /XXx b != d /XXx\n            c != d;\n\n% Constraint 2: 10c + d = 3 * (10a + b)\nconstraint 10*c + d = 3 * (10*a + b);\n\n% Constraint 3: 10d + a = 2 * (10b + c)\nconstraint 10*d + a = 2 * (10*b + c);\n\n% Solve the constraints\nsolve satisfy;\n\n% Output the values of a, b, c, d\noutput ['a = XXx(a)XXxn', 'b = XXx(b)XXxn', 'c = XXx(c)XXxn', 'd = XXx(d)XXxn'];", "Reverse Bribery Problem": "int: n_guards = 5; % Number of guardsXXxnXXxn% The boy ends with 1 apple after giving the last guard's apple to the girlXXxnint: end_condition = 1;XXxnXXxn% Array to store the number of apples before each guardXXxnarray[0..n_guards] of var int: apples;XXxnXXxn% Initial condition: after the last guard, he gives 1 apple to the girlXXxnconstraint apples[n_guards] == end_condition;XXxnXXxn% Constraints for each guard: he gives them half of his current apples plus oneXXxnconstraint forall(i in 1..n_guards) (XXxn    apples[i-1] == 2 * (apples[i] + 1)XXxn);XXxnXXxn% Solve the problem by finding the initial number of apples before the first guardXXxnsolve satisfy;XXxnXXxn% Output the initial number of apples and the number of apples before each guardXXxnoutput ['Initial apples: ' ++ show(apples[0]) ++ 'XXxn' ++XXxn        'Apples before each guard: ' ++ show(apples)];", "Magic Square Validation": "include 'globals.mzn';XXxnXXxnint: n;  % Size of the magic square (n x n)XXxnXXxn% Constraint: n must not be equal to 2XXxnconstraint n != 2;XXxnXXxn% Create a 2D array to represent the magic squareXXxnarray[1..n, 1..n] of var 1..(n*n): square;XXxnXXxn% Constraint: All numbers from 1 to n^2 must be present exactly onceXXxnconstraint forall(i, j in 1..n) (XXxn    forall(k in 1..n, l in 1..n where (i, j) != (k, l)) (XXxn        square[i, j] != square[k, l]XXxn    )XXxn);XXxnXXxn% Calculate the magic constantXXxnint: magic_constant = n * (n*n + 1) div 2;XXxnXXxn% Constraints for rows, columns, and diagonalsXXxnconstraint forall(i in 1..n) (XXxn    sum(j in 1..n)(square[i, j]) = magic_constant /XXxXXxn    sum(j in 1..n)(square[j, i]) = magic_constantXXxn);XXxnXXxnconstraint sum(i in 1..n)(square[i, i]) = magic_constant /XXxXXxn            sum(i in 1..n)(square[i, n-i+1]) = magic_constant;XXxnXXxnsolve satisfy;XXxnXXxnoutput ['Magic SquareXXxXXxn'] ++XXxn    [show([square[i, j] | j in 1..n]) ++ 'XXxn' | i in 1..n];", "Integer Linear Combination Problem": "int: total_coins = 100; % The total number of coinsXXxnXXxnvar 0..100: x1; % Number of bags stolen containing 16 coinsXXxnvar 0..100: x2; % Number of bags stolen containing 17 coinsXXxnvar 0..100: x3; % Number of bags stolen containing 23 coinsXXxnvar 0..100: x4; % Number of bags stolen containing 24 coinsXXxnvar 0..100: x5; % Number of bags stolen containing 39 coinsXXxnvar 0..100: x6; % Number of bags stolen containing 40 coinsXXxnXXxnconstraintXXxn  16 * x1 + 17 * x2 + 23 * x3 + 24 * x4 + 39 * x5 + 40 * x6 = total_coins;XXxnXXxnsolve satisfy;XXxnXXxnoutput [XXxn  'Bags with 16 coins: ', show(x1), 'XXxn',XXxn  'Bags with 17 coins: ', show(x2), 'XXxn',XXxn  'Bags with 23 coins: ', show(x3), 'XXxn',XXxn  'Bags with 24 coins: ', show(x4), 'XXxn',XXxn  'Bags with 39 coins: ', show(x5), 'XXxn',XXxn  'Bags with 40 coins: ', show(x6), 'XXxn'XXxn];", "Coin Bag Combinations Problem": "```minizinc\n% Define the types of bags\nint: total_coins = 100;\narray[1..6] of int: bag_types = [16, 17, 23, 24, 39, 40];\n\n% Define the number of bags for each type\narray[1..6] of var 0..total_coins div min(bag_types): bags;\n\n% Constraint to ensure the total number of coins equals 100\nconstraint sum(i in 1..6)(bags[i] * bag_types[i]) = total_coins;\n\n% Solve the problem\nsolve satisfy;\n\n% Output the results\noutput [ show(bags[i]) ++ ' bags of ' ++ show(bag_types[i]) ++ ' coins' ++ 'XXxn' | i in 1..6 if bags[i] > 0 ];\n```", "Family Age Puzzle": "```minizinc\nint: debby_age;\nint: bernice_age;\nint: passover_age;\nint: yemen_age;\nint: ethiopian_age;\nint: moroccan_age;\nint: ted_age;\nint: sammy_age;\nint: moses_age;\n\n% Constraints\nconstraint passover_age = bernice_age + 2; % Passover child is 2 years older than Bernice\nconstraint yemen_age < ethiopian_age; % Yemen child is younger than Ethiopian child\nconstraint moroccan_age = ted_age + 3; % Moroccan child is 3 years older than Ted\nconstraint sammy_age = moses_age + 3; % Sammy is 3 years older than Moses's youth storyteller\n\n% Solve\nsolve satisfy;\n\n% Output\noutput [\n    'Debby's age: ', show(debby_age), 'XXxn',\n    'Bernice's age: ', show(bernice_age), 'XXxn',\n    'Passover child's age: ', show(passover_age), 'XXxn',\n    'Yemen child's age: ', show(yemen_age), 'XXxn',\n    'Ethiopian child's age: ', show(ethiopian_age), 'XXxn',\n    'Moroccan child's age: ', show(moroccan_age), 'XXxn',\n    'Ted's age: ', show(ted_age), 'XXxn',\n    'Sammy's age: ', show(sammy_age), 'XXxn',\n    'Moses's youth storyteller's age: ', show(moses_age), 'XXxn'\n];\n```", "Equal Distribution of Resources": "```minizinc\nint: total_cows = 25;\nint: number_of_sons = 5;\narray[1..total_cows] of int: milk_produced = [i | i in 1..total_cows];\narray[1..number_of_sons] of int: cows_per_son = [7, 6, 5, 4, 3];\nint: total_milk = sum(milk_produced);\n\n% Calculate the target milk output per son\nint: target_milk_per_son = total_milk div number_of_sons;\n\n% Variables to assign cows to each son\narray[1..number_of_sons] of var 0..total_cows: assigned_cows;\n\n% Constraints to ensure each son receives the specific number of cows\nconstraint forall(i in 1..number_of_sons) (\n    assigned_cows[i] = cows_per_son[i]\n);\n\n% Ensure that the sum of milk for each son equals the target\nconstraint forall(i in 1..number_of_sons) (\n    sum(j in 1..assigned_cows[i]) (milk_produced[j]) = target_milk_per_son\n);\n\nsolve satisfy;\n\noutput ['Total milk produced: ', show(total_milk), 'XXxn'] ++\n       [ 'Son ', show(i), ': ', show(assigned_cows[i]), ' cows, Milk: ', show(sum(j in 1..assigned_cows[i]) (milk_produced[j])), 'XXxn' | i in 1..number_of_sons];\n```", "Four Distinct Digits Problem": "include 'globals.mzn';XXxnXXxnint: n = 4;XXxnXXxn% Define the variables a, b, c, and d as distinct digitsXXxnvar 0..9: a;XXxnvar 0..9: b;XXxnvar 0..9: c;XXxnvar 0..9: d;XXxnXXxn% Ensure that a, b, c, and d are distinctXXxnconstraint alldifferent([a, b, c, d]);XXxnXXxn% Equation 1: 10c + d = 3(10a + b)XXxnconstraint 10 * c + d = 3 * (10 * a + b);XXxnXXxn% Equation 2: 10d + a = 2(10b + c)XXxnconstraint 10 * d + a = 2 * (10 * b + c);XXxnXXxn% Solve the problemXXxnsolve satisfy;XXxnXXxn% Output the resultXXxnoutput ['a = ', show(a), 'XXxn',XXxn        'b = ', show(b), 'XXxn',XXxn        'c = ', show(c), 'XXxn',XXxn        'd = ', show(d), 'XXxn'];", "Reverse Bribe Calculation Problem": "int: x; % from dzn % Initial apples before passing the first guard\r\nint: y; % from dzn % Apples before the second guard\r\nint: z; % from dzn % Apples before the third guard\r\nint: a; % from dzn % Apples before the fourth guard\r\nint: b; % from dzn % Apples before the fifth guard\r\nint: c; % from dzn % Apples before giving the apple to the girl\r\n\r\n% The equations based on the problem description\r\n% After the first guard: gives half plus one, so y = (x - 1) / 2\r\nconstraint y = (x - 1) div 2; \r\n\r\n% After the second guard: gives half plus one, so z = (y - 1) / 2\r\nconstraint z = (y - 1) div 2; \r\n\r\n% After the third guard: gives half plus one, so a = (z - 1) / 2\r\nconstraint a = (z - 1) div 2; \r\n\r\n% After the fourth guard: gives half plus one, so b = (a - 1) / 2\r\nconstraint b = (a - 1) div 2; \r\n\r\n% After the fifth guard: gives half plus one, so c = (b - 1) / 2\r\nconstraint c = (b - 1) div 2; \r\n\r\n% Finally: he gives the girl 1 apple, so c must equal 1\r\nconstraint c = 1; \r\n\r\nsolve satisfy;", "Magic Square Construction": "int: n = 4; % Size of the magic square (4x4) XXxnint: magic_constant = n * (n * n + 1) div 2; % The magic constant (sum of each row, column, and diagonal) (34 for 4x4) XXxnXXxn% 2D array to represent the magic squareXXxnarray[1..n, 1..n] of var 1..(n * n): square;XXxnXXxn% Constraint 1: Each number from 1 to n^2 appears exactly onceXXxnconstraintXXxn    forall(i, j in 1..n where i < j) (XXxn        square[i, j] != square[j, i]XXxn    );XXxnXXxn% Constraint 2: Sum of each row equals the magic constantXXxnconstraintXXxn    forall(i in 1..n) (XXxn        sum(j in 1..n) (square[i, j]) = magic_constantXXxn    );XXxnXXxn% Constraint 3: Sum of each column equals the magic constantXXxnconstraintXXxn    forall(j in 1..n) (XXxn        sum(i in 1..n) (square[i, j]) = magic_constantXXxn    );XXxnXXxn% Constraint 4: Sum of the main diagonal equals the magic constantXXxnconstraintXXxn    sum(i in 1..n) (square[i, i]) = magic_constant;XXxnXXxn% Constraint 5: Sum of the other diagonal equals the magic constantXXxnconstraintXXxn    sum(i in 1..n) (square[i, n - i + 1]) = magic_constant;XXxnXXxnsolve satisfy;", "Logical Deduction": "enum Suspect = {ARTIE, BILL, CRACKITT, DODGY, EDGY, FINGERS}; % Enum for suspects\r\n\r\n% Variables to represent whether each suspect is guilty (1) or innocent (0)\r\narray[Suspect] of var 0..1: status;\r\n\r\n% Constraints based on the statements of the suspects\r\nconstraint (status[BILL] == 0 -> status[CRACKITT] == 1) /XXx (status[BILL] == 1 -> status[CRACKITT] == 0); % BILL's statement\r\nconstraint (status[DODGY] == 0 /XXx status[CRACKITT] == 1 -> status[BILL] == 1); % DODGY's statement\r\nconstraint (status[EDGY] == 0 XXx/ (status[ARTIE] == 1 XXx/ status[BILL] == 1 XXx/ status[CRACKITT] == 1 XXx/ status[DODGY] == 1 XXx/ status[FINGERS] == 1)); % EDGY's statement\r\nconstraint (status[FINGERS] == 0 -> (status[ARTIE] == 1 XXx/ status[DODGY] == 1)); % FINGERS's statement\r\n\r\n% Ensure that at least one suspect is guilty\r\nconstraint sum(status) >= 1;\r\n\r\nsolve satisfy; % Solve the problem\r\n\r\noutput ['ARTIE: XXx(status[ARTIE]), BILL: XXx(status[BILL]), CRACKITT: XXx(status[CRACKITT]), DODGY: XXx(status[DODGY]), EDGY: XXx(status[EDGY]), FINGERS: XXx(status[FINGERS])'];", "Ratio Maintenance Problem": "int: F_initial = 9;  % Initial number of femalesXXxnint: M_initial = 4;  % Initial number of malesXXxnint: total_entries = F_initial + M_initial;  % Total entriesXXxnXXxn% Entry sequence: 1 for female, 0 for maleXXxnarray[1..total_entries] of var 0..1: entry;XXxnXXxn% Initial countsXXxnvar 0..F_initial: F = F_initial;XXxnvar 0..M_initial: M = M_initial;XXxnXXxn% Maintain the ratio: 3F <= 7MXXxnconstraint forall(i in 1..total_entries) (XXxn    (entry[i] = 1 -> F = F + 1) /XXxXXxn    (entry[i] = 0 -> M = M + 1) -> 3*F <= 7*MXXxn);XXxnXXxn% Ensure all entries are accounted forXXxnconstraint sum(entry) = M_initial;XXxnXXxnsolve satisfy;XXxnXXxnoutput [ 'Entry Sequence: ' ++ show(entry) ++ 'XXxn' ++XXxn         'Final Count - Females: ' ++ show(F) ++ ', Males: ' ++ show(M) ++ 'XXxn' ++XXxn         'Final Ratio (F/M): ' ++ show(F/M) ];", "Combinatorial Subset Sum Problem": "int: num_cows = 25; % Total number of cowsXXxnarray[1..num_cows] of int: milk_per_cow = [i | i in 1..num_cows]; % Milk production of each cowXXxnint: total_milk = sum(milk_per_cow); % Total milk productionXXxnXXxn% Distribution requirement: 7, 6, 5, 4, and 3 cows for each of the 5 sonsXXxnarray[1..5] of int: cows_per_son = [7, 6, 5, 4, 3];XXxnint: milk_per_son = total_milk div 5; % Milk required per sonXXxnXXxn% Decision variables: which cows are assigned to which sonXXxnarray[1..num_cows, 1..5] of var bool: assign;XXxnXXxn% Each cow is assigned to exactly one sonXXxnconstraint forall(i in 1..num_cows) (XXxn    sum(j in 1..5) (assign[i, j]) = 1XXxn);XXxnXXxn% Each son gets the exact number of cows requiredXXxnconstraint forall(j in 1..5) (XXxn    sum(i in 1..num_cows) (assign[i, j]) = cows_per_son[j]XXxn);XXxnXXxn% Each son gets the exact amount of milk requiredXXxnconstraint forall(j in 1..5) (XXxn    sum(i in 1..num_cows) (assign[i, j] * milk_per_cow[i]) = milk_per_sonXXxn);XXxnXXxnsolve satisfy;XXxnXXxn% Output the assignmentsXXxnoutput [XXxn  'Son 1: ', show([i | i in 1..num_cows where assign[i, 1]], 'XXxn'), 'XXxn',XXxn  'Son 2: ', show([i | i in 1..num_cows where assign[i, 2]], 'XXxn'), 'XXxn',XXxn  'Son 3: ', show([i | i in 1..num_cows where assign[i, 3]], 'XXxn'), 'XXxn',XXxn  'Son 4: ', show([i | i in 1..num_cows where assign[i, 4]], 'XXxn'), 'XXxn',XXxn  'Son 5: ', show([i | i in 1..num_cows where assign[i, 5]], 'XXxn')XXxn];", "Cattle Milk Distribution Problem": "int: numCows = 25; % Total number of cowsXXxnint: totalMilk = 325; % Total milk produced by all cowsXXxnint: numSons = 5; % Number of sonsXXxnint: milkPerSon = totalMilk div numSons; % Milk required per sonXXxn% Specific number of cows each son should receiveXXxnarray[1..numSons] of int: cowsPerSon = [7, 6, 5, 4, 3];XXxn% Decision variables: which cows each son getsXXxnarray[1..numSons, 1..numCows] of var 0..1: sonCows;XXxn% Each cow can only be assigned to one sonXXxnconstraintXXxn  forall(c in 1..numCows) (XXxn    sum(s in 1..numSons) (sonCows[s, c]) == 1XXxn  );XXxn% Each son gets the exact number of cows requiredXXxnconstraintXXxn  forall(s in 1..numSons) (XXxn    sum(c in 1..numCows) (sonCows[s, c]) == cowsPerSon[s]XXxn  );XXxn% Each son gets exactly milkPerSon kg of milkXXxnconstraintXXxn  forall(s in 1..numSons) (XXxn    sum(c in 1..numCows) (sonCows[s, c] * c) == milkPerSonXXxn  );XXxnsolve satisfy;XXxnXXxnoutput [XXxn  'Son 1 gets cows: ', show([c | c in 1..numCows where sonCows[1, c] == 1]), 'XXxn',XXxn  'Son 2 gets cows: ', show([c | c in 1..numCows where sonCows[2, c] == 1]), 'XXxn',XXxn  'Son 3 gets cows: ', show([c | c in 1..numCows where sonCows[3, c] == 1]), 'XXxn',XXxn  'Son 4 gets cows: ', show([c | c in 1..numCows where sonCows[4, c] == 1]), 'XXxn',XXxn  'Son 5 gets cows: ', show([c | c in 1..numCows where sonCows[5, c] == 1]), 'XXxn'XXxn];", "Sum of Squares Combinations Problem": "int: n = 4; % Number of combinationsXXxnint: range = 100; % Range of numbersXXxnXXxn% Define the variables for the combinationsXXxnarray[1..n] of var 1..range: a; % First numberXXxnarray[1..n] of var 1..range: b; % Second numberXXxnarray[1..n] of var 1..range: c; % Third numberXXxnarray[1..n] of var 1..range: d; % Fourth numberXXxnXXxn% Constraints to ensure that the numbers are different within each pairXXxnconstraint forall(i in 1..n) (XXxn    a[i] != b[i] /XXxXXxn    c[i] != d[i]XXxn);XXxnXXxn% Constraint for the sum of squaresXXxnconstraint forall(i in 1..n) (XXxn    a[i]*a[i] + b[i]*b[i] = c[i]*c[i] + d[i]*d[i]XXxn);XXxnXXxn% Find a solutionXXxnsolve satisfy;XXxnXXxn% Output the combinations that satisfy the conditionsXXxnoutput [XXxn    'a: ' ++ show(a) ++ 'XXxn' ++XXxn    'b: ' ++ show(b) ++ 'XXxn' ++XXxn    'c: ' ++ show(c) ++ 'XXxn' ++XXxn    'd: ' ++ show(d)XXxn];", "Floor Assignment Puzzle": "```minizinc\nint: Floors = 5; % Number of floors\nint: Individuals = 5; % Number of individuals\n\n% Variables representing the floors occupied by each individual\narray[1..Individuals] of var 1..Floors: floors;\n\n% Individuals\nint: Baker = 1;\nint: Cooper = 2;\nint: Fletcher = 3;\nint: Miller = 4;\nint: Smith = 5;\n\n% Constraints\nconstraint floors[Baker] != 5; % Baker cannot be on the fifth floor\nconstraint floors[Cooper] != 1; % Cooper cannot be on the first floor\nconstraint floors[Fletcher] != 1; % Fletcher cannot be on the first floor\nconstraint floors[Fletcher] != 5; % Fletcher cannot be on the fifth floor\nconstraint floors[Miller] > floors[Cooper]; % Miller must be above Cooper\nconstraint abs(floors[Smith] - floors[Fletcher]) > 1; % Smith cannot be adjacent to Fletcher\nconstraint abs(floors[Fletcher] - floors[Cooper]) > 1; % Fletcher cannot be adjacent to Cooper\n\n% Ensure all individuals are assigned to different floors\nconstraint all_different(floors);\n\nsolve satisfy;\n\noutput ['Baker: ', show(floors[Baker]), 'XXxn',\n        'Cooper: ', show(floors[Cooper]), 'XXxn',\n        'Fletcher: ', show(floors[Fletcher]), 'XXxn',\n        'Miller: ', show(floors[Miller]), 'XXxn',\n        'Smith: ', show(floors[Smith]), 'XXxn'];\n```", "Guilty Suspect Deduction": "```minizinc\nenum SUSPECTS = {ARTIE, BILL, CRACKITT, DODGY, EDGY, FINGERS};\n\narray[SUSPECTS] of var bool: guilty;\n\n% Constraints based on statements\nconstraint\n    (guilty[ARTIE] = false) -> (guilty[ARTIE] = false) % ARTIE's statement\n    /XXx (guilty[BILL] = false) -> (guilty[CRACKITT] = true) % BILL's statement\n    /XXx (guilty[CRACKITT] = false) -> (guilty[CRACKITT] = false) % CRACKITT's statement\n    /XXx (guilty[DODGY] = false) -> ((guilty[CRACKITT] = true) -> (guilty[BILL] = true)) % DODGY's statement\n    /XXx (guilty[EDGY] = false) -> (sum(i in SUSPECTS)(guilty[i]) >= 2) % EDGY's statement\n    /XXx (guilty[FINGERS] = false) -> (guilty[ARTIE] = true /XXx guilty[DODGY] = true); % FINGERS's statement\n\nsolve satisfy;\n\noutput [ show(guilty) ];\n```", "Ratio Management Problem": "```minizinc\nint: total_people = 13;\nint: number_of_males = 4;\nint: number_of_females = 9;\n\narray[1..total_people] of var 0..1: entry; % 0 for male, 1 for female\n\n% Constraints to maintain the female to male ratio\nconstraint forall(i in 1..total_people)(\n    let {\n        var int: males_in_room = sum(j in 1..i)(if entry[j] == 0 then 1 else 0 endif),\n        var int: females_in_room = sum(j in 1..i)(if entry[j] == 1 then 1 else 0 endif)\n    } in\n    males_in_room > 0 -> females_in_room * 3 <= males_in_room * 7\n);\n\n% Ensure the total number of males and females is respected\nconstraint sum(i in 1..total_people)(if entry[i] == 0 then 1 else 0 endif) == number_of_males;\nconstraint sum(i in 1..total_people)(if entry[i] == 1 then 1 else 0 endif) == number_of_females;\n\nsolve satisfy;\n\noutput [ show(entry) ];\n```", "Sum and Product Problem": "```minizinc\nint: num_items = 4; % from dzn\nfloat: total_price = 7.11; % from dzn\n\narray[1..num_items] of var 0..total_price: prices;\n\nconstraint\n    sum(prices) = total_price;\n\nsolve satisfy;\n\noutput [ show(prices) ];\n```", "false": "```minizinc\n% MiniZinc model\nint: a; % from dzn\nint: b; % from dzn\n\n% Constraints\nconstraint a + b <= 10;\n\n% Solve statement\nsolve satisfy;\n\n% Output\noutput [show(a), show(b)];\n```"}, "assign": "Return this text:\nstart = 25;\narr=[35, 35, 20, 20, 20];", "apples_product_greater_than_15000": "%% MiniZinc model\nvar int: marko;\nvar int: petra;\n\nconstraint marko in {2, 3, 7, 23};\nconstraint petra in {4, 5, 6, 11};\nconstraint marko > petra;\nconstraint marko * petra > 15000;\n\noutput ['Marko: XXx(marko), Petra: XXx(petra)'];", "apples_product": "int: marko_min = 2;\nint: marko_max = 23;\nset of int: marko_values = marko_min..marko_max;\n\nint: petra_min = 4;\nint: petra_max = 11;\nset of int: petra_values = petra_min..petra_max;\n\nvar int: marko_value;\nvar int: petra_value;\nvar int: result;\n\nconstraint marko_value in marko_values;\nconstraint petra_value in petra_values;\nconstraint marko_value > petra_value;\nconstraint marko_value * petra_value > 15000;\n\nsolve minimize result;\n\noutput [show(result)];", "apples_product_greater_than_15000_reformat": "marko_min = 2;\nmarko_max = 6;\npetra_min = 1;\npetra_max = 10;", "apples_product_reformat": "marko = 2;\npetra = 4;", "apple_product_greater_than_15000_reformat": "marko = [1, 2, 3, 4, 5, 6];\npetra = [1, 2, 3, 4, 5, 6];", "Scheduling Problem_reformat": "% Data for the MiniZinc model\n% Unassigned input parameters\n\nb = 5; % Number of apples\nk = 3; % Number of students that must receive at least one apple", "Linear Regression_reformat": null, "Traveling Salesman Problem_reformat": "total_seats = 1000;\nvip_seats = 200;\nfree_seats = 400;", "Classification_reformat": null, "Unspecified_reformat": null, "Concert Ticket Selling Problem_reformat": " 'Determine if it's possible to sell concert tickets to meet a total price goal of $50,000, accommodate 400 special guests, and maximize profit, given 1,000 seats, 200 VIP seats, and expenses of $45,000.'\n\n", "Revenue Optimization Problem_reformat": "\nThere are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $150, and the regular ticket price is $50. The required number of free seats for special guests is 400. The total price goal is $50,000. The total expenses, including staff salary and concert fund, are $35,000. The goal profit is calculated by subtracting expenses from the total price goal.\n\n", "Ticket Selling Problem_reformat": "\nThere are 1,000 total seats for a concert. There are 200 VIP seats, and 400 free seats for special guests. The VIP ticket price is $150, and the regular ticket price is $50. The required number of free seats for special guests is 400. The total price goal is $50,000. The total expenses, including staff salary and concert fund, are $35,000. Calculate if it is possible to sell tickets to meet the total price goal while accommodating special guests and maximizing profit.\n\n", "Concert Ticket Selling\u95ee\u9898\u3002_reformat": "\nThere are 1,000 total seats for a concert. There are 200 VIP seats, and 400 free seats for special guests. The VIP ticket price is $150, and the regular ticket price is $50. The required number of free seats for special guests is 400. The total price goal that needs to be met through ticket sales is $50,000. The total revenue from ticket sales should cover expenses, including staff salary and concert fund, which amount to $35,000. Calculate if it's possible to achieve a profit while meeting all constraints.\n\n", "Board Configuration Problem_reformat": "\nThere are n different types of boards and m available slots for them to be allocated. Each board type comes in distinct quantities. Each board takes 1 or 2 slots per board.\n\nInput:\nThere are three single-slot boards: BOARD1, BOARD2, and BOARD3, and two double-slot boards: LBOARD1 and LBOARD2. Each type of board has unique restrictions on the slots it can occupy. BOARD1 and LBOARD1 can only occupy odd-numbered slots, while BOARD3 can only occupy even-numbered slots. BOARD2 can occupy the following slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31. LBOARD2 can only occupy slots that are powers of 2 (2^0, 2^1, 2^2, 2^3, 2^4). The quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5, and 6, respectively. LBOARDs (LBOARD1, LBOARD2) each have a quantity of 4. If an LBOARD is present, it comes in a minimum quantity of 2. LBOARD1 can have a range of 0, 2, 3, 4, and so on, while LBOARD2 can have a range of 0, 2, 4, and so on. There could be multiple types of LBOARD1 and LBOARD2, each with different quantities. There are 36 slots available in total.\n\n", "Concert Ticket Selling\u95ee\u9898_reformat": "\nThere are 1,000 total seats for a concert. There are 200 VIP seats. The price of a VIP ticket is $170, and the price of a regular ticket is $60. There are 400 free seats for special guests. The required number of free seats for special guests is 400. The total revenue is calculated from the sale of VIP and regular tickets. Total expenses, including staff salary and concert fund, are $45,000. The total price goal is $50,000. Calculate if it's possible to sell concert tickets to meet the total price goal while accommodating special guests and maximizing profit.\n\n", "Board Placement Problem_reformat": " There are three single-slot boards, BOARD1, BOARD2, and BOARD3, and two double-slot boards, LBOARD1 and LBOARD2. BOARD1 and LBOARD1 can only occupy odd-numbered slots, while BOARD3 can only occupy even-numbered slots. BOARD2 can occupy slots 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31. LBOARD2 can only occupy slots that are powers of 2 (2^0, 2^1, 2^2, 2^3, 2^4). The quantity of each BOARD type is 5, 5, and 6, respectively, for BOARD1, BOARD2, and BOARD3, and 4 for each LBOARD (LBOARD1 and LBOARD2). If an LBOARD is present, it comes in a minimum quantity of 2. LBOARD1 can have quantities of 0, 2, 3, 4, and so on, while LBOARD2 can have quantities of 0, 2, 4, and so on. There are a total of 36 slots available.\n\n", "Profit Maximization Problem_reformat": " 'Total seats: 1000; VIP seats: 200; Free seats for special guests: 400; VIP ticket price: $170; Regular ticket price: $60; Total price goal: $50,000; Total expenses: $45,000; Required free seats for special guests: 400'\n", "Seat Allocation Problem_reformat": " Determine if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit. There are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60. The total price goal is $50,000. Total expenses, including staff salary and concert fund, are $45,000. The required number of free seats for special guests is 400.\n\n", "Board Allocation Problem_reformat": " 'There are 36 available slots. Boards: BOARD1, BOARD2, BOARD3, LBOARD1, LBOARD2. Quantity of BOARD1, BOARD2, BOARD3 is 5, 5, 6 respectively. Quantity of LBOARD1, LBOARD2 is 4, 4 respectively. BOARD1 and LBOARD1 can only go to odd slots. BOARD3 can only go to even slots. Slots for BOARD2 are 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31. Slots for LBOARD2 are 2^0, 2^1, 2^2, 2^3, 2^4.'\n\n", "Class Scheduling Problem_reformat": " 'There are n classrooms available, each of which can be used for a maximum of m hours per day. The school operates for 3 hours each day, from 5 to 8. There are k classes, with each class occupying one classroom for an hour at a time. Each classroom corresponds to a specific subject. A class can have between 1 and z subjects per week, and the weekly schedule spans 5 days. The school houses four subjects across its classrooms: A, B, C, and D. The quantity of class sessions per subject across different days is outlined in the following matrix: Class/Subject Qty = [2, 2, 1, 3, 1, 4, 3, 4, 1, 2, 4, 5, 4, 2, 3, 6]. Each row in the matrix corresponds to a different class, and each column represents one of the four subjects (A, B, C, and D). The task is to allocate the time for each subject in each classroom to ensure every class has its required sessions, while respecting the maximum available classroom hours per day. Create a balanced schedule across all five days, ensuring that no class exceeds its designated time for any subject and that subjects are properly distributed across the classrooms.'\n\n", "Bin Packing Problem_reformat": " 'The dimensions of the bin are 10 x 10 x 10, and the dimensions of the items are  (4,4,4), (4,2,2), (2,5,2). Prohibited planes are (x=2), (y=4). Is it possible to place the items without them intersecting?'\n\n", "Fixed Orientation Bin Packing Problem_reformat": "\nThe dimensions of the bin are 10 x 10 x 10, and the dimensions of the items are (4,4,4), (4,2,2), (2,5,2).\nThe non-intersecting planes are (x=2), (y=4).\n\n", "Precision Agriculture Field Management Problem_reformat": "\nDetermine if it's possible to grow the required weight of vegetables and fruits using the available resources. There are 5000 liters of water, 400 sqm of land, 4000 kg of manure, and 50 kg of seeds. There are 3 crop types. Crop 1 is a vegetable, and Crops 2 and 3 are fruits. Crop 1 has a yield of 2 kg/sqm, requires 10 liters/sqm of water, and 0.1 kg/sqm of seeds. Crop 2 has a yield of 3 kg/sqm, requires 15 liters/sqm of water, and 0.2 kg/sqm of seeds. Crop 3 has a yield of 4 kg/sqm, requires 20 liters/sqm of water, and 0.15 kg/sqm of seeds. For each square meter, 20 kg of manure is required. The required weights are 200 kg for Crop 1, 150 kg for Crop 2, and 100 kg for Crop 3.\n\n", "Energy Budget Optimization_reformat": "\nDetermine if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity. The available yearly budget for energy is $5,000. The cost of each solar panel is $830, with each panel generating 800 kWh annually. The required number of panels is 6. The cost of purchasing electricity is $0.5 per kWh. The yearly electricity demand is 4,000 kWh.\n\n", "Furniture Placement Problem_reformat": " Arrange 4 furniture pieces in a 3x3 room such that the compatibility constraints are satisfied. Each furniture piece is marked with a number from 1 to 4. The compatibility matrix includes values of 0, 1, and 2, where:\n- 0 indicates that the respective furniture pieces cannot be adjacent.\n- 1 indicates that the respective furniture pieces can or do not have to be adjacent.\n- 2 indicates that the respective furniture pieces must be adjacent.\nEnsure that no two pieces of furniture occupy the same position and that all compatibility constraints are fulfilled.\n\n", "Constraint Satisfaction Problem_reformat": " Find the floors where Baker, Cooper, Fletcher, Miller, and Smith live.\n\n", "3D Bin Packing_reformat": "\nThe dimensions of the bin are 10 x 10 x 10, and the dimensions of the items are: (3,3,3), (3,3,2), (4,2,3), (3,3,3), (2,3,2).\n\n", "Profit maximization problem._reformat": "\nDetermine if it's possible to sell concert tickets to meet a total price goal of $50,000, given that there are 1,000 total seats. There are 200 VIP seats, and 400 free seats for special guests. The required number of free seats for special guests is 400. The VIP ticket price is $170, and the regular ticket price is $60. The total expenses, including staff salary and concert fund, are $45,000. Calculate if the desired profit can be achieved.\n\n", "Classroom Scheduling Problem_reformat": " 'Create a weekly schedule for the school that allocates time for each subject in each classroom, ensuring that all classes meet their required sessions. The school houses the following subjects across its four classrooms: A, B, C, and D. The quantity of class sessions per subject across different days is outlined in the matrix: Class/Subject Qty = [ 2  2  1  3,\n 1  4  3  4,\n 1  2  4  5,\n 4  2  3  6]. Each row corresponds to a class, and each column represents a subject. Two classes share a classroom in one day. Balance the schedule across all five days, ensuring that all classes fulfill their required sessions without exceeding the available classroom hours per day.'\n\n", "3D Bin Packing\u95ee\u9898\u3002_reformat": "\nThe dimensions of the bin are 10 x 10 x 10 units, and the dimensions of the items are:  (3,3,3), (3,3,2), (4,2,3), (3,3,3), (2,3,2).\n\n", "3D Bin Packing Problem_reformat": " 'Is it possible to place 5 items in three 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting, and the dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (3,3,3), (3,3,2), (4,2,3), (3,3,3), (2,3,2).' \n\n", "Board Scheduling Problem_reformat": "\nThere are n different types of boards and m available slots. Each board type comes in different quantities. A board is either 1 slot (BOARD) or 2 slots (LBOARD). Some boards can only occupy certain types of slots. Each BOARD type has a quantity of 5, 5, and 6, respectively. LBOARD types each have a quantity of 4, with a minimum quantity of 2 if LBOARD is present. LBOARD1 can have 0, 2, 3, 4, etc., while LBOARD2 can have 0, 2, 4, etc. There are 36 total slots.\n\n", "Three-Dimensional Bin Packing\u95ee\u9898_reformat": "\nThe dimensions of the bin are 10 x 10 x 10, and the dimensions of the items are: (4,4,4), (4,2,2), (2,5,2).\n\n", "Concert Ticket Selling problem_reformat": "\nThere are 1,000 total seats for a concert. There are 200 VIP seats, and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60. The required number of free seats for special guests is 400. The total price goal is $50,000. The total expenses, including staff salary and concert fund, are $45,000. Calculate if it's possible to sell concert tickets to meet the total price goal while accommodating special guests and maximizing profit.\n\n", "Generic Optimization_reformat": null, "Combinatorial Optimization._reformat": " Determine the possible combinations of boards that can be allocated to the available slots.\n\n", "3D Packing Problem_reformat": " 'Determine if it's possible to place 5 items in three 3-dimensional spaces of dimensions 10x10x10 units without them intersecting.'\n\n", "Resource Allocation Problem._reformat": " Determine if it's possible to grow the required weight of vegetables and fruits using the available resources.\n\n", "Solar Panel Budget Optimization_reformat": " Determine if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity.\n\n", "Furniture Arrangement Problem_reformat": " 'Arrange 4 furniture pieces in a 3x3 room such that incompatible pieces are not placed adjacent to each other, given the compatibility matrix where 0 indicates incompatibility and 1 indicates compatibility.'\n\n", "Ticket Sales Optimization_reformat": " There are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60. Constraints include ensuring that the total number of seats used does not exceed the available seats, VIP seats used should not exceed 200, free seats used should not exceed 400, and the required number of free seats for special guests is 400. The total price goal is $50,000 through ticket sales.\n\n", "3D Packing Problem with Constraints_reformat": " Is it possible to place 3 items in two 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting, and the dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (4,4,4), (4,2,2), (2,5,2)? \n\n", "Agricultural Resource Allocation Problem_reformat": " 'Determine if it's possible to grow the required weights of vegetables and fruits using the available resources, given the constraints on water, land, manure, and seeds. The required weights are 200 kg for crop 1 (vegetable), 150 kg for crop 2 (fruit), and 100 kg for crop 3 (fruit). The available resources include 5000 liters of water, 400 square meters of land, 4000 kg of manure, and 50 kg of seeds.'\n\n", "Solar Panel Cost-Benefit Analysis_reformat": " Determine if a house's yearly electricity demand can be satisfied using a combination of solar panels and purchased electricity given the available $5,000 budget.\n\n", "ticket_sales_revenue_reformat": " 'Ensure that the total number of seats used does not exceed the available seats. VIP seats used should not exceed 200, and free seats used should not exceed 400. The required number of free seats for special guests is 400. Total price goal of $50,000 must be met through ticket sales. The total revenue should cover expenses to achieve the desired profit.'\n", "BOARD1_LBOARD1_ODD_BOARD3_EVEN_BOARD2_LBOARD2_SPECIAL_reformat": null, "classroom_scheduling_subject_session_constraints_reformat": " 'There are n classrooms available, each of which can be used for a maximum of m hours per day. The school operates for 3 hours each day, from 5 to 8. There are k classes, with each class occupying one classroom for an hour at a time. Each classroom corresponds to a specific subject. A class can have between 1 and z subjects per week, and the weekly schedule spans 5 days. The school houses four subjects across its classrooms: A, B, C, and D. The quantity of class sessions per subject across different days is outlined in the following matrix: Class/Subject Qty = [2, 2, 1, 3, 1, 4, 3, 4, 1, 2, 4, 5, 4, 2, 3, 6]. Given that the school operates for a total of 15 hours per week (3 hours per day for 5 days), the task is to allocate the time for each subject in each classroom to ensure every class has its required sessions, while respecting the maximum available classroom hours per day. Create a balanced schedule across all five days, ensuring that no class exceeds its designated time for any subject and that subjects are properly distributed across the classrooms.'\n", "2D non-overlapping placement with non-touching constraints_reformat": " 'Place 5 items in three 3D spaces without intersecting'\n", "3D Packing Problem with Restricted Placement_reformat": " 'Place 3 items in two 3D spaces without intersection.'\n", "Precision_Ag_Field_Management_reformat": " \nThe available resources include 5000 liters of water, 400 square meters of land, 4000 kg of manure, and 50 kg of seeds. There are 3 crop types with the following details:\n- Crop 1 (Vegetable): Yield of 2 kg/sqm, requires 10 liters/sqm of water, and 0.1 kg/sqm of seeds.\n- Crop 2 (Fruit): Yield of 3 kg/sqm, requires 15 liters/sqm of water, and 0.2 kg/sqm of seeds.\n- Crop 3 (Fruit): Yield of 4 kg/sqm, requires 20 liters/sqm of water, and 0.15 kg/sqm of seeds.\nConstraints:\n1. Resource Limits: Ensure that the total area used does not exceed 500 sqm, total water used does not exceed 10,000 liters, total manure used does not exceed 10,000 kg, and total seeds used does not exceed 50 kg.\n2. Manure Requirement: For each square meter, 20 kg of manure is required.\n3. Crop Weight Requirement: Ensure that the produced crop weight meets or exceeds the required weights:\n   - Crop 1: 200 kg\n   - Crop 2: 150 kg\n   - Crop 3: 100 kg\n\n", "solar_panel_budget_detection_reformat": " 'Ensure the yearly electricity demand of a house can be satisfied within a given budget using a combination of solar panels and purchased electricity.'\n", "furniture_arrangement_compatibility_reformat": " '4 furniture pieces need to be arranged in a 3x3 room satisfying compatibility constraints'\n", "Event Seating and Revenue Optimization_reformat": " Determine if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit. There are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60. The required number of free seats for special guests is 400. The total price goal is $50,000. Total expenses, including staff salary and concert fund, are $45,000. The goal profit is calculated by subtracting expenses from the total price goal.\n\n", "Board Assignment Problem_reformat": " There are n=5 different types of boards and m=36 available slots. Each type of board comes in different quantities. There are three single-slot boards: BOARD1, BOARD2, BOARD3, and two double-slot boards: LBOARD1, LBOARD2. BOARD1 and LBOARD1 can only occupy odd slots, BOARD3 can only occupy even slots, BOARD2 can occupy slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, and LBOARD2 can only occupy slots that are powers of 2 (specifically 2^0, 2^1, 2^2, 2^3, 2^4). The quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5, 6, and LBOARD (LBOARD1, LBOARD2) is 4. If LBOARD exists, the minimum quantity is 2, and the allowed quantity range for LBOARD1 is 0, 2, 3, 4, ... for LBOARD2, it's 0, 2, 4, ....\n", "3D Packing with Constraints_reformat": " 'Is it possible to place 5 items in three 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting, and the dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (3,3,3), (3,3,2), (4,4,4), (3,3,3), (2,3,2). Also item 1 cannot be touching items: 2, 3, and 5, item 2 cannot be touching 1 and 3, item 3 cannot be touching 1, 2 and 4, item 4 cannot be touching 2 and 5, and 5 cannot be touching 1 and 4.'\n\n", "Precision Agriculture Field Management_reformat": " \nThe available resources include 5000 liters of water, 400 square meters of land, 4000 kg of manure, and 50 kg of seeds. There are 3 crop types with the following details:\n- Crop 1 (Vegetable): Yield of 2 kg/sqm, requires 10 liters/sqm of water, and 0.1 kg/sqm of seeds.\n- Crop 2 (Fruit): Yield of 3 kg/sqm, requires 15 liters/sqm of water, and 0.2 kg/sqm of seeds.\n- Crop 3 (Fruit): Yield of 4 kg/sqm, requires 20 liters/sqm of water, and 0.15 kg/sqm of seeds.\nConstraints:\n1. Resource Limits: Ensure that the total area used does not exceed 500 sqm, total water used does not exceed 10,000 liters, total manure used does not exceed 10,000 kg, and total seeds used does not exceed 50 kg.\n2. Manure Requirement: For each square meter, 20 kg of manure is required.\n3. Crop Weight Requirement: Ensure that the produced crop weight meets or exceeds the required weights:\n   - Crop 1: 200 kg\n   - Crop 2: 150 kg\n   - Crop 3: 100 kg\n\n", "Home Electricity Management Problem_reformat": " 'Determine if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity, given the available budget of $5,000. Required solar panels: 6. Yearly electricity demand: 4,000 kWh. Solar panel cost per unit: $830. Electricity purchased per unit: $0.5. Cost of required solar panels: 4,980. Remaining budget: 20.'\n\n", "Three-Dimensional Packing Problem_reformat": " 'Is it possible to place 5 items in three 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting, and the dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (3,3,3), (3,3,2), (4,4,4), (3,3,3), (2,3,2). Also item 1 cannot be touching items: 2, 3, and 5, item 2 cannot be touching 1 and 3, item 3 cannot be touching 1, 2 and 4, item 4 cannot be touching 2 and 5, and 5 cannot be touching 1 and 4.'\n\n", "3D Packing Problem._reformat": " Place 3 items with dimensions (4,4,4), (4,2,2), (2,5,2) in two 3D spaces of 10x10x10 without intersection, where (x=2) and (y=4) are prohibited.\n\n", "Grid Adjacency Constraint Satisfaction Problem_reformat": " 'Arrange 4 furniture pieces in a 3x3 room, considering the specified compatibility constraints.'\n\n", "Concert Ticket Sales Optimization_reformat": " 'Number of VIP and regular tickets to sell to meet total price goal while respecting seat constraints and maximizing profit. VIP price: $170, Regular price: $60. Total price goal: $50,000. Total seats: 1,000 (VIP: 200, free: 400). Special guest seats: 400.' \n\n", "Class Schedule Optimization_reformat": " The school houses four subjects across its classrooms: A, B, C, and D. Each classroom can be used for a maximum of m hours per day. The weekly schedule spans 5 days. Each class has its subjects. There are n classrooms. Each class has its required number of sessions for each subject. A class can have up to z subjects per week. There are k classes. Allocate the time for each subject in each classroom, ensuring no class exceeds its designated time for any subject, and subjects are properly distributed across the classrooms. \n\n", "3D Non-Touching Packing Problem_reformat": " 'Is it possible to place 5 items in three 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting, and the dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (3,3,3), (3,3,2), (4,4,4), (3,3,3), (2,3,2). Also item 1 cannot be touching items: 2, 3, and 5, item 2 cannot be touching 1 and 3, item 3 cannot be touching 1, 2 and 4, item 4 cannot be touching 2 and 5, and 5 cannot be touching 1 and 4.'\n\n", "3D Packing with Obstacles_reformat": " Place 3 items in two 3-dimensional spaces of dimensions 10x10x10 without intersecting, item dimensions: (4,4,4), (4,2,2), (2,5,2), avoid planes: (x=2), (y=4)\n\n", "Home Electricity Management_reformat": " The Home Electricity Management problem involves determining if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity. The available yearly budget for energy is $5,000.\nData:\n- Solar Panels:\n  - Cost per panel: $830\n  - Electricity generated per panel: 800 kWh\n  - Required number of panels: 6\n- Electricity Purchase:\n  - Cost per unit: $0.5 per kWh\n- Electricity Demand:\n  - Yearly demand: 4,000 kWh\n\n", "Concert Ticket Sales Problem_reformat": " Determine if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit. There are 1,000 total seats, with 200 VIP seats and 400 free seats for special guests. The required number of free seats for special guests is 400. The VIP ticket price is $170, and the regular ticket price is $60. The total price goal is $50,000, and total expenses, including staff salary and concert fund, are $45,000.\n\n", "Board Type Quantities Problem_reformat": " There are n different board types and m available slots. Each board type comes in distinct quantities, with some occupying one slot (BOARD) and others occupying two slots (LBOARD). Determine the number of each type of board.\n\n", "3D Item Packing Problem_reformat": " Place 5 items in three 3-dimensional spaces of width 10 units, height 10 units, and depth 10 units without intersections. Item dimensions: (3,3,3), (3,3,2), (4,2,3), (3,3,3), (2,3,2). \n\n", "Precision Agriculture Field Management\u95ee\u9898\u3002_reformat": " Determine if it's possible to grow the required weight of vegetables and fruits using the available resources, given the specific crop details and constraints.\n\n", "Resource Allocation Problem_reformat": " 'The Precision Agriculture Field Management problem involves determining if it's possible to grow the required weight of vegetables and fruits using the available resources.'\n\n", "Adjacent Furniture Pieces in a 3x3 Room_reformat": " 'Arrange 4 furniture pieces in a 3x3 room according to compatibility constraints, where each furniture piece is marked with a number from 1 to 4. The compatibility matrix contains values of 0, 1, and 2. A value of 0 indicates that the respective furniture pieces cannot be adjacent, a value of 1 indicates no specific adjacency constraint, and a value of 2 indicates that the respective furniture pieces must be adjacent. Ensure that no two furniture pieces occupy the same position.'\n\n", "Energy Budget Allocation Problem_reformat": " \n- Solar Panels:\n  - Cost per panel: $830\n  - Electricity generated per panel: 800 kWh\n  - Required number of panels: 6\n- Electricity Purchase:\n  - Cost per unit: $0.5 per kWh\n- Electricity Demand:\n  - Yearly demand: 4,000 kWh\n\n", "Precision_Agriculture_Field_Management_reformat": " The available resources include 5000 liters of water, 400 square meters of land, 4000 kg of manure, and 50 kg of seeds. There are 3 crop types: Crop 1 yields 2 kg/sqm, Crop 2 yields 3 kg/sqm, and Crop 3 yields 4 kg/sqm. Crop 1 requires 0.1 kg seeds/sqm, Crop 2 requires 0.2 kg seeds/sqm, and Crop 3 requires 0.15 kg seeds/sqm. Manure: For each square meter, 20 kg manure is required. Ensure 10,000 liters water, 500 sqm land, 10,000 kg manure, 50 kg seeds. The crop weight requirements are 200 kg, 150 kg, and 100 kg, respectively.\n\n", "Electricity Management Problem_reformat": " \n- Solar Panels:\n  - Cost per panel: $830\n  - Electricity generated per panel: 800 kWh\n  - Required number of panels: 6\n- Electricity Purchase:\n  - Cost per unit: $0.5 per kWh\n- Electricity Demand:\n  - Yearly demand: 4,000 kWh\n\n", "Furniture_Placement_Store_reformat": " \n- Number of Furniture Pieces: 4\n- Room Dimensions: 3x3 grid\n- Compatibility Matrix:\n  - [0, 1, 2, 0]\n  - [1, 0, 1, 0]\n  - [2, 1, 0, 2]\n  - [0, 0, 2, 0]\n\n", "3D Non-Intersecting Item Placement Problem_reformat": " Place 5 items in three 3-dimensional spaces of width 10 units, height 10 units, and depth 10 units without them intersecting. The dimensions of each item are (3,3,3), (3,3,2), (4,4,4), (3,3,3), (2,3,2).\n\n", "Board Allocation Model_reformat": null, "Classroom Scheduling Model_reformat": " ''\n", "Classroom Session Scheduling Problem_reformat": " Classes A, B, C, and D each have specific weekly session needs that must be scheduled across five days. The goal is to allocate the hours per day for each subject in each classroom so that every class meets its required weekly sessions without exceeding the daily classroom hour limits.\n\n", "3D_Packing_with_Constraints_reformat": " Place 5 items in three 3-dimensional spaces of 10x10x10 units without intersecting, given the item dimensions and adjacency constraints.\n\n", "3D Non-Intersecting Packing Problem_reformat": null, "Geometric Plane Constraint Problem_reformat": " Is it possible to place 3 items in two 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting, and the dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (4,4,4), (4,2,2), (2,5,2).\n\n", "Energy_Budget_Optimization_reformat": " \n- Solar Panels:\n  - Cost per panel: $830\n  - Electricity generated per panel: 800 kWh\n  - Required number of panels: 6\n- Electricity Purchase:\n  - Cost per unit: $0.5 per kWh\n- Electricity Demand:\n  - Yearly demand: 4,000 kWh\n\n", "Furniture Arrangement Compatibility_reformat": " The Furniture Placement in a Store problem involves arranging 4 furniture pieces in a 3x3 room such that the compatibility constraints are satisfied. Each furniture piece is marked with a number from 1 to 4. Two furniture pieces are considered adjacent in a 3x3 room if they are above, below, left, or right of one another. If they are diagonally positioned relative to each other, that is not considered adjacent.\n\n", "Board Quantity Distribution Problem_reformat": " There are n different types of boards and m available slots for them to be allocated. Each board type comes in distinct quantities. Each board takes 1 or 2 slots per board. Boards that occupy one slot are referred to as BOARD, and those that occupy two slots are referred to as LBOARD. There are three single-slot boards: BOARD1, BOARD2, and BOARD3, along with two double-slot boards: LBOARD1 and LBOARD2. Each type of board has unique restrictions on the slots it can occupy. BOARD1 and LBOARD1 can only occupy odd-numbered slots, while BOARD3 can only occupy even-numbered slots. BOARD2 can occupy the following slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31. LBOARD2 can only occupy slots that are powers of 2, specifically 2^0, 2^1, 2^2, 2^3, and 2^4.\n\n", "Classroom Schedule Optimization_reformat": " 'There are n classrooms available, each of which can be used for a maximum of m hours per day. The school operates for 3 hours each day, from 5 to 8. There are k classes, with each class occupying one classroom for an hour at a time. Each classroom corresponds to a specific subject. A class can have between 1 and z subjects per week, and the weekly schedule spans 5 days. The school houses four subjects across its classrooms: A, B, C, and D. The quantity of class sessions per subject across different days is outlined in the following matrix: Class/Subject Qty = [2, 2, 1, 3, 1, 4, 3, 4, 1, 2, 4, 5, 4, 2, 3, 6] Each row in the matrix corresponds to a different class, and each column represents one of the four subjects (A, B, C, and D). The numbers indicate the quantity of sessions needed for each class in each subject over the week. Given that the school operates for a total of 15 hours per week (3 hours per day for 5 days), the task is to allocate the time for each subject in each classroom to ensure every class has its required sessions, while respecting the maximum available classroom hours per day. Create a balanced schedule across all five days, ensuring that no class exceeds its designated time for any subject and that subjects are properly distributed across the classrooms.' \n\n", "3D_Bin_Packing_Problem_reformat": " Place the following items in three 3-dimensional spaces of 10x10x10 units each without intersection: (3,3,3), (3,3,2), (4,2,3), (3,3,3), (2,3,2).\n\n", "3D_Non_Intersecting_Packing_reformat": null, "3D Non-Intersecting Packing_reformat": " Place 3 items in two 3D spaces with dimensions 10x10x10, with item dimensions (4,4,4), (4,2,2), (2,5,2). Avoid intersecting planes (x=2) and (y=4).\n\n", "Classroom_Scheduling_reformat": " 'Matrix of required class sessions per subject per week:\n[2, 2, 1, 3,\n 1, 4, 3, 4,\n 1, 2, 4, 5,\n 4, 2, 3, 6]'\n'Number of classrooms available: n'\n'Hours available per classroom per day: m'\n'Total operating hours per week: 15'\n'Number of classes: k'\n'Maximum number of subjects per class: z'\n'Number of subjects: 4'\n", "Concert Ticket Selling Model_reformat": " There are 1,000 total seats for a concert. There are 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60. The goal is to meet a total price of $50,000. The total expenses, including staff salary and concert fund, are $45,000. The required number of free seats for special guests is 400. Calculate if it's possible to sell tickets to meet the total price goal and achieve the desired profit, while accommodating special guests.\n\n", "Concert Ticket Sales Model_reformat": " Determine if it's possible to sell concert tickets to meet a total price goal of $50,000 while maximizing profit. The VIP ticket price is $170, and the regular ticket price is $60. There are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. \n\n", "Concert Ticket Selling_reformat": " Determine if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit. There are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60. Ensure constraints are satisfied to achieve the desired profit while meeting the total price goal and accommodating special guests.\n\n", "classroom_scheduling_reformat": " \nCreate a balanced weekly schedule for a school with n classrooms, each available for m hours per day. There are k classes, each needing specific class sessions for subjects A, B, C, and D. The school operates for 3 hours a day from 5 to 8, and the schedule spans 5 days.\nClass/Subject Qty =\n[2, 2, 1, 3,\n 1, 4, 3, 4,\n 1, 2, 4, 5,\n 4, 2, 3, 6]\nEnsure each class meets its required subject sessions without exceeding daily classroom limits and distribute subjects across classrooms.\n", "3D Non-Intersecting Item Packing_reformat": " Is it possible to place 5 items in three 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting, and the dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (3,3,3), (3,3,2), (4,4,4), (3,3,3), (2,3,2). Also item 1 cannot be touching items: 2, 3, and 5, item 2 cannot be touching 1 and 3, item 3 cannot be touching 1, 2 and 4, item 4 cannot be touching 2 and 5, and 5 cannot be touching 1 and 4.\n\n", "Classroom Scheduling_reformat": null, "Home_Electricity_Management_reformat": " \n- Solar Panels:\n  - Cost per panel: $830\n  - Electricity generated per panel: 800 kWh\n  - Required number of panels: 6\n- Electricity Purchase:\n  - Cost per unit: $0.5 per kWh\n- Electricity Demand:\n  - Yearly demand: 4,000 kWh\n- Available budget: $5,000\n\n", "Concert_Profit_Optimization_reformat": " \nTotal seats: 1000\nVIP seats: 200\nFree seats for special guests: 400\nTotal price goal: $50,000\nVIP ticket price: $170\nRegular ticket price: $60\n\n", "Concert_Revenue_Optimization_reformat": " \nTotal seats: 1000\nVIP seats: 200\nFree seats for special guests: 400\nTotal price goal: $50,000\nVIP ticket price: $170\nRegular ticket price: $60\n\n", "Solar_Panel_Electricity_Constraint_reformat": " \n- Budget: $5,000\n- Solar Panel Cost: $830 each\n- Solar Panels required: 6\n- Electricity Purchase cost: $0.5 per kWh\n- Electricity demand: 4,000 kWh/year\n", "Solar_Panel_Electricity_Constraints_reformat": " \n- Budget: $5,000\n- Solar Panel Cost: $830 each\n- Solar Panels required: 6\n- Electricity Purchase cost: $0.5 per kWh\n- Electricity demand: 4,000 kWh/year\n", "ConcertTicketSalesProfit_reformat": " \nTotal seats: 1000\nVIP seats: 200\nFree seats for special guests: 400\nTotal price goal: $50,000\nVIP ticket price: $170\nRegular ticket price: $60\n\n", "Concert_Ticket_Sales_Optimization_reformat": " \nTotal seats: 1000\nVIP seats: 200\nFree seats for special guests: 400\nTotal price goal: $50,000\nVIP ticket price: $170\nRegular ticket price: $60\n\n", "ConcertTicketSelling_reformat": " There are 1,000 total seats for a concert. This includes 200 VIP seats and 400 free seats for special guests. The price for VIP tickets is $170, and regular tickets are $60. The goal is to achieve a total revenue of $50,000, considering that the total expenses are $45,000. There are 400 required free seats for special guests. Can we meet the total price goal while accommodating special guests and maximizing profit?\n\n", "ConcertProfitMaximization_reformat": " \nAvailable seats: VIP (200), regular (800), free for guests (400)\nTicket prices: VIP ($170), regular ($60)\nTotal expenses: $45,000\nTotal price goal: $50,000\n\n", "ClassroomScheduling_reformat": " ''\n", "false_reformat": null, "FurnitureArrangementCompatibility_reformat": " 'The Furniture Placement in a Store problem (second variation) involves arranging 4 furniture pieces in a 3x3 room such that the compatibility constraints are satisfied. Each furniture piece is marked with a number from 1 to 4.\nData:\n- Number of Furniture Pieces: 4\n- Room Dimensions: 3x3 grid\n- Compatibility Matrix:\n  - [0, 1, 2, 0]\n  - [1, 0, 1, 0]\n  - [2, 1, 0, 2]\n  - [0, 0, 2, 0]'\n\n", "Board_Allocation_Model_reformat": " There are three single-slot boards: BOARD1, BOARD2, BOARD3, and two double-slot boards: LBOARD1, LBOARD2. Each type of board has specific slot restrictions. BOARD1 and LBOARD1 can only occupy odd-numbered slots. BOARD3 can only occupy even-numbered slots. BOARD2 can occupy slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31. LBOARD2 can only occupy slots that are powers of 2 (2^0, 2^1, 2^2, 2^3, 2^4). The quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5, 6, and for LBOARDs (LBOARD1, LBOARD2) is 4. If there are LBOARDs, the minimum quantity is 2. LBOARD1 can have quantities of 0, 2, 3, 4, and so on. LBOARD2 can have quantities of 0, 2, 4, and so on. There are 36 available slots in total.\n\n", "HomeElectricityManagement_reformat": " The Home Electricity Management problem involves determining if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity. The available yearly budget for energy is $5,000.\nData:\n- Solar Panels:\n  - Cost per panel: $830\n  - Electricity generated per panel: 800 kWh\n  - Required number of panels: 6\n- Electricity Purchase:\n  - Cost per unit: $0.5 per kWh\n- Electricity Demand:\n  - Yearly demand: 4,000 kWh\n\n", "Furniture Arrangement Model_reformat": null, "FurniturePlacementInStore_reformat": null, "Seating and Revenue Optimization Problem_reformat": " 'The Concert Ticket Selling problem involves determining if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit.'\n\n", "BoardSlotAllocationProblem_reformat": " 'There are n different types of boards and m available slots for them to be allocated. Each board type comes in distinct quantities. Each board takes 1 or 2 slots per board. Boards that occupy one slot are referred to as BOARD, and those that occupy two slots are referred to as LBOARD. The quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5 and 6 respectively. LBOARDs (LBOARD1 and LBOARD2) each come in a quantity of 4. Additionally, if an LBOARD is present, it comes in a minimum quantity of 2. There are 36 available slots in total for all boards.'\n\n", "3D Spatial Packing Problem_reformat": " 'You need to determine if it is possible to place 5 items in three 3-dimensional spaces of size 10x10x10 units without them intersecting. The dimensions of each item are given as coordinates (width, height, depth), and certain items have restrictions on their placement with respect to others.' \n\n", "3D Packing with Non-Touching Constraints_reformat": " 'Is it possible to place 5 items in three 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting? The dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (3,3,3), (3,3,2), (4,4,4), (3,3,3), (2,3,2).'\n\n", "Furniture Arrangement Compatibility Problem_reformat": " 'The Furniture Placement in a Store problem involves arranging 4 furniture pieces in a 3x3 room such that the compatibility constraints are satisfied.'\n\n", "Concert Ticket Pricing Optimization_reformat": " 'The Concert Ticket Selling problem involves determining if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit. There are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60.' \n\n", "Seating and Pricing Optimization Problem_reformat": " The Concert Ticket Selling problem involves determining if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit. There are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60. \n\n", "Board Allocation Optimization_reformat": " 'There are n different types of boards and m available slots for them to be allocated. Each board type comes in distinct quantities. Each board takes 1 or 2 slots per board. Boards that occupy one slot are referred to as BOARD, and those that occupy two slots are referred to as LBOARD.\\nThere are three single-slot boards: BOARD1, BOARD2, and BOARD3, along with two double-slot boards: LBOARD1 and LBOARD2. Each type of board has unique restrictions on the slots it can occupy. BOARD1 and LBOARD1 can only occupy odd-numbered slots, while BOARD3 can only occupy even-numbered slots. BOARD2 can occupy the following slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31. LBOARD2 can only occupy slots that are powers of 2, specifically 2^0, 2^1, 2^2, 2^3, and 2^4.\\nThe quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5 and 6 respectively. LBOARDs (LBOARD1 and LBOARD2) each come in a quantity of 4. Additionally, if an LBOARD is present, it comes in a minimum quantity of 2. LBOARD1 can have a range of 0, 2, 3, 4, and so on, while LBOARD2 follows a range of 0, 2, 4, and so forth. Multiple types of LBOARD1 and LBOARD2 may exist, each with distinct quantities.\\nThere are 36 available slots in total for all boards.' \n\n", "3D Spatial Placement with Constraints_reformat": " 'Given two 3-dimensional spaces of dimensions 10x10x10 each, determine if it is possible to place three items with specific dimensions in these spaces without them intersecting, and ensuring that none of the items intersect with the planes x=2 and y=4.' \n\n", "Budget-Constrained Electricity Generation Problem_reformat": " 'Determine if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity within an available budget of $5,000. The house requires 4,000 kWh of electricity per year, and the solution must consider the costs of both solar panels and purchased electricity.' \n\n", "Furniture Arrangement with Compatibility Constraints_reformat": " 'The Furniture Placement in a Store problem (second variation) involves arranging 4 furniture pieces in a 3x3 room such that the compatibility constraints are satisfied. Each furniture piece is marked with a number from 1 to 4. Two furniture pieces are considered adjacent in a 3x3 room if they are above, below, left or right of one another. If they are diagonally positioned relative to each other, that is not considered adjacent.' \n\n", "Optimization Problem_reformat": " 'The Concert Ticket Selling problem involves determining if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit. There are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60. Constraints: 1. Seat Usage: Ensure that the total number of seats used does not exceed the available seats. VIP seats used should not exceed 200, and free seats used should not exceed 400. The required number of free seats for special guests is 400. 2. Total Price Requirement: Ensure that the total price goal of $50,000 is met through ticket sales. 3. Profit Calculation: The total revenue is calculated from the sale of VIP and regular tickets. Total expenses, including staff salary and concert fund, are $45,000. The goal profit is calculated by subtracting expenses from the total price goal. Objective: Satisfy all constraints to achieve the desired profit while meeting the total price goal and accommodating special guests. A valid solution ensures that the required number of special guest seats is available, the total price goal is met, and the profit is optimized.' \n\n", "Backtracking Allocation Problem_reformat": " 'There are n different types of boards and m available slots for them to be allocated. Each board type comes in distinct quantities. Each board takes 1 or 2 slots per board. Boards that occupy one slot are referred to as BOARD, and those that occupy two slots are referred to as LBOARD. There are three single-slot boards: BOARD1, BOARD2, and BOARD3, along with two double-slot boards: LBOARD1 and LBOARD2. Each type of board has unique restrictions on the slots it can occupy. BOARD1 and LBOARD1 can only occupy odd-numbered slots, while BOARD3 can only occupy even-numbered slots. BOARD2 can occupy the following slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31. LBOARD2 can only occupy slots that are powers of 2, specifically 2^0, 2^1, 2^2, 2^3, and 2^4. The quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5 and 6 respectively. LBOARDs (LBOARD1 and LBOARD2) each come in a quantity of 4. Additionally, if an LBOARD is present, it comes in a minimum quantity of 2. LBOARD1 can have a range of 0, 2, 3, 4, and so on, while LBOARD2 follows a range of 0, 2, 4, and so forth. Multiple types of LBOARD1 and LBOARD2 may exist, each with distinct quantities. There are 36 available slots in total for all boards.' \n\n", "3D Packing with Plane Constraints_reformat": " 'Is it possible to place 3 items in two 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting, and the dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (4,4,4), (4,2,2), (2,5,2). Also the geometric planes with which no items can intersect are (x=2) and (y=4).' \n\n", "Crop Allocation Optimization Problem_reformat": " 'The Precision Agriculture Field Management problem involves determining if it's possible to grow the required weight of vegetables and fruits using the available resources. The available resources include 5000 liters of water, 400 square meters of land, 4000 kg of manure, and 50 kg of seeds. There are 3 crop types with the following details: - Crop 1 (Vegetable): Yield of 2 kg/sqm, requires 10 liters/sqm of water, and 0.1 kg/sqm of seeds. - Crop 2 (Fruit): Yield of 3 kg/sqm, requires 15 liters/sqm of water, and 0.2 kg/sqm of seeds. - Crop 3 (Fruit): Yield of 4 kg/sqm, requires 20 liters/sqm of water, and 0.15 kg/sqm of seeds. Constraints: 1. Resource Limits: Ensure that the total area used does not exceed 500 sqm, total water used does not exceed 10,000 liters, total manure used does not exceed 10,000 kg, and total seeds used does not exceed 50 kg. 2. Manure Requirement: For each square meter, 20 kg of manure is required. 3. Crop Weight Requirement: Ensure that the produced crop weight meets or exceeds the required weights: - Crop 1: 200 kg - Crop 2: 150 kg - Crop 3: 100 kg Objective: No optimization is needed; the goal is to satisfy all constraints with the given resources. A valid solution ensures that the required crop weights are achieved using the available resources and meeting all constraints.' \n\n", "Budget Sufficiency Problem_reformat": " 'The Home Electricity Management problem involves determining if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity. The available yearly budget for energy is $5,000.' \n\n", "Grid-Based Furniture Arrangement with Compatibility Constraints_reformat": " 'The Furniture Placement in a Store problem involves arranging 4 furniture pieces in a 3x3 room such that incompatible pieces are not placed adjacent to each other. Each furniture piece is marked with a number from 1 to 4.' \n\n", "Grid-Based Placement Problem with Compatibility Constraints_reformat": " 'The Furniture Placement in a Store problem (second variation) involves arranging 4 furniture pieces in a 3x3 room such that the compatibility constraints are satisfied. Each furniture piece is marked with a number from 1 to 4. Two furniture pieces are considered adjacent in a 3x3 room if they are above, below, left or right of one another. If they are diagonally positioned relative to eachother, that is not considered adjacent.' \n\n", "N/A_reformat": " 'There are n different types of boards and m available slots for them to be allocated. Each board type comes in distinct quantities. Each board takes 1 or 2 slots per board. Boards that occupy one slot are referred to as BOARD, and those that occupy two slots are referred to as LBOARD. There are three single-slot boards: BOARD1, BOARD2, and BOARD3, along with two double-slot boards: LBOARD1 and LBOARD2. Each type of board has unique restrictions on the slots it can occupy. BOARD1 and LBOARD1 can only occupy odd-numbered slots, while BOARD3 can only occupy even-numbered slots. BOARD2 can occupy the following slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31. LBOARD2 can only occupy slots that are powers of 2, specifically 2^0, 2^1, 2^2, 2^3, and 2^4. The quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5 and 6 respectively. LBOARDs (LBOARD1 and LBOARD2) each come in a quantity of 4. Additionally, if an LBOARD is present, it comes in a minimum quantity of 2. LBOARD1 can have a range of 0, 2, 3, 4, and so on, while LBOARD2 follows a range of 0, 2, 4, and so forth. Multiple types of LBOARD1 and LBOARD2 may exist, each with distinct quantities. There are 36 available slots in total for all boards.'\n\n", "Classroom Scheduling Optimization_reformat": " 'There are n classrooms available, each of which can be used for a maximum of m hours per day. The school operates for 3 hours each day, from 5 to 8. There are k classes, with each class occupying one classroom for an hour at a time. Each classroom corresponds to a specific subject. A class can have between 1 and z subjects per week, and the weekly schedule spans 5 days. The school houses four subjects across its classrooms: A, B, C, and D. The quantity of class sessions per subject across different days is outlined in the following matrix: Class/Subject Qty = [2, 2, 1, 3, 1, 4, 3, 4, 1, 2, 4, 5, 4, 2, 3, 6] Each row in the matrix corresponds to a different class, and each column represents one of the four subjects (A, B, C, and D). The numbers indicate the quantity of sessions needed for each class in each subject over the week. Given that the school operates for a total of 15 hours per week (3 hours per day for 5 days), the task is to allocate the time for each subject in each classroom to ensure every class has its required sessions, while respecting the maximum available classroom hours per day. Create a balanced schedule across all five days, ensuring that no class exceeds its designated time for any subject and that subjects are properly distributed across the classrooms.'\n\n", "3D Bin Packing with Non-Touching Constraints_reformat": " 'Is it possible to place 5 items in three 3 dimensional spaces of width of 10 units, height of 10 units, and depth of 10 units, without them intersecting, and the dimensions of each item (given as a set of three coordinates (width, height, depth)) are: (3,3,3), (3,3,2), (4,4,4), (3,3,3), (2,3,2). Also item 1 cannot be touching items: 2, 3, and 5, item 2 cannot be touching 1 and 3, item 3 cannot be touching 1, 2 and 4, item 4 cannot be touching 2 and 5, and 5 cannot be touching 1 and 4.'\n\n", "3D Bin Packing with Fixed Planes_reformat": " 'Determine if it is possible to place 3 items in two 3-dimensional spaces of dimensions 10x10x10 units without them intersecting, given the dimensions of each item and the geometric planes with which no items can intersect.'\n\n", "Crop Resource Allocation Problem_reformat": " The Precision Agriculture Field Management problem involves determining if it's possible to grow the required weight of vegetables and fruits using the available resources. The available resources include 5000 liters of water, 400 square meters of land, 4000 kg of manure, and 50 kg of seeds. There are 3 crop types with the following details: - Crop 1 (Vegetable): Yield of 2 kg/sqm, requires 10 liters/sqm of water, and 0.1 kg/sqm of seeds. - Crop 2 (Fruit): Yield of 3 kg/sqm, requires 15 liters/sqm of water, and 0.2 kg/sqm of seeds. - Crop 3 (Fruit): Yield of 4 kg/sqm, requires 20 liters/sqm of water, and 0.15 kg/sqm of seeds. Constraints: 1. Resource Limits: Ensure that the total area used does not exceed 500 sqm, total water used does not exceed 10,000 liters, total manure used does not exceed 10,000 kg, and total seeds used does not exceed 50 kg. 2. Manure Requirement: For each square meter, 20 kg of manure is required. 3. Crop Weight Requirement: Ensure that the produced crop weight meets or exceeds the required weights: - Crop 1: 200 kg - Crop 2: 150 kg - Crop 3: 100 kg Objective: No optimization is needed; the goal is to satisfy all constraints with the given resources. A valid solution ensures that the required crop weights are achieved using the available resources and meeting all constraints.\n\n", "Solar Energy Cost Optimization_reformat": " 'Determine if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity within a budget of $5,000.'\n\n", "Ticket Pricing and Allocation Optimization_reformat": " The Concert Ticket Selling problem involves determining if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit. \n\n", "Slot Occupancy Optimization Problem_reformat": " 'There are n different types of boards and m available slots for them to be allocated. Each board type comes in distinct quantities. Each board takes 1 or 2 slots per board. Boards that occupy one slot are referred to as BOARD, and those that occupy two slots are referred to as LBOARD. There are three single-slot boards: BOARD1, BOARD2, and BOARD3, along with two double-slot boards: LBOARD1 and LBOARD2. Each type of board has unique restrictions on the slots it can occupy. BOARD1 and LBOARD1 can only occupy odd-numbered slots, while BOARD3 can only occupy even-numbered slots. BOARD2 can occupy the following slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31. LBOARD2 can only occupy slots that are powers of 2, specifically 2^0, 2^1, 2^2, 2^3, and 2^4. The quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5 and 6 respectively. LBOARDs (LBOARD1 and LBOARD2) each come in a quantity of 4. Additionally, if an LBOARD is present, it comes in a minimum quantity of 2. LBOARD1 can have a range of 0, 2, 3, 4, and so on, while LBOARD2 follows a range of 0, 2, 4, and so forth. Multiple types of LBOARD1 and LBOARD2 may exist, each with distinct quantities. There are 36 available slots in total for all boards.'\n\n", "3D Packing with Geometric Constraints_reformat": " 'Determine if it's possible to place 3 items in two 3-dimensional spaces of dimensions 10x10x10 units without intersecting, considering specific geometric plane restrictions and the dimensions of each item.' \n\n", "Resource Allocation and Crop Yield Optimization_reformat": " The Precision Agriculture Field Management problem involves determining if it's possible to grow the required weight of vegetables and fruits using the available resources. The available resources include 5000 liters of water, 400 square meters of land, 4000 kg of manure, and 50 kg of seeds. There are 3 crop types with the following details: - Crop 1 (Vegetable): Yield of 2 kg/sqm, requires 10 liters/sqm of water, and 0.1 kg/sqm of seeds. - Crop 2 (Fruit): Yield of 3 kg/sqm, requires 15 liters/sqm of water, and 0.2 kg/sqm of seeds. - Crop 3 (Fruit): Yield of 4 kg/sqm, requires 20 liters/sqm of water, and 0.15 kg/sqm of seeds. Constraints: 1. Resource Limits: Ensure that the total area used does not exceed 500 sqm, total water used does not exceed 10,000 liters, total manure used does not exceed 10,000 kg, and total seeds used does not exceed 50 kg. 2. Manure Requirement: For each square meter, 20 kg of manure is required. 3. Crop Weight Requirement: Ensure that the produced crop weight meets or exceeds the required weights: - Crop 1: 200 kg - Crop 2: 150 kg - Crop 3: 100 kg Objective: No optimization is needed; the goal is to satisfy all constraints with the given resources. A valid solution ensures that the required crop weights are achieved using the available resources and meeting all constraints.\n\n", "Budgeted Solar Energy Solution_reformat": " The Home Electricity Management problem involves determining if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity within a budget of $5,000.\n\n", "Concert Seating Optimization Problem_reformat": " 'The Concert Ticket Selling problem involves determining if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit. There are 1,000 total seats, including 200 VIP seats and 400 free seats for special guests. The VIP ticket price is $170, and the regular ticket price is $60. Ensure that the total number of seats used does not exceed the available seats. VIP seats used should not exceed 200, and free seats used should not exceed 400. The required number of free seats for special guests is 400. Ensure that the total price goal of $50,000 is met through ticket sales. The total revenue is calculated from the sale of VIP and regular tickets. Total expenses, including staff salary and concert fund, are $45,000. The goal profit is calculated by subtracting expenses from the total price goal. Satisfy all constraints to achieve the desired profit while meeting the total price goal and accommodating special guests. A valid solution ensures that the required number of special guest seats is available, the total price goal is met, and the profit is optimized.'\n\n", "Spatial Arrangement and Intersection Problem_reformat": " 'Determine if it's possible to place 3 items in two 3-dimensional spaces of dimensions 10x10x10 without them intersecting, considering specific geometric plane restrictions and the dimensions of each item.' \n\n", "Agricultural Resource Optimization Problem_reformat": " 'The Precision Agriculture Field Management problem involves determining if it's possible to grow the required weight of vegetables and fruits using the available resources. The available resources include 5000 liters of water, 400 square meters of land, 4000 kg of manure, and 50 kg of seeds. There are 3 crop types with the following details: - Crop 1 (Vegetable): Yield of 2 kg/sqm, requires 10 liters/sqm of water, and 0.1 kg/sqm of seeds. - Crop 2 (Fruit): Yield of 3 kg/sqm, requires 15 liters/sqm of water, and 0.2 kg/sqm of seeds. - Crop 3 (Fruit): Yield of 4 kg/sqm, requires 20 liters/sqm of water, and 0.15 kg/sqm of seeds. Constraints: 1. Resource Limits: Ensure that the total area used does not exceed 500 sqm, total water used does not exceed 10,000 liters, total manure used does not exceed 10,000 kg, and total seeds used does not exceed 50 kg. 2. Manure Requirement: For each square meter, 20 kg of manure is required. 3. Crop Weight Requirement: Ensure that the produced crop weight meets or exceeds the required weights: - Crop 1: 200 kg - Crop 2: 150 kg - Crop 3: 100 kg Objective: No optimization is needed; the goal is to satisfy all constraints with the given resources. A valid solution ensures that the required crop weights are achieved using the available resources and meeting all constraints.'\n\n", "Solar Panel Optimization Problem_reformat": " 'The Home Electricity Management problem involves determining if the yearly electricity demand of a house can be satisfied using a combination of solar panels and purchased electricity within a budget of $5,000.'\n\n", "Furniture Arrangement Optimization_reformat": " 'The Furniture Placement in a Store problem (second variation) involves arranging 4 furniture pieces in a 3x3 room such that the compatibility constraints are satisfied. Each furniture piece is marked with a number from 1 to 4. Ensure that no two pieces of furniture occupy the same position and that compatibility constraints are respected.'\n\n", "Concert Seating Optimization_reformat": " 'The Concert Ticket Selling problem involves determining if it's possible to sell concert tickets to meet a total price goal while accommodating special guests and maximizing profit.'\n\n", "Board Allocation Feasibility_reformat": " 'There are n different types of boards and m available slots for them to be allocated. Each board type comes in distinct quantities. Each board takes 1 or 2 slots per board. Boards that occupy one slot are referred to as BOARD, and those that occupy two slots are referred to as LBOARD. There are three single-slot boards: BOARD1, BOARD2, and BOARD3, along with two double-slot boards: LBOARD1 and LBOARD2. Each type of board has unique restrictions on the slots it can occupy. BOARD1 and LBOARD1 can only occupy odd-numbered slots, while BOARD3 can only occupy even-numbered slots. BOARD2 can occupy the following slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31. LBOARD2 can only occupy slots that are powers of 2, specifically 2^0, 2^1, 2^2, 2^3, and 2^4. The quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5 and 6 respectively. LBOARDs (LBOARD1 and LBOARD2) each come in a quantity of 4. Additionally, if an LBOARD is present, it comes in a minimum quantity of 2. LBOARD1 can have a range of 0, 2, 3, 4, and so on, while LBOARD2 follows a range of 0, 2, 4, and so forth. Multiple types of LBOARD1 and LBOARD2 may exist, each with distinct quantities. There are 36 available slots in total for all boards.'\n\n", "Slot Allocation Problem_reformat": " 'There are 36 available slots. There are 5 BOARD1, 5 BOARD2, 6 BOARD3, 4 LBOARD1 and 4 LBOARD2. BOARD1, LBOARD1 can occupy only odd slots. BOARD3 can only occupy even slots. BOARD2 can occupy 1,2,3,5,7,11,13,17,19,23,29,31. LBOARD2 can occupy 2^0, 2^1, 2^2, 2^3, 2^4. If LBOARD is present, it comes in a minimum quantity of 2. LBOARD1 range 0,2,3,4, ... LBOARD2 range 0,2,4,... There are 3 types of single slot boards (BOARD1, BOARD2, BOARD3), and 2 types of double slot boards (LBOARD1, LBOARD2). Quantity of BOARD is BOARD1 5, BOARD2 5, BOARD3 6. Quantity of LBOARD 1 4, LBOARD 2 4.'\n\n", "Bin Packing with Constraints_reformat": " 'The dimensions of the bin are 10 x 10 x 10, and the dimensions of the items are: (3,3,3), (3,3,2),(4,4,4), (3,3,3), (2,3,2). Item 1 cannot be touching 2,3,5, item 2 cannot be touching 1,3, item 3 cannot be touching 1,2,4, item 4 cannot be touching 2,5.'\n\n", "Concert Ticket Optimization Problem_reformat": " 'Determine if it's possible to sell concert tickets to meet a total price goal of $50,000 while accommodating 400 special guests, 200 of whom are VIPs, and maximizing profit given the costs.'\n\n", "Bin Packing with Restrictions_reformat": " 'The dimensions of the bin are 10 x 10 x 10, and the dimensions of the items are: (3,3,3), (3,3,2), (4,2,3), (3,3,3), (2,3,2). Is it possible to pack all the items without them intersecting?'\n\n", "Precision Agriculture Resource Allocation Problem_reformat": " 'Determine if it's possible to grow the required weight of vegetables and fruits using the available resources: 5000 liters of water, 400 square meters of land, 4000 kg of manure, and 50 kg of seeds. Crop 1 (vegetable) has a yield of 2 kg/sqm and requires 10 liters/sqm of water and 0.1 kg/sqm of seeds. Crop 2 (fruit) has a yield of 3 kg/sqm and requires 15 liters/sqm and 0.2 kg/sqm. Crop 3 (fruit) has a yield of 4 kg/sqm and requires 20 liters/sqm and 0.15 kg/sqm. Required crop weights are 200 kg for Crop 1, 150 kg for Crop 2, and 100 kg for Crop 3.'\n\n", "MiniZinc Code Generation Problem_reformat": " 'A source code with 10 discrete variables without domain and without constraints.'\n\n", "DiscreteVariableModel_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "VariableAssignmentProblem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "DiscreteVariableConstraintSatisfaction_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "VariableAssignmentWithoutConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "DiscreteConstraintSatisfaction_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "DiscreteVariableOptimization_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "Discrete Variable Constraint Satisfaction Problem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "Discrete Variable Assignment Problem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "MinizincDiscreteConstraintProblem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "UniqueVariableAssignment_reformat": " 'A source code with 10 discrete variables with domain and with the constraint all_different.'\n\n", "BotCommentFormatting_reformat": " 'A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints.'\n\n", "DiscreteVariablesWithConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "MinizincDiscreteVariableConstraintProblem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "Unique Variable Assignment Problem_reformat": " 'A source code with 10 discrete variables with domain and with the constraint all_different.'\n\n", "DiscreteVariableArrayWithoutConstraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "Discrete Variable Constraint Satisfaction_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "Discrete Constraint Satisfaction Problem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "DistinctVariableConstraintProblem_reformat": " 'A source code with an array of discrete variables with domain and with the constraint all_different.'\n\n", "Unconstrained Discrete Variable Problem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "Constraint Satisfaction Problem (CSP)_reformat": " 'A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?' \n\n", "MinizincCodeGenerationProblem_reformat": " 'A source code with 10 discrete variables without domain and with constraints.'\n\n", "MinizincDiscreteVariableModel_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "MinizincDiscreteConstraintSatisfaction_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "MinizincAllDifferentVariables_reformat": " 'A source code with 10 discrete variables with domain and with the constraint all_different.'\n\n", "DiscreteVariableArrayProblem_reformat": " A source code with an array of discrete variables with domain and with the constraint all_different.\n\n", "DiscreteVariableConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "DistinctVariableAssignment_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "MiniZinc Constraint Satisfaction Problem_reformat": " 'A source code with an array of discrete variables with domain and with constraints.'\n\n", "Distinct Variable Assignment Problem_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "AllDifferentArrayModel_reformat": " 'A source code with an array of discrete variables with domain and with the constraint all_different.'\n\n", "Unconstrained Discrete Variable Optimization_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Variable_Distribution_Problem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Variable Array Initialization Problem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "Constraint Satisfaction Problem (CSP) with All-Different Constraint_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Discrete Optimization with Constraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "Discrete Variables Constraint Satisfaction Problem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "ArrayOfDiscreteVariables_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "UnconstrainedDiscreteVariables_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "All-Different Constraint Satisfaction_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "ModelingDiscreteVariables_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "VariableDomainAssignment_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "VariableConstraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "Variable_Constraint_Problem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Unconstrained Discrete Variable Array Problem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "DiscreteVariableNoConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Minizinc_AllDifferent_Discrete_Variables_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Minizinc_AllDifferent_Array_Constraint_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "ConcertTicketSellingProblem_reformat": " 'Determine if it's possible to sell concert tickets to meet a total price goal of $50,000, accommodate 400 special guests, and maximize profit, given 1,000 seats, including 200 VIP seats. The VIP ticket price is $170, and regular tickets are $60. Staff salaries are $20,000, and the concert fund is $25,000. The profit is calculated by subtracting expenses from the total price goal.'\n\n", "BoardAllocationProblem_reformat": " 'There are three single-slot boards: BOARD1, BOARD2, and BOARD3, along with two double-slot boards: LBOARD1 and LBOARD2. Each type of board has unique restrictions on the slots it can occupy. BOARD1 and LBOARD1 can only occupy odd-numbered slots, while BOARD3 can only occupy even-numbered slots. BOARD2 can occupy the following slots: 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, and 31. LBOARD2 can only occupy slots that are powers of 2, specifically 2^0, 2^1, 2^2, 2^3, and 2^4. The quantity of each BOARD type (BOARD1, BOARD2, BOARD3) is 5, 5, and 6 respectively. LBOARDs (LBOARD1 and LBOARD2) each come in a quantity of 4. Additionally, if an LBOARD is present, it comes in a minimum quantity of 2. LBOARD1 can have a range of 0, 2, 3, 4, and so on, while LBOARD2 follows a range of 0, 2, 4, and so forth. Multiple types of LBOARD1 and LBOARD2 may exist, each with distinct quantities. There are 36 available slots in total for all boards.'\n\n", "UnconstrainedDiscreteVariableModel_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "AllDifferentDiscreteVariablesModel_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "UnconstrainedDiscreteVariableArrayModel_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "DiscreteVariableArrayWithConstraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "UnconstrainedDiscreteVariableArrayProblem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "MinizincAllDifferentVariableModel_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "UnconstrainedDiscreteVariableProblem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "DiscreteVariableModelWithConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "AllDifferentDiscreteVariableModel_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "DiscreteVariableWithConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "All-Different Constraint Satisfaction Problem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "MinizincCommentCodeGeneration_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "MiniZincCommentCodeGeneration_reformat": " 'A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints.'\n\n", "DiscreteVariableModelWithComments_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "MinizincDiscreteVariableModelWithComments_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "UnconstrainedDiscreteVariableModelWithComments_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "MinizincAllDifferentModel_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Minizinc All-Different Constraint Problem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "MinizincAllDifferentModelWithComments_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "MinizincCommentCodeGenerationProblem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "MinizincModelWithComments_reformat": " A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with constraints.  \n\n", "MinizincDiscreteVariableProblem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "MinizincAllDifferentConstraintProblem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "MinizincDiscreteVariableAllDifferentProblem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "MinizincDiscreteVariableConstraintSatisfactionProblem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "MinizincAllDifferentArrayConstraint_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Minizinc_AllDifferent_Array_Constraint_With_Comments_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Unconstrained Discrete Optimization_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Minizinc_Discrete_Variables_Constraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "Minizinc Domain Assignment_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "Discrete Constraint Satisfaction Problem (CSP)_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "Minizinc_Unconstrained_Array_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Minizinc_Constraints_Discrete_Variables_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "Minizinc: ArrayDomain_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "ArrayAllDifferentConstraint_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "discrete_variables %_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "discrete_variables_constraints %_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "minizinc_10vars_noconstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "%Constraint Satisfaction Problem (CSP)_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "discrete_variables_without_domain_constraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "discrete_array_constraints %_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "discrete_array_constraints%_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "discrete_variable_constraints %_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "all_different_array_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Minizinc Empty Domain Problem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Minizinc_DiscreteVariables_NoConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "Array Without Domain and Constraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Array of Discrete Variables Without Constraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "AllDifferentConstraint_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Minizinc Constraint Satisfaction Problem (CSP)_reformat": " A source code with 10 discrete variables without domain and without constraints.\n\n", "Minizinc Constraint Satisfaction Problem_reformat": " A source code in minizinc with an array of discrete variables without domain and with constraints.\n\n", "Array of Discrete Variables without Domain and Constraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Array of Discrete Variables with Domain and Without Constraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "AllDifferentConstraintProblem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Minizinc - Empty Domain and Constraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Variable Assignment Problem_reformat": " 'A source code in minizinc that resolves a problem with 10 discrete variables without domain and constraints.' \n\n", "minizinc_discrete_domain_without_constraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "Minizinc_Constraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "ArrayDiscreteVariablesNoDomainNoConstraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Minizinc Array Constraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "Array without Constraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "Minizinc Constraint Programming with All Different Constraint_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "Discrete Variable Assignment_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Array of Discrete Variables without Constraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "Array Constraint Satisfaction Problem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "Minizinc AllDifferentConstraintProblem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "MinizincEmptyDomainProblem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "DiscreteVariableWithNoConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "DiscreteVariableConstraintSatisfactionProblem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "DiscreteVariableAllDifferentConstraint_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "DiscreteVariableArrayConstraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "AllDifferentArrayConstraintProblem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "discrete_variables_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "Discrete Variable Array Problem_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "Array of Discrete Variables Without Domain and Constraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "Minizinc_Discrete_Variables_NoConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables without domain and without constraints. Put the Bot comments with % symbol.", "DiscreteVariableWithDomainConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "AllDifferent10Vars_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "DiscreteVariablesArrayNoConstraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "DiscreteVariablesWithoutConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and without constraints. Put the Bot comments with % symbol.", "DiscreteVariableWithDomainAndConstraints_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with constraints. Put the Bot comments with % symbol.", "DiscreteVariableAllDifferentConstraintProblem_reformat": "A source code in minizinc that resolve: A source code with 10 discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "DiscreteVariablesArrayNoDomainConstraints_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables without domain and with constraints. Put the Bot comments with % symbol.", "DiscreteVariableArrayAllDifferent_reformat": "A source code in minizinc that resolve: A source code with an array of discrete variables with domain and with the constraint all_different. Put the Bot comments with % symbol.", "FloorArrangementProblem_reformat": "Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u00e2\u20ac\u2122. Fletcher does not live on a floor adjacent to Cooper\u00e2\u20ac\u2122s. They all live on different floors. Find the floors where these people live.\n", "FloorResidentsProblem_reformat": "Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u00e2\u20ac\u2122. Fletcher does not live on a floor adjacent to Cooper\u00e2\u20ac\u2122s. They all live on different floors. Find the floors where these people live.\n", "Apple Bribing Problem_reformat": "A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u00e2\u20ac\u2122s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?\n\n", "Apple_Bribing_Problem_reformat": "A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u00e2\u20ac\u2122s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?\n\n", "MagicSquareProblem_reformat": "A magic square is an n x n grid (n != 2) such that each cell contains a different integer from 1 to n^2 and the sum of the integers in each row, column and diagonal is equal. Find a magic square for size 4, knowing that the sum of integers of each row, column and diagonal has to be equal to n(n^2+ 1)/2 (integer).\n\n", "LogicPuzzleProblem_reformat": "Following a robbery at Sparkles the Jeweller\u00e2\u20ac\u2122s, Inspector Korner of the Yard interviewed six of the usual suspects. He knew that the getaway car had been barely big enough to hold two, so he reckoned that at least four of them were innocent - but which ones? He also supposed that the innocent ones would tell the truth, while the guilty one or ones would lie. What they actually said was:\n- ARTIE: \"It wasn't me.\"\n- BILL: \"Crackitt was in it up to his neck.\"\n- CRACKITT: \"No I wasn't.\"\n- DODGY: \"If Crackitt did it, Bill did it with him.\"\n- EDGY: \"Nobody did it alone.\"\n- FINGERS: \"That\u00e2\u20ac\u2122s right: it was Artie and Dodgy together.\"\nIf the good inspector\u00e2\u20ac\u2122s suppositions were correct, who is guilty?\n\n", "FloorResidentsConstraintProblem_reformat": "Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u00e2\u20ac\u2122. Fletcher does not live on a floor adjacent to Cooper\u00e2\u20ac\u2122s. They all live on different floors. Find the floors where these people live.\n", "AppleBribingProblem_reformat": "A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u00e2\u20ac\u2122s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?\n\n", "MagicSquareConstraintProblem_reformat": "A magic square is an n x n grid (n != 2) such that each cell contains a different integer from 1 to n^2 and the sum of the integers in each row, column and diagonal is equal. Find a magic square for size 4, knowing that the sum of integers of each row, column and diagonal has to be equal to n(n^2+ 1)/2 (integer).\n\n", "FloorResidentsModel_reformat": "Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u00e2\u20ac\u2122. Fletcher does not live on a floor adjacent to Cooper\u00e2\u20ac\u2122s. They all live on different floors. Find the floors where these people live.\n", "DistinctDigitNumberConstraintProblem_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "Logic grid puzzle_reformat": "Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u00e2\u20ac\u2122. Fletcher does not live on a floor adjacent to Cooper\u00e2\u20ac\u2122s. They all live on different floors. Find the floors where these people live.\n", "Cryptarithmetic\u95ee\u9898\u7c7b\u578b_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "Mathematical Modeling._reformat": " The boy wants to give an apple to a girl. He has to pass through five gates, each with a guard, and bribe each guard with half of his apples plus one. He ends up with no apples after giving the girl an apple. Determine how many apples the boy had to begin with.\n\n", "Magic Square Problem_reformat": " 'Find a magic square for size 4, knowing that the sum of integers of each row, column and diagonal has to be equal to n(n^2+ 1)/2 (integer).'\n\n", "Logic Puzzles_reformat": "Following a robbery at Sparkles the Jeweller\u00e2\u20ac\u2122s, Inspector Korner of the Yard interviewed six of the usual suspects. He knew that the getaway car had been barely big enough to hold two, so he reckoned that at least four of them were innocent - but which ones? He also supposed that the innocent ones would tell the truth, while the guilty one or ones would lie. What they actually said was:\n- ARTIE: \"It wasn't me.\"\n- BILL: \"Crackitt was in it up to his neck.\"\n- CRACKITT: \"No I wasn't.\"\n- DODGY: \"If Crackitt did it, Bill did it with him.\"\n- EDGY: \"Nobody did it alone.\"\n- FINGERS: \"That\u00e2\u20ac\u2122s right: it was Artie and Dodgy together.\"\nIf the good inspector\u00e2\u20ac\u2122s suppositions were correct, who is guilty?\n\n", "Integer Linear Programming_reformat": "A bank van had several bags of coins, each containing either 16, 17, 23, 24, 39, or 40 coins (there are multiple bags of the same kind). While the van was parked on the street, thieves stole some bags. A total of 100 coins were lost. It is required to find how many bags were stolen for each type of coin bag.\n\n", "Partition Equal Subset Sum_reformat": "Out of the set of integers 1,...,100 you are given ten different integers ([81 21 79  4 29 70 28 20 14  7]). From this set A of ten integers you can always find two disjoint non-empty subsets, S and T, such that the sum of elements in S equals the sum of elements in T. Note: S union T does not need to be all ten elements of A. Find sets S and T for the given set A.\n", "Logic Puzzle_reformat": " 'Find the age of each child, his or her family\u2019s country of origin, and the part of the Exodus story each related.'\n\n", "Ratio Constraint Satisfaction Problem_reformat": "There are 13 people. 4 of them are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3?\n", "Fair Division\u95ee\u9898_reformat": "A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?\n", "Ratio Constraint Satisfaction_reformat": "There are 13 people. 4 of them are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3?\n", "Equal Distribution Problem_reformat": " 'A farmer has 25 cows numbered 1 to 25. The number 1 cow gives 1kg of milk, number 2 gives 2 kg, and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second, and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?' \n\n", "Linear Equations_reformat": "A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?\n\n", "Mixed Integer Linear Programming (MILP)_reformat": "We want to climb a stair of n steps with [m1, m2] steps at a time. For example a stair of 4 steps with m1 = 1, and m2 = 2 can be climbed with a sequence of four one-step moves or with two two-steps moves. Find a way to climb a stair of 20 steps with m1 = 3 and m2 = 5, i.e. you can take only 3 or 4 or 5 steps at a time.\n\n", "Diophantine Equations_reformat": " Find the number of bags stolen for each type of coin bag.\n\n", "FourDigitPinProblem_reformat": " Find the 4-digit pin number based on the given conditions.\n\n", "Backward Induction_reformat": " The boy has to pass through five gates, each with a guard, and bribe them with half of his apples plus one.\n\n", "Magic Square_reformat": "A magic square is an n x n grid (n != 2) such that each cell contains a different integer from 1 to n^2 and the sum of the integers in each row, column and diagonal is equal. Find a magic square for size 4, knowing that the sum of integers of each row, column and diagonal has to be equal to n(n^2+ 1)/2 (integer).\n\n", "Logic Puzzle - Guilty Suspect Identification_reformat": " Identify the guilty suspect based on the statements given by each suspect.\n\n", "Subset Sum Problem_reformat": " 'Find sets S and T for the given set A'\n\n", "Ratio Constraint Problem_reformat": " 'There are 13 people. 4 of them are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3?' \n\n", "Staircase Dynamic Programming_reformat": " Find a way to climb a stair of 20 steps with m1 = 3 and m2 = 5.\n\n", "Floor Puzzle_reformat": "Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u00e2\u20ac\u2122. Fletcher does not live on a floor adjacent to Cooper\u00e2\u20ac\u2122s. They all live on different floors. Find the floors where these people live.\n", "Pin Problem_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "Brainteaser_reformat": "A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u00e2\u20ac\u2122s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?\n\n", "4x4 Magic Square with Sum 34_reformat": " Find a magic square for size 4, given that the sum of integers of each row, column, and diagonal should be equal to 34.\n\n", "Partition Problem_reformat": " Given the set of ten integers ([81 21 79  4 29 70 28 20 14  7]), find two disjoint non-empty subsets, S and T, such that the sum of elements in S equals the sum of elements in T.\n\n", "Logic Puzzle - Exodus Story_reformat": " Find the age of each child, his or her family's country of origin, and the part of the Exodus story each related.\n\n", "Male-Female Ratio Problem_reformat": "There are 13 people. 4 of them are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3?\n", "Equal Distribution of Resources_reformat": " 'A farmer has 25 cows numbered 1 to 25, where cow 1 gives 1kg of milk, cow 2 gives 2kg, and so on up to cow 25 which gives 25kg per day. The farmer wants to distribute his cows to his 5 sons: 7 cows to the first son, 6 to the second, 5 to the third, 4 to the fourth, and 3 to the last, ensuring that each son receives the same total quantity of milk produced.'\n\n", "System of Equations_reformat": "A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?\n\n", "Stair Climbing Ways Problem_reformat": " Find a way to climb a stair of 20 steps with m1 = 3 and m2 = 5.\n\n", "Pythagorean Quadruple_reformat": " Find a combination of 4 different numbers between 1 and 100, such that the sum of the squares of the two first numbers is equal to the sum of the squares of the other two numbers.\n\n", "Cryptarithmetic_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "Mathematical Modeling_reformat": "A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u00e2\u20ac\u2122s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?\n\n", "Logic Game: Logic Puzzle_reformat": "Following a robbery at Sparkles the Jeweller\u00e2\u20ac\u2122s, Inspector Korner of the Yard interviewed six of the usual suspects. He knew that the getaway car had been barely big enough to hold two, so he reckoned that at least four of them were innocent - but which ones? He also supposed that the innocent ones would tell the truth, while the guilty one or ones would lie. What they actually said was:\n- ARTIE: \"It wasn't me.\"\n- BILL: \"Crackitt was in it up to his neck.\"\n- CRACKITT: \"No I wasn't.\"\n- DODGY: \"If Crackitt did it, Bill did it with him.\"\n- EDGY: \"Nobody did it alone.\"\n- FINGERS: \"That\u00e2\u20ac\u2122s right: it was Artie and Dodgy together.\"\nIf the good inspector\u00e2\u20ac\u2122s suppositions were correct, who is guilty?\n\n", "Coin Combination Problem_reformat": " 'A bank van had several bags of coins, each containing either 16, 17, 23, 24, 39, or 40 coins. A total of 100 coins were lost. It is required to find how many bags were stolen for each type of coin bag.'\n\n", "Equal Sum Subsets_reformat": "Out of the set of integers 1,...,100 you are given ten different integers ([81 21 79  4 29 70 28 20 14  7]). From this set A of ten integers you can always find two disjoint non-empty subsets, S and T, such that the sum of elements in S equals the sum of elements in T. Note: S union T does not need to be all ten elements of A. Find sets S and T for the given set A.\n", "Logic Grid Puzzle_reformat": " 'In preparation for Passover, five children at Hebrew school (Bernice, Carl, Debby, Sammy, and Ted) have been chosen to present different parts of the story of the Exodus from Egypt (burning bush, captivity, Moses\u00e2\u20ac\u2122s youth, Passover, or the Ten Commandments). Each child is a different age (three, five, seven, eight, or ten), and the family of each child has recently made its own exodus to America from a different country (Ethiopia, Kazakhstan, Lithuania, Morocco, or Yemen). Can you find the age of each child, his or her family\u00e2\u20ac\u2122s country of origin, and the part of the Exodus story each related? 1. Debby\u00e2\u20ac\u2122s family is from Lithuania. 2. The child who told the story of the Passover is two years older than Bernice. 3. The child whose family is from Yemen is younger than the child from the Ethiopian family. 4. The child from the Moroccan family is three years older than Ted. 5. Sammy is three years older than the child who told the story of Moses\u00e2\u20ac\u2122s youth in the house of the Pharaoh. Determine the association: Age-Child-Country-Story.' \n\n", "Arrangement with Ratio Constraint_reformat": "There are 13 people. 4 of them are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3?\n", "Equal Milk Distribution Problem_reformat": " 'A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?' \n\n", "FloorPuzzle_reformat": "Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u00e2\u20ac\u2122. Fletcher does not live on a floor adjacent to Cooper\u00e2\u20ac\u2122s. They all live on different floors. Find the floors where these people live.\n", "Four_digit_pin_problem_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "apple_bribe_problem_reformat": "A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u00e2\u20ac\u2122s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?\n\n", "Deductive reasoning puzzle_reformat": " Find the floors where Baker, Cooper, Fletcher, Miller, and Smith live.\n\n", "Four-Digit Pin Problem_reformat": " Find the 4-digit pin number using the given information.\n\n", "Equal Sum Subsets._reformat": " 'Find sets S and T for the given set A'\n\n", "Logic and Deduction problem_reformat": " Determine the association between the age of each child, his or her family's country of origin, and the part of the Exodus story each related.\n\n", "Gender Ratio Arrangement Problem_reformat": " Find a way for the 13 people, 4 of whom are male, to enter a room one at a time so that the ratio of females to males in the room at any one time is no greater than 7/3.\n\n", "Logical reasoning_reformat": "Following a robbery at Sparkles the Jeweller\u00e2\u20ac\u2122s, Inspector Korner of the Yard interviewed six of the usual suspects. He knew that the getaway car had been barely big enough to hold two, so he reckoned that at least four of them were innocent - but which ones? He also supposed that the innocent ones would tell the truth, while the guilty one or ones would lie. What they actually said was:\n- ARTIE: \"It wasn't me.\"\n- BILL: \"Crackitt was in it up to his neck.\"\n- CRACKITT: \"No I wasn't.\"\n- DODGY: \"If Crackitt did it, Bill did it with him.\"\n- EDGY: \"Nobody did it alone.\"\n- FINGERS: \"That\u00e2\u20ac\u2122s right: it was Artie and Dodgy together.\"\nIf the good inspector\u00e2\u20ac\u2122s suppositions were correct, who is guilty?\n\n", "Logic Puzzle - Children's Ages, Countries, and Stories._reformat": " Determine the association between the age of each child, their country of origin, and the part of the Exodus story each child related. \n\n", "Milk Distribution Problem_reformat": " 'A farmer has 25 cows numbered 1 to 25, with cow 1 giving 1kg of milk, cow 2 giving 2kg, and so on up to cow 25 which gives 25kg of milk per day. The farmer has 5 sons and wants to distribute the cows to them: 7 to the first son, 6 to the second, 5 to the third, 4 to the fourth, and 3 to the last son, ensuring that the total quantity of milk produced by each son is the same. How can he distribute the cows?'\n\n", "Staircase Climbing_reformat": " 'Climb a stair of 20 steps with m1 = 3 and m2 = 5.'\n\n", "Pythagorean quadruples_reformat": " Find a combination of 4 different numbers between 1 and 100, such that the sum of the squares of the two first numbers is equal to the sum of the squares of the other two numbers.\n\n", "4-digit puzzle_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "Magic Square for Odd Order Sizes_reformat": "A magic square is an n x n grid (n != 2) such that each cell contains a different integer from 1 to n^2 and the sum of the integers in each row, column and diagonal is equal. Find a magic square for size 4, knowing that the sum of integers of each row, column and diagonal has to be equal to n(n^2+ 1)/2 (integer).\n\n", "Coin Bag Theft Problem_reformat": " 'A bank van had several bags of coins, each containing either 16, 17, 23, 24, 39, or 40 coins. A total of 100 coins were lost. It is required to find how many bags were stolen for each type of coin bag.'\n\n", "Age-Story-Country Mapping_reformat": " 'Determine the association between the age, child, country of origin, and part of the Exodus story for each child.'\n", "Mathematical word problem_reformat": "A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?\n\n", "Mixed Integer Linear Programming (MILP) Model_reformat": "We want to climb a stair of n steps with [m1, m2] steps at a time. For example a stair of 4 steps with m1 = 1, and m2 = 2 can be climbed with a sequence of four one-step moves or with two two-steps moves. Find a way to climb a stair of 20 steps with m1 = 3 and m2 = 5, i.e. you can take only 3 or 4 or 5 steps at a time.\n\n", "Sum of Squares Equivalence_reformat": " 'Find a combination of 4 different numbers between 1 and 100, such that the sum of the squares of the two first numbers is equal to the sum of the squares of the other two numbers.'\n\n", "4_digit_pin_problem_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "Magic Square of Order 4_reformat": "A magic square is an n x n grid (n != 2) such that each cell contains a different integer from 1 to n^2 and the sum of the integers in each row, column and diagonal is equal. Find a magic square for size 4, knowing that the sum of integers of each row, column and diagonal has to be equal to n(n^2+ 1)/2 (integer).\n\n", "SuspectProblem_reformat": "Following a robbery at Sparkles the Jeweller\u00e2\u20ac\u2122s, Inspector Korner of the Yard interviewed six of the usual suspects. He knew that the getaway car had been barely big enough to hold two, so he reckoned that at least four of them were innocent - but which ones? He also supposed that the innocent ones would tell the truth, while the guilty one or ones would lie. What they actually said was:\n- ARTIE: \"It wasn't me.\"\n- BILL: \"Crackitt was in it up to his neck.\"\n- CRACKITT: \"No I wasn't.\"\n- DODGY: \"If Crackitt did it, Bill did it with him.\"\n- EDGY: \"Nobody did it alone.\"\n- FINGERS: \"That\u00e2\u20ac\u2122s right: it was Artie and Dodgy together.\"\nIf the good inspector\u00e2\u20ac\u2122s suppositions were correct, who is guilty?\n\n", "coin_bags_problem_reformat": "A bank van had several bags of coins, each containing either 16, 17, 23, 24, 39, or 40 coins (there are multiple bags of the same kind). While the van was parked on the street, thieves stole some bags. A total of 100 coins were lost. It is required to find how many bags were stolen for each type of coin bag.\n\n", "Equal Subset Sum Problem_reformat": " 'You are given ten different integers ([81 21 79  4 29 70 28 20 14  7]) from the set of integers 1,...,100. Find two disjoint non-empty subsets, S and T, such that the sum of elements in S equals the sum of elements in T. S union T does not need to be all ten elements of A.'\n\n", "Children Bible Stories_reformat": " 'Determine the association: Age-Child-Country-Story.'\n", "RatioConstraintPlacementProblem_reformat": "There are 13 people. 4 of them are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3?\n", "Cow Distribution Problem_reformat": "A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?\n", "linear equation with four variables_reformat": "A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?\n\n", "MultiStepStaircase_reformat": "We want to climb a stair of n steps with [m1, m2] steps at a time. For example a stair of 4 steps with m1 = 1, and m2 = 2 can be climbed with a sequence of four one-step moves or with two two-steps moves. Find a way to climb a stair of 20 steps with m1 = 3 and m2 = 5, i.e. you can take only 3 or 4 or 5 steps at a time.\n\n", "sum_of_squares_reformat": "Find a combination of 4 different numbers between 1 and 100, such that the sum of the squares of the two first numbers is equal to the sum of the squares of the other two numbers, i.e. a^2 + b^2 = c^2 + d^2 for some a, b, c, d in {1, 100}, a != b != c != d.\n", "Linear Diophantine Equation_reformat": "A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u00e2\u20ac\u2122s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?\n\n", "Permutation with Restrictions_reformat": "There are 13 people. 4 of them are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3?\n", "Linear Equations in Four Variables_reformat": "A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?\n\n", "Multi-Step Staircase Climbing_reformat": "We want to climb a stair of n steps with [m1, m2] steps at a time. For example a stair of 4 steps with m1 = 1, and m2 = 2 can be climbed with a sequence of four one-step moves or with two two-steps moves. Find a way to climb a stair of 20 steps with m1 = 3 and m2 = 5, i.e. you can take only 3 or 4 or 5 steps at a time.\n\n", "Diophantine Equation_reformat": "Find a combination of 4 different numbers between 1 and 100, such that the sum of the squares of the two first numbers is equal to the sum of the squares of the other two numbers, i.e. a^2 + b^2 = c^2 + d^2 for some a, b, c, d in {1, 100}, a != b != c != d.\n", "Cryptarithmetic\u95ee\u9898_reformat": "My bank card has a 4 digit pin, abcd. I use the following facts to help me\nremember it:\n\u00e2\u20ac\u00a2 no two digits are the same\n\u00e2\u20ac\u00a2 the 2-digit number cd is 3 times the 2-digit number ab\n\u00e2\u20ac\u00a2 the 2-digit number da is 2 times the 2-digit number bc\nWhat is my pin?\n", "Mathematical modeling._reformat": "A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u00e2\u20ac\u2122s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?\n\n", "Logic Puzzle - Who is Guilty?_reformat": "Following a robbery at Sparkles the Jeweller\u00e2\u20ac\u2122s, Inspector Korner of the Yard interviewed six of the usual suspects. He knew that the getaway car had been barely big enough to hold two, so he reckoned that at least four of them were innocent - but which ones? He also supposed that the innocent ones would tell the truth, while the guilty one or ones would lie. What they actually said was:\n- ARTIE: \"It wasn't me.\"\n- BILL: \"Crackitt was in it up to his neck.\"\n- CRACKITT: \"No I wasn't.\"\n- DODGY: \"If Crackitt did it, Bill did it with him.\"\n- EDGY: \"Nobody did it alone.\"\n- FINGERS: \"That\u00e2\u20ac\u2122s right: it was Artie and Dodgy together.\"\nIf the good inspector\u00e2\u20ac\u2122s suppositions were correct, who is guilty?\n\n", "Partition Equal Subset Sum\u95ee\u9898_reformat": "Out of the set of integers 1,...,100 you are given ten different integers ([81 21 79  4 29 70 28 20 14  7]). From this set A of ten integers you can always find two disjoint non-empty subsets, S and T, such that the sum of elements in S equals the sum of elements in T. Note: S union T does not need to be all ten elements of A. Find sets S and T for the given set A.\n", "Storyteller Assignment Problem_reformat": " Determine the association between the age of each child, their family's country of origin, and the part of the Exodus story they presented.\n\n", "Distribute Equal Quantity Problem_reformat": "A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?\n", "Diophantine equation_reformat": "Find a combination of 4 different numbers between 1 and 100, such that the sum of the squares of the two first numbers is equal to the sum of the squares of the other two numbers, i.e. a^2 + b^2 = c^2 + d^2 for some a, b, c, d in {1, 100}, a != b != c != d.\n", "Floor Assignment Logic Puzzle_reformat": " 'Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u00e2\u20ac\u2122. Fletcher does not live on a floor adjacent to Cooper\u00e2\u20ac\u2122s. They all live on different floors. Find the floors where these people live.'\n\n", "UniqueDigitPinProblem_reformat": " 'My bank card has a 4 digit pin, abcd. I use the following facts to help me remember it: no two digits are the same, the 2-digit number cd is 3 times the 2-digit number ab, the 2-digit number da is 2 times the 2-digit number bc. What is my pin?'\n\n", "Reverse Bribery Problem_reformat": " 'A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u2019s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?' \n\n", "Innocent Suspect Analysis_reformat": " 'Following a robbery at Sparkles the Jeweller\u2019s, Inspector Korner of the Yard interviewed six of the usual suspects. He knew that the getaway car had been barely big enough to hold two, so he reckoned that at least four of them were innocent - but which ones? He also supposed that the innocent ones would tell the truth, while the guilty one or ones would lie. What they actually said was: ARTIE: \"It wasn't me.\" BILL: \"Crackitt was in it up to his neck.\" CRACKITT: \"No I wasn't.\" DODGY: \"If Crackitt did it, Bill did it with him.\" EDGY: \"Nobody did it alone.\" FINGERS: \"That\u2019s right: it was Artie and Dodgy together.\" If the good inspector\u2019s suppositions were correct, who is guilty?'\n\n", "Subset Sum Partitioning_reformat": " 'Out of the set of integers 1,...,100 you are given ten different integers ([81 21 79  4 29 70 28 20 14  7]). From this set A of ten integers you can always find two disjoint non-empty subsets, S and T, such that the sum of elements in S equals the sum of elements in T. Find sets S and T for the given set A.'\n\n", "Unique 4-Digit PIN Problem_reformat": " 'My bank card has a 4 digit pin, abcd. I use the following facts to help me remember it: no two digits are the same, the 2-digit number cd is 3 times the 2-digit number ab, the 2-digit number da is 2 times the 2-digit number bc. What is my pin?'\n\n", "Reverse Calculation of Discrete Distributions_reformat": " 'A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. After he\u2019s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?'\n\n", "Truth-Teller Analysis_reformat": " 'Following a robbery at Sparkles the Jeweller\u2019s, Inspector Korner of the Yard interviewed six of the usual suspects. He knew that the getaway car had been barely big enough to hold two, so he reckoned that at least four of them were innocent - but which ones? He also supposed that the innocent ones would tell the truth, while the guilty one or ones would lie. What they actually said was: - ARTIE: \"It wasn't me.\" - BILL: \"Crackitt was in it up to his neck.\" - CRACKITT: \"No I wasn't.\" - DODGY: \"If Crackitt did it, Bill did it with him.\" - EDGY: \"Nobody did it alone.\" - FINGERS: \"That\u2019s right: it was Artie and Dodgy together.\" If the good inspector\u2019s suppositions were correct, who is guilty?'\n\n", "Disjoint Subset Sum Problem_reformat": " 'You are given a set A of ten different integers from the range 1 to 100. Your goal is to find two disjoint non-empty subsets S and T such that the sum of the elements in S equals the sum of the elements in T. Note that S union T does not need to include all elements of A.' \n\n", "Coin Combinations Problem_reformat": " 'A bank van had several bags of coins, each containing either 16, 17, 23, 24, 39, or 40 coins. A total of 100 coins were lost. It is required to find how many bags were stolen for each type of coin bag.'\n\n", "Coin Bag Combination Problem_reformat": " 'A bank van had several bags of coins, each containing either 16, 17, 23, 24, 39, or 40 coins. A total of 100 coins were lost. It is required to find how many bags were stolen for each type of coin bag.'\n\n", "Age-Child-Country-Story Association Problem_reformat": " 'In preparation for Passover, five children at Hebrew school (Bernice, Carl, Debby, Sammy, and Ted) have been chosen to present different parts of the story of the Exodus from Egypt (burning bush, captivity, Moses\u2019s youth, Passover, or the Ten Commandments). Each child is a different age (three, five, seven, eight, or ten), and the family of each child has recently made its own exodus to America from a different country (Ethiopia, Kazakhstan, Lithuania, Morocco, or Yemen). Can you find the age of each child, his or her family\u2019s country of origin, and the part of the Exodus story each related?'\n\n", "Sum-Product Price Problem_reformat": "A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?\n\n", "Stair Climbing Problem_reformat": " 'Find a way to climb a stair of 20 steps with m1 = 3 and m2 = 5, i.e. you can take only 3 or 4 or 5 steps at a time.'\n\n", "Distinct Integer Quadratic Equation Solver_reformat": " 'Find a combination of 4 different numbers between 1 and 100, such that the sum of the squares of the two first numbers is equal to the sum of the squares of the other two numbers, i.e. a^2 + b^2 = c^2 + d^2 for some a, b, c, d in {1, 100}, a != b != c != d.'\n\n", "Floor Assignment Problem_reformat": " 'Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u2019s. Fletcher does not live on a floor adjacent to Cooper\u2019s. They all live on different floors. Find the floors where these people live.'\n\n", "Digit Equation Solver_reformat": " 'My bank card has a 4 digit pin, abcd. I use the following facts to help me remember it: no two digits are the same, the 2-digit number cd is 3 times the 2-digit number ab, the 2-digit number da is 2 times the 2-digit number bc. What is my pin?' \n\n", "Magic Square Validation_reformat": " 'Find a magic square for size 4, knowing that the sum of integers of each row, column and diagonal has to be equal to n(n^2+ 1)/2 (integer).' \n\n", "Integer Linear Combination Problem_reformat": " 'A bank van had several bags of coins, each containing either 16, 17, 23, 24, 39, or 40 coins (there are multiple bags of the same kind). While the van was parked on the street, thieves stole some bags. A total of 100 coins were lost. It is required to find how many bags were stolen for each type of coin bag.' \n\n", "Coin Bag Combinations Problem_reformat": " 'A bank van had several bags of coins, each containing either 16, 17, 23, 24, 39, or 40 coins. A total of 100 coins were lost. Find how many bags were stolen for each type of coin bag.'\n\n", "Equal Subset Sum Partition_reformat": " 'Out of the set of integers 1,...,100 you are given ten different integers ([81 21 79  4 29 70 28 20 14  7]). From this set A of ten integers you can always find two disjoint non-empty subsets, S and T, such that the sum of elements in S equals the sum of elements in T. Find sets S and T for the given set A.'\n\n", "Family Age Puzzle_reformat": " 'Determine the association: Age-Child-Country-Story for five children (Bernice, Carl, Debby, Sammy, and Ted) who will present different parts of the Exodus story, considering their ages (three, five, seven, eight, or ten) and their families' countries of origin (Ethiopia, Kazakhstan, Lithuania, Morocco, or Yemen).'\n\n", "Four Prices Combination Problem_reformat": " 'A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?'\n\n", "Stair Climbing Combinations Problem_reformat": " 'Find a way to climb a stair of 20 steps with m1 = 3 and m2 = 5.'\n\n", "Distinct Square Sum Problem_reformat": " 'Find a combination of 4 different numbers between 1 and 100, such that the sum of the squares of the two first numbers is equal to the sum of the squares of the other two numbers, i.e. a^2 + b^2 = c^2 + d^2 for some a, b, c, d in {1, 100}, a != b != c != d.'\n\n", "Four Distinct Digits Problem_reformat": " 'My bank card has a 4 digit pin, abcd, where no two digits are the same. The 2-digit number cd is 3 times the 2-digit number ab, and the 2-digit number da is 2 times the 2-digit number bc. Find the pin.' \n\n", "Reverse Bribe Calculation Problem_reformat": " 'A boy wants to give an apple to a girl. To get to her, he has to pass through five gates, each with a guard. He bribes each guard with half of his apples, plus one. The boy does not have a knife, therefore he gives the guard an integer number of apples. After he\u00e2\u20ac\u2122s given the apple to the girl, he has no apples left. How many did he have to begin with and in the process?' \n\n", "Magic Square Construction_reformat": " 'A magic square is an n x n grid (n != 2) such that each cell contains a different integer from 1 to n^2 and the sum of the integers in each row, column and diagonal is equal. Find a magic square for size 4, knowing that the sum of integers of each row, column and diagonal has to be equal to n(n^2+ 1)/2 (integer).' \n\n", "Logical Deduction_reformat": " 'Following a robbery at Sparkles the Jeweller\u2019s, Inspector Korner of the Yard interviewed six of the usual suspects. He knew that the getaway car had been barely big enough to hold two, so he reckoned that at least four of them were innocent - but which ones? He also supposed that the innocent ones would tell the truth, while the guilty one or ones would lie. What they actually said was: - ARTIE: \"It wasn't me.\" - BILL: \"Crackitt was in it up to his neck.\" - CRACKITT: \"No I wasn't.\" - DODGY: \"If Crackitt did it, Bill did it with him.\" - EDGY: \"Nobody did it alone.\" - FINGERS: \"That's right: it was Artie and Dodgy together.\" If the good inspector\u2019s suppositions were correct, who is guilty?' \n\n", "Subset Sum Pairs Problem_reformat": " 'You are given a set A of ten different integers from the integers 1 to 100. Your task is to find two disjoint non-empty subsets S and T from set A, such that the sum of the elements in S equals the sum of the elements in T. The subsets S and T do not need to use all ten elements of A, but they must be disjoint and non-empty.' \n\n", "Ratio Maintenance Problem_reformat": " 'There are 13 people. 4 of them are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3?' \n\n", "Combinatorial Subset Sum Problem_reformat": " 'A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?' \n\n", "Four-variable product and sum problem_reformat": " 'A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?' \n\n", "Cow Milk Distribution Problem_reformat": " 'A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?' \n\n", "Simultaneous Nonlinear Equations_reformat": " 'A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?' \n\n", "Simultaneous Equations with Constraints_reformat": " 'A kid buys four items in a grocery store. The cashier mistakenly multiplies the prices instead of adding them, but the total ends up being the same as the correct addition. The total cost of the four items is $7.11. What are the prices of the four items?' \n\n", "Cattle Milk Distribution Problem_reformat": " 'A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?' \n\n", "Simultaneous equations with constraints_reformat": " 'A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?' \n\n", "Ratio Limitation Problem_reformat": " 'There are 13 people, 4 of whom are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3?' \n\n", "Ratio Management Problem_reformat": " 'There are 13 people. 4 of them are male. They randomly enter a room one at a time. Find a way that the males and females enter so that the ratio of females to males in the room at any one time is no greater than 7/3.'\n\n", "Simultaneous Equations with One Incorrect Constraint_reformat": " 'A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?' \n\n", "Combinatorial Distribution Problem_reformat": " 'A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?' \n\n", "Sum of Squares Combinations Problem_reformat": " 'A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?' \n\n", "Floor Assignment Puzzle_reformat": " 'Baker, Cooper, Fletcher, Miller, and Smith live on the first five floors of an apartment house. Baker does not live on the fifth floor. Cooper does not live on the first floor. Fletcher does not live on either the fifth or the first floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher\u2019s. Fletcher does not live on a floor adjacent to Cooper\u2019s. They all live on different floors. Find the floors where these people live.'\n\n", "Unique 4-Digit Pin Problem_reformat": " 'My bank card has a 4 digit pin, abcd. I use the following facts to help me remember it: no two digits are the same, the 2-digit number cd is 3 times the 2-digit number ab, and the 2-digit number da is 2 times the 2-digit number bc. What is my pin?'\n\n", "Apples Bribery Problem_reformat": " 'A boy wants to give an apple to a girl. He has to pass through five gates, each with a guard. He gives each guard half of his apples, plus one, and ends up with no apples after giving one to the girl. How many apples did he have to begin with?'\n\n", "Guilty Suspect Deduction_reformat": " 'Following a robbery at Sparkles the Jeweller\u2019s, Inspector Korner interviewed six suspects: ARTIE, BILL, CRACKITT, DODGY, EDGY, and FINGERS. The getaway car could barely hold two people, implying at least four suspects are innocent. The innocent ones tell the truth while the guilty ones lie. Determine which of the suspects are guilty based on their statements.'\n\n", "Combinatorial Sum of Squares Problem_reformat": " 'A farmer has 25 cows numbered 1 to 25. The number 1 cow gives 1 kg milk, number 2 gives 2 kg, and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second, 5 to the third, 4 to the fourth, and 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?'\n\n", "Sum and Product Problem_reformat": "A kid goes into a grocery store and buys four items. The cashier charges $7.11, the kid pays and is about to leave when the cashier calls the kid back, and says \"Hold on, I multiplied the four items instead of adding them; I\u00e2\u20ac\u2122ll try again; Hah, with adding them the price still comes to $7.11\". What were the prices of the four items?\n\n", "Staircase Climbing Problem_reformat": " 'Find a way to climb a stair of 20 steps with m1 = 3 and m2 = 5, i.e. you can take only 3 or 5 steps at a time.'\n\n", "Undefined Problem_reformat": null}