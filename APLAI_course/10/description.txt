A farmer has 25 cows numbered 1 to 25. number 1 cow gives 1kg milk, number 2 gives 2 kg... number and so on up to number 25 that gives 25 kg per day. The farmer has 5 sons and he wants to distribute his cows to them: 7 to the first, 6 to the second and so on down to 3 to the last, however, the total quantity of milk produced should be the same: how can he distribute the cows?


int: n = 4; % Number of combinations
int: range = 100; % Range of numbers

% Define the variables for the combinations
array[1..n] of var 1..range: a; % First number
array[1..n] of var 1..range: b; % Second number
array[1..n] of var 1..range: c; % Third number
array[1..n] of var 1..range: d; % Fourth number

% Constraints to ensure that the numbers are different within each pair
constraint forall(i in 1..n) (
    a[i] != b[i] /\
    c[i] != d[i]
);

% Constraint for the sum of squares
constraint forall(i in 1..n) (
    a[i]*a[i] + b[i]*b[i] = c[i]*c[i] + d[i]*d[i]
);

% Find a solution
solve satisfy;

% Output the combinations that satisfy the conditions
output [
    "a: " ++ show(a) ++ "
" ++
    "b: " ++ show(b) ++ "
" ++
    "c: " ++ show(c) ++ "
" ++
    "d: " ++ show(d)
];
